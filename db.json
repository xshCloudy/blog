{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/img/all/2x1.jpg","path":"img/all/2x1.jpg","modified":1,"renderable":0},{"_id":"source/img/all/2x2.jpg","path":"img/all/2x2.jpg","modified":1,"renderable":0},{"_id":"source/img/all/2x3.jpg","path":"img/all/2x3.jpg","modified":1,"renderable":0},{"_id":"source/img/all/futrueTask2.jpg","path":"img/all/futrueTask2.jpg","modified":1,"renderable":0},{"_id":"source/img/all/remote_debug1.PNG","path":"img/all/remote_debug1.PNG","modified":1,"renderable":0},{"_id":"source/img/all/sso.PNG","path":"img/all/sso.PNG","modified":1,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":1,"renderable":0},{"_id":"source/img/sentinel/sentinel2.png","path":"img/sentinel/sentinel2.png","modified":1,"renderable":0},{"_id":"source/img/sentinel/sentinel3.png","path":"img/sentinel/sentinel3.png","modified":1,"renderable":0},{"_id":"source/img/sentinel/sentinel4.png","path":"img/sentinel/sentinel4.png","modified":1,"renderable":0},{"_id":"source/img/sentinel/sentinel5.png","path":"img/sentinel/sentinel5.png","modified":1,"renderable":0},{"_id":"source/img/sentinel/sentinel6.png","path":"img/sentinel/sentinel6.png","modified":1,"renderable":0},{"_id":"source/img/sentinel/sentinel7.png","path":"img/sentinel/sentinel7.png","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/mysql1.PNG","path":"img/shardingjdbc/mysql1.PNG","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/mysql2.PNG","path":"img/shardingjdbc/mysql2.PNG","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/mysql3.PNG","path":"img/shardingjdbc/mysql3.PNG","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere1.png","path":"img/shardingjdbc/shardingSphere1.png","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere2.png","path":"img/shardingjdbc/shardingSphere2.png","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere6.png","path":"img/shardingjdbc/shardingSphere6.png","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere7.png","path":"img/shardingjdbc/shardingSphere7.png","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere8.png","path":"img/shardingjdbc/shardingSphere8.png","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere9.png","path":"img/shardingjdbc/shardingSphere9.png","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingjdbc1.PNG","path":"img/shardingjdbc/shardingjdbc1.PNG","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/all/lock.PNG","path":"img/all/lock.PNG","modified":1,"renderable":0},{"_id":"source/img/all/remote_debug2.PNG","path":"img/all/remote_debug2.PNG","modified":1,"renderable":0},{"_id":"source/img/avatar/boy.png","path":"img/avatar/boy.png","modified":1,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"source/img/seata/seata1.png","path":"img/seata/seata1.png","modified":1,"renderable":0},{"_id":"source/img/seata/seata3.png","path":"img/seata/seata3.png","modified":1,"renderable":0},{"_id":"source/img/seata/seata4.png","path":"img/seata/seata4.png","modified":1,"renderable":0},{"_id":"source/img/sentinel/sentinel1.png","path":"img/sentinel/sentinel1.png","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/mysql0.PNG","path":"img/shardingjdbc/mysql0.PNG","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere5.png","path":"img/shardingjdbc/shardingSphere5.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"source/img/guitar/5shengyinjie/d_1.png","path":"img/guitar/5shengyinjie/d_1.png","modified":1,"renderable":0},{"_id":"source/img/guitar/5shengyinjie/x_1.png","path":"img/guitar/5shengyinjie/x_1.png","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/dlh_1.jpg","path":"img/guitar/hengan/dlh_1.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/dlh_2.jpg","path":"img/guitar/hengan/dlh_2.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/dlh_3.jpg","path":"img/guitar/hengan/dlh_3.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/dlh_4.jpg","path":"img/guitar/hengan/dlh_4.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/qinjing_2.jpg","path":"img/guitar/hengan/qinjing_2.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/qinjing_1.jpg","path":"img/guitar/hengan/qinjing_1.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/qinyan_2.jpg","path":"img/guitar/hengan/qinyan_2.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/qinyan_1.jpg","path":"img/guitar/hengan/qinyan_1.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/sizhi_1.jpg","path":"img/guitar/hengan/sizhi_1.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/sizhi_2.jpg","path":"img/guitar/hengan/sizhi_2.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/sizhi_3.jpg","path":"img/guitar/hengan/sizhi_3.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/sizhi_4.jpg","path":"img/guitar/hengan/sizhi_4.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/hengan/ss.jpg","path":"img/guitar/hengan/ss.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/G/am.png","path":"img/guitar/G/am.png","modified":1,"renderable":0},{"_id":"source/img/guitar/G/b7.png","path":"img/guitar/G/b7.png","modified":1,"renderable":0},{"_id":"source/img/guitar/G/bm.png","path":"img/guitar/G/bm.png","modified":1,"renderable":0},{"_id":"source/img/guitar/G/c.png","path":"img/guitar/G/c.png","modified":1,"renderable":0},{"_id":"source/img/guitar/G/d.png","path":"img/guitar/G/d.png","modified":1,"renderable":0},{"_id":"source/img/guitar/G/d7.png","path":"img/guitar/G/d7.png","modified":1,"renderable":0},{"_id":"source/img/guitar/G/em.png","path":"img/guitar/G/em.png","modified":1,"renderable":0},{"_id":"source/img/guitar/G/g.png","path":"img/guitar/G/g.png","modified":1,"renderable":0},{"_id":"source/img/guitar/yinjie/yinjie_1.jpg","path":"img/guitar/yinjie/yinjie_1.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/yinjie/yinjie_2.jpg","path":"img/guitar/yinjie/yinjie_2.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":1,"renderable":0},{"_id":"source/img/seata/seata2.png","path":"img/seata/seata2.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/seata/seata5.png","path":"img/seata/seata5.png","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/images/wx.JPG","path":"css/images/wx.JPG","modified":1,"renderable":1},{"_id":"source/img/all/futrueTask1.jpg","path":"img/all/futrueTask1.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":1,"renderable":0},{"_id":"source/img/guitar/C/picture/am.png","path":"img/guitar/C/picture/am.png","modified":1,"renderable":0},{"_id":"source/img/guitar/C/picture/c.png","path":"img/guitar/C/picture/c.png","modified":1,"renderable":0},{"_id":"source/img/guitar/C/picture/dm.png","path":"img/guitar/C/picture/dm.png","modified":1,"renderable":0},{"_id":"source/img/guitar/C/picture/em.png","path":"img/guitar/C/picture/em.png","modified":1,"renderable":0},{"_id":"source/img/guitar/C/picture/f.png","path":"img/guitar/C/picture/f.png","modified":1,"renderable":0},{"_id":"source/img/guitar/C/picture/g.png","path":"img/guitar/C/picture/g.png","modified":1,"renderable":0},{"_id":"source/img/guitar/C/picture/g7.png","path":"img/guitar/C/picture/g7.png","modified":1,"renderable":0},{"_id":"source/img/guitar/D/picture/a.png","path":"img/guitar/D/picture/a.png","modified":1,"renderable":0},{"_id":"source/img/guitar/D/picture/a7.png","path":"img/guitar/D/picture/a7.png","modified":1,"renderable":0},{"_id":"source/img/guitar/D/picture/bm.png","path":"img/guitar/D/picture/bm.png","modified":1,"renderable":0},{"_id":"source/img/guitar/D/picture/d.png","path":"img/guitar/D/picture/d.png","modified":1,"renderable":0},{"_id":"source/img/guitar/D/picture/em.png","path":"img/guitar/D/picture/em.png","modified":1,"renderable":0},{"_id":"source/img/guitar/D/picture/fm.png","path":"img/guitar/D/picture/fm.png","modified":1,"renderable":0},{"_id":"source/img/guitar/D/picture/g.png","path":"img/guitar/D/picture/g.png","modified":1,"renderable":0},{"_id":"source/img/guitar/G/g_list.png","path":"img/guitar/G/g_list.png","modified":1,"renderable":0},{"_id":"source/img/header_img/car.jpg","path":"img/header_img/car.jpg","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere3.png","path":"img/shardingjdbc/shardingSphere3.png","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/images/zfb.JPG","path":"css/images/zfb.JPG","modified":1,"renderable":1},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"source/img/guitar/C/picture/c_list.png","path":"img/guitar/C/picture/c_list.png","modified":1,"renderable":0},{"_id":"source/img/guitar/yinjie/yinjie_4.jpg","path":"img/guitar/yinjie/yinjie_4.jpg","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere10.png","path":"img/shardingjdbc/shardingSphere10.png","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere11.png","path":"img/shardingjdbc/shardingSphere11.png","modified":1,"renderable":0},{"_id":"source/img/guitar/5shengyinjie/x_2.png","path":"img/guitar/5shengyinjie/x_2.png","modified":1,"renderable":0},{"_id":"source/img/guitar/D/picture/d_list.png","path":"img/guitar/D/picture/d_list.png","modified":1,"renderable":0},{"_id":"source/img/guitar/5shengyinjie/d_2.png","path":"img/guitar/5shengyinjie/d_2.png","modified":1,"renderable":0},{"_id":"source/img/guitar/yinjie/yinjie_3.jpg","path":"img/guitar/yinjie/yinjie_3.jpg","modified":1,"renderable":0},{"_id":"source/img/shardingjdbc/shardingSphere4.png","path":"img/shardingjdbc/shardingSphere4.png","modified":1,"renderable":0},{"_id":"source/img/guitar/D/picture/whatIsD.png","path":"img/guitar/D/picture/whatIsD.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":1,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":1,"renderable":0},{"_id":"source/img/blog.jpg","path":"img/blog.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":1,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/huweihuang/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1604559489419},{"_id":"themes/huweihuang/_config.yml","hash":"93c0edabaf1d97a8f429dbd9ff9d97286edb3b56","modified":1604559489424},{"_id":"source/404.md","hash":"84604bdbe87366e8cfc86170bc56bb03252a8242","modified":1604559489053},{"_id":"source/CNAME","hash":"0aa245afe48e903c8d7f3d584950b130cd74ab80","modified":1604559489055},{"_id":"themes/huweihuang/layout/404.ejs","hash":"2e8d719fab50014b7963d3c2f4ee34c23e749d7b","modified":1604559489451},{"_id":"themes/huweihuang/layout/about.ejs","hash":"96c08fc3580b842ad9d8f37f2cdf02e6fa57d7bc","modified":1604559489505},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"62781e8b0ce4de9c3db6042fedeaf13c26d138f8","modified":1604559489510},{"_id":"themes/huweihuang/layout/index.ejs","hash":"f293cefe4bf9f9c6848dff08b6dac4aeb7948892","modified":1604559489512},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1604559489516},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"389fc11a45676f94b77ebd2cb0d658a0358979c8","modified":1604559489521},{"_id":"themes/huweihuang/layout/page.ejs","hash":"f77a9eb0e09931eac85e8244027eb5678c7b0705","modified":1604559489524},{"_id":"themes/huweihuang/layout/post.ejs","hash":"39d6a78b7e47546ca07294a096eb22af39b46ae1","modified":1604559489531},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1604559489538},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1604559489427},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1604559489430},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1604559489433},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1604559489435},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1604559489438},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1604559489441},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1604559489443},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"be539bb545cf6bce5d5c337add47045ae80b21e4","modified":1607068045625},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1604559489448},{"_id":"source/about/index.md","hash":"47689098ee4129c9fa4ced4926e7894967ead051","modified":1604627726726},{"_id":"source/_posts/Arrays-asList坑点记录.md","hash":"4e06a20ccf0f20839d21a2840f2d181851dcff33","modified":1604559489058},{"_id":"source/_posts/Callable，FutureTask优化接口.md","hash":"5d50888d2b2ac62d7957a7dd185bc2e3f5169623","modified":1604559489060},{"_id":"source/_posts/G调常用和弦指法图.md","hash":"914bed2194b407dc3f5c2f6395e22a471102c537","modified":1604559489063},{"_id":"source/_posts/ShardingSphere-一-读写分离.md","hash":"3695230653414afb1465440ce2fd791d2666674b","modified":1607062963953},{"_id":"source/_posts/ShardingSphere-二-分库分表.md","hash":"15a17b4d970c83c268a04a773716be599475b6d0","modified":1607062983257},{"_id":"source/_posts/Stream常用场景.md","hash":"8fe8db5d1c2b9e21ee187f621d4a73fa7ca2557d","modified":1604559489066},{"_id":"source/_posts/easyExcel的使用及合并单元格的处理.md","hash":"6fa018bc3709c093e97a1d3e5a33473eacaf9c17","modified":1604559489069},{"_id":"source/_posts/idea远程调试.md","hash":"0d18b7e579b4144786c8208fa97f3f1f353f2bf3","modified":1604559489072},{"_id":"source/_posts/io.shardingjdbc读写分离.md","hash":"2bb4932ea74a8a17e53f503ddb8fba8e2f4b6001","modified":1605575851170},{"_id":"source/_posts/java锁的分类.md","hash":"32bbbac66e5318e37dd83d6779be10cc9d259b64","modified":1604559489074},{"_id":"source/_posts/jdk8时间工具类整合.md","hash":"17ad46df9cd2d5bfdf6b1e01f402354cc2195248","modified":1604559489076},{"_id":"source/_posts/markdown.md","hash":"0319442744a96abf798d2fd3ea9181dba2b8a865","modified":1604559489079},{"_id":"source/_posts/mysql数据库主从设置.md","hash":"b0313b23174c683bb653e19dcf066ef9b22e79c0","modified":1604561515602},{"_id":"source/_posts/springboot使用redis作为二级缓存.md","hash":"96d4e16e887e7b15949288c8dc7c9a216afa24b3","modified":1604559489087},{"_id":"source/_posts/springboot集成swagger2-增加全局token.md","hash":"a0b239673bdcff82fc4a9a33b806a714b700f6bc","modified":1604559489090},{"_id":"source/_posts/二叉树的遍历.md","hash":"a3a1db7638e264187a965e78e5dc9cd1b1da2389","modified":1604559489093},{"_id":"source/_posts/五声音阶.md","hash":"46846d4600d241bfb43499376291a7e253c9e4b4","modified":1604559489095},{"_id":"source/_posts/分布式事务seata-一-概述.md","hash":"b5d4c81128e9dfd0cc7b52890d5e097d8c1db119","modified":1607305363011},{"_id":"source/_posts/分布式事务seata-二-springboot-seata-dubbo集成（AT模式）.md","hash":"e136c8c129b876075bb52e0f2e6f2f384f113d89","modified":1607065262432},{"_id":"source/_posts/单点登录原理.md","hash":"2e91842046c948f49c6bb8277773cc4caefc8b53","modified":1604559489098},{"_id":"source/_posts/吉他C大调和弦总结.md","hash":"e5e60127693f46916e733b699f08a0c2ea89e7b6","modified":1604559489100},{"_id":"source/_posts/吉他D大调和弦总结.md","hash":"f495845628e788c9bd544973f94fae9438ae420b","modified":1604559489103},{"_id":"source/_posts/吉他大横按的学习技巧总结.md","hash":"3ce882b0e3ab1aeec90bd6ef052b8b71fafb441f","modified":1604559489105},{"_id":"source/_posts/用Sentinel做限流、熔断和降级.md","hash":"f4321b3130efe838fa604886706daf4decc9807f","modified":1607665111288},{"_id":"source/_posts/用注解实现Redis分布式锁.md","hash":"633f4a364d20e15c7936caf15b948a239bbec105","modified":1604559489108},{"_id":"source/_posts/设计模式如何优雅解决if过多问题.md","hash":"675fefcbde73a2f196cc1f56810ce31563a4430f","modified":1604559489111},{"_id":"source/_posts/音阶理论总结.md","hash":"7517f6774d5045a03915d2872f1838fd06270bee","modified":1604559489113},{"_id":"source/archive/index.md","hash":"96f6307965e91239a51c9b19a2c236278a20294e","modified":1604559489119},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1604559489391},{"_id":"source/tags/index.md","hash":"337c0751dfbdec52ecdbdc726eb67764c9c7a155","modified":1604559489415},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"4a1b6853cbcaca6ead3f2dc28e77e974eb25f23d","modified":1604559489456},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"b891d6a0e433f1748f41dd550cef2876c57f49ff","modified":1604559489461},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"10d5e0966895f86373b0652e9ad2df69d742bfe4","modified":1604559489465},{"_id":"themes/huweihuang/layout/_partial/livere.ejs","hash":"fe94e6b896d994eeb62f5d1c78f0f546419b33b1","modified":1604559489469},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1604559489472},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1604559489476},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1604559489479},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"aa41fc56f2fa03559aa266fc062772e9e3bbebbf","modified":1604559489482},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1604559489486},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1604559489489},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"e29431fa78c81d7c521bb1f7be356651fcde959c","modified":1604559489492},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"b185fcffb0d181ddd9eb2259af38cf7d82fb2846","modified":1604559489495},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"814dd716083a8a75eb31f9d2d6ab28150b01c533","modified":1604559489498},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"66e9c11fb694143748a74a7e40329c60744924ec","modified":1604559489501},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1604559489542},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1604559489546},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1604559489553},{"_id":"themes/huweihuang/source/css/donate.css","hash":"948c148076e7e0e0f78225f753813012938f5022","modified":1604559489575},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1604559489579},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1604559489583},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"0abbccdbcd6cce70e8a0bab7152c38adc0b708f1","modified":1604559489603},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1604559489606},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"e197d57dc5312b20974193b6991c779e266fadca","modified":1604559489609},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1604559489611},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1604559489615},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1604559489626},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1604559489629},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1604559489631},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1604559489643},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1604559489650},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1604559489655},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1604559489685},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1604559489690},{"_id":"themes/huweihuang/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1604559489696},{"_id":"themes/huweihuang/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1604559489700},{"_id":"source/img/all/2x1.jpg","hash":"2c21b903b39fad80dbed75911d1b9d513fabdb97","modified":1604559489123},{"_id":"source/img/all/2x2.jpg","hash":"99a0914f734acd2188c0c4af74137e28fd0073cb","modified":1604559489126},{"_id":"source/img/all/2x3.jpg","hash":"3eb7a3062ba5449c5a1fe8fd685125fe12473bca","modified":1604559489129},{"_id":"source/img/all/futrueTask2.jpg","hash":"f24d1a871ec2dda6a05a7c791cabc00c7ee618ca","modified":1604559489136},{"_id":"source/img/all/remote_debug1.PNG","hash":"cbebea4958f6a172f3db1fbf28e4728805e149c3","modified":1604559489142},{"_id":"source/img/all/sso.PNG","hash":"7127893b2471ba5d6f21b9362e1ceafcac665dc9","modified":1604559489148},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1604559489157},{"_id":"source/img/sentinel/sentinel2.png","hash":"f8d5d1f424db53f1c07eb307657208f32ed411b6","modified":1607653320090},{"_id":"source/img/sentinel/sentinel3.png","hash":"4189424a4cf523bbf945ae1e32437278923b1f31","modified":1607653779077},{"_id":"source/img/sentinel/sentinel4.png","hash":"39c6b45a7963bc7bf8527ab4e07a14cdfdc702ac","modified":1607654088420},{"_id":"source/img/sentinel/sentinel5.png","hash":"34bcb9a0bf14c3fd9ac432eba571d6006599b58b","modified":1607656457875},{"_id":"source/img/sentinel/sentinel6.png","hash":"817ac8aa7fd3615933b5c4407f525d20fa575ebd","modified":1607657356006},{"_id":"source/img/sentinel/sentinel7.png","hash":"711d1eb71c065dae88bcbef535b5fb5b60d90d4d","modified":1607657728466},{"_id":"source/img/shardingjdbc/mysql1.PNG","hash":"6755b96914765903a1044d86218c339409b31ca7","modified":1604559489394},{"_id":"source/img/shardingjdbc/mysql2.PNG","hash":"a44611fb71041de0e99ddaedd21187f527619b34","modified":1604559489397},{"_id":"source/img/shardingjdbc/mysql3.PNG","hash":"c7a6108f34f11ce59f9f708888fcee9c57940ca4","modified":1604559489400},{"_id":"source/img/shardingjdbc/shardingSphere1.png","hash":"d69b869d00d3d83e6f0f5c97ba13ce1fb258e9e9","modified":1605574799860},{"_id":"source/img/shardingjdbc/shardingSphere2.png","hash":"80608d4020db2faaf7c04fa6177c6237d9147552","modified":1605574834028},{"_id":"source/img/shardingjdbc/shardingSphere6.png","hash":"d6ad7a6f283d46096019c191fc5c2d288a12c444","modified":1605578291700},{"_id":"source/img/shardingjdbc/shardingSphere7.png","hash":"e40b3ea8bbdb60801b04c32a90ba2fe313848cb6","modified":1605578316543},{"_id":"source/img/shardingjdbc/shardingSphere8.png","hash":"f2ae4ec0db8a7c5b05b18b64be9916c9ff1f2a0b","modified":1605578336418},{"_id":"source/img/shardingjdbc/shardingSphere9.png","hash":"6e231f88892eb31943b9d84938b57664923ed99b","modified":1605578355440},{"_id":"source/img/shardingjdbc/shardingjdbc1.PNG","hash":"ee0e508b749c8ec91474b45678e42f9d73c0e307","modified":1604559489402},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1604559489567},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1604559489618},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1604559489635},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1604559489674},{"_id":"source/img/all/lock.PNG","hash":"53f9350223e54c76312cacd1bf3bc983543e6ca9","modified":1604559489139},{"_id":"source/img/all/remote_debug2.PNG","hash":"85872529f684d89676d0038726257c11415433c5","modified":1604559489145},{"_id":"source/img/avatar/boy.png","hash":"7760f9594d2d4484544349fffd07b71b2e3c2e97","modified":1607066804278},{"_id":"source/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1604559489339},{"_id":"source/img/seata/seata1.png","hash":"559ebcd29bf9a83502a6b38862314278e9541d39","modified":1607045444288},{"_id":"source/img/seata/seata3.png","hash":"97cc13a6321868f60b0fc1c395c25f401f8580b5","modified":1607049482749},{"_id":"source/img/seata/seata4.png","hash":"1e34598140cca053684e5b78e4f471a65e72c826","modified":1607061068864},{"_id":"source/img/sentinel/sentinel1.png","hash":"9401926a5b674afbb97517c99712df567e9e9f12","modified":1607652607712},{"_id":"source/img/shardingjdbc/mysql0.PNG","hash":"8ab24befc25dc33d7f35510f028ee9f7438bde43","modified":1604558502469},{"_id":"source/img/shardingjdbc/shardingSphere5.png","hash":"010feff1d12b23fa7ca3b926d39bddf95c3824fc","modified":1606703662472},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1604559489558},{"_id":"themes/huweihuang/source/css/images/favicon.ico","hash":"d9ab4272f0c9a0a5a7169411d04c66942ee629b9","modified":1604559489589},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1604559489592},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1604559489594},{"_id":"source/img/guitar/5shengyinjie/d_1.png","hash":"455fde7925c20a886a4ca403d7d9b0b53a0e971c","modified":1604559489187},{"_id":"source/img/guitar/5shengyinjie/x_1.png","hash":"520e869782b2b1be33becab22b41b3e2cdd850a8","modified":1604559489196},{"_id":"source/img/guitar/hengan/dlh_1.jpg","hash":"bac0acb5f226968f3615dc75a9eff7765c981b7b","modified":1604559489277},{"_id":"source/img/guitar/hengan/dlh_2.jpg","hash":"ecba233ebb84b2d2bbdeda1d3d0fb2802b56ef5a","modified":1604559489279},{"_id":"source/img/guitar/hengan/dlh_3.jpg","hash":"3a914de8cd04c89cae7a74f9fa16c11350ad9a89","modified":1604559489282},{"_id":"source/img/guitar/hengan/dlh_4.jpg","hash":"8bacb5bcfdb4011951ab5edfca1d461df9266209","modified":1604559489285},{"_id":"source/img/guitar/hengan/qinjing_2.jpg","hash":"fc9deec2f5aebaa88b29550b20538c1b13636009","modified":1604559489290},{"_id":"source/img/guitar/hengan/qinjing_1.jpg","hash":"f15962e2746696005e1648a21b31dfa6425aecc4","modified":1604559489287},{"_id":"source/img/guitar/hengan/qinyan_2.jpg","hash":"7da70745060c29e4f5e940bcf4f49d13562c9a47","modified":1604559489295},{"_id":"source/img/guitar/hengan/qinyan_1.jpg","hash":"d75f84402d810f5ec6dd61fa9350ed52b3e78fe2","modified":1604559489293},{"_id":"source/img/guitar/hengan/sizhi_1.jpg","hash":"733844e97741b094b445793ed2310de0bced9803","modified":1604559489298},{"_id":"source/img/guitar/hengan/sizhi_2.jpg","hash":"a4f7821274c10b32e79e7364ae9999c2903eaac3","modified":1604559489301},{"_id":"source/img/guitar/hengan/sizhi_3.jpg","hash":"86ae82b3a63dcff8c80d7f71cd8ca8ab9efcb800","modified":1604559489304},{"_id":"source/img/guitar/hengan/sizhi_4.jpg","hash":"57267b5ceb496c5aaecd9b1fccfb22844e62856c","modified":1604559489307},{"_id":"source/img/guitar/hengan/ss.jpg","hash":"08f02726c194cfb6d5ae1a209e4cb8ed7a004de2","modified":1604559489309},{"_id":"source/img/guitar/G/am.png","hash":"0c6d22fb754996b1d555e04160dfaa9f833d3235","modified":1604559489253},{"_id":"source/img/guitar/G/b7.png","hash":"6f337e34d62b7626e97242354836ee355f0e7098","modified":1604559489255},{"_id":"source/img/guitar/G/bm.png","hash":"0879f7cb463e1e2d6a5e9fbd8496e0f37c0a4e7c","modified":1604559489258},{"_id":"source/img/guitar/G/c.png","hash":"5c1d71cc0bd316871e00f50acaabd8c6ab21e96e","modified":1604559489260},{"_id":"source/img/guitar/G/d.png","hash":"65ea8d09c6e094f287ec6cde45854304a54f2f86","modified":1604559489262},{"_id":"source/img/guitar/G/d7.png","hash":"e39b56a7573c500ffdaa3a66dee3f6865d14e76f","modified":1604559489265},{"_id":"source/img/guitar/G/em.png","hash":"d4bbb318a4c178484aee11f9474f991b05a103c4","modified":1604559489267},{"_id":"source/img/guitar/G/g.png","hash":"b9e72b96b6027c5447f34c90e39d4fb1f870c44c","modified":1604559489270},{"_id":"source/img/guitar/yinjie/yinjie_1.jpg","hash":"5320de13673c28a4f2981debcb80786bad981710","modified":1604559489313},{"_id":"source/img/guitar/yinjie/yinjie_2.jpg","hash":"03112ce33ce789c6a91c98f7910c26c3d56e0b9a","modified":1604559489316},{"_id":"source/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1604559489343},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1604559489348},{"_id":"source/img/seata/seata2.png","hash":"74eeef4aaad3a6dd2a995176290554aba2dd5a53","modified":1607048649000},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1604559489660},{"_id":"source/img/seata/seata5.png","hash":"5f95ac324821596c5aebf120644608ee4fb7c4da","modified":1607061521534},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1604559489411},{"_id":"themes/huweihuang/source/css/images/wx.JPG","hash":"74b371b4665bc71b038e3541f982d3efaf8c77dc","modified":1604559489597},{"_id":"source/img/all/futrueTask1.jpg","hash":"9f482baac9473a2f2013c1456326411a8eed9a13","modified":1604559489133},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1604559489176},{"_id":"source/img/guitar/C/picture/am.png","hash":"32d5818a1ff96827c3366469065c38070b958e30","modified":1604559489206},{"_id":"source/img/guitar/C/picture/c.png","hash":"f073ebfc5a5d63149a0c1bb27b339f592cc1686a","modified":1604559489209},{"_id":"source/img/guitar/C/picture/dm.png","hash":"d972ec23824f69ebf4a96db81e09f877b2c77923","modified":1604559489214},{"_id":"source/img/guitar/C/picture/em.png","hash":"4071a65852a5369e660c529a332cfd6658fd8b77","modified":1604559489216},{"_id":"source/img/guitar/C/picture/f.png","hash":"efa2ac1c8256aaace5a9f3308e42044502686506","modified":1604559489218},{"_id":"source/img/guitar/C/picture/g.png","hash":"c39891400d38e4047c7e9c511e36c6c85c5a8ff4","modified":1604559489221},{"_id":"source/img/guitar/C/picture/g7.png","hash":"d9a4e4e2b0bac32028fa99548fb41d502431b9af","modified":1604559489223},{"_id":"source/img/guitar/D/picture/a.png","hash":"6976b8edeed7221cd967ea689fcd7038627c70d3","modified":1604559489226},{"_id":"source/img/guitar/D/picture/a7.png","hash":"fe6bd90e7a8168588957f78d79c4000026e2570a","modified":1604559489229},{"_id":"source/img/guitar/D/picture/bm.png","hash":"a4dc9c533eab61773b2a15b23646ffc0a0e0b084","modified":1604559489231},{"_id":"source/img/guitar/D/picture/d.png","hash":"11c162ff058545d53a475fb5b5f5d37b12abcb65","modified":1604559489233},{"_id":"source/img/guitar/D/picture/em.png","hash":"2b4b197ca30aca5e6a792139a3e3adf417a2da76","modified":1604559489238},{"_id":"source/img/guitar/D/picture/fm.png","hash":"acde7630714da2b7973fd89513c00cc001f85aa1","modified":1604559489240},{"_id":"source/img/guitar/D/picture/g.png","hash":"40a5812283c441bd160cd2e549bebe09b16147cb","modified":1604559489242},{"_id":"source/img/guitar/G/g_list.png","hash":"d64fd40334d4b865736afd1eed31b22363bfaa48","modified":1604559489273},{"_id":"source/img/header_img/car.jpg","hash":"47afbfaf5e5112e16f2539e102903ae46a3d361b","modified":1604559489352},{"_id":"source/img/shardingjdbc/shardingSphere3.png","hash":"86e111afff2abce03b3f00723a9bdc5f6c7b6460","modified":1605574989217},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1604559489407},{"_id":"themes/huweihuang/source/css/images/zfb.JPG","hash":"8a146b49aec35be8765ddb1b4434549529e6181a","modified":1604559489600},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1604559489161},{"_id":"source/img/guitar/C/picture/c_list.png","hash":"eeae61930fc2dae5de45093abbe4c17a01d81c7d","modified":1604559489212},{"_id":"source/img/guitar/yinjie/yinjie_4.jpg","hash":"08d53054c3544f0089433b2e8dfe1b6433c6ff05","modified":1604559489323},{"_id":"source/img/shardingjdbc/shardingSphere10.png","hash":"5cc0720c297f5fd1b440df2cecca6f438a9fd06d","modified":1605578922869},{"_id":"source/img/shardingjdbc/shardingSphere11.png","hash":"8b258c36d405266a7697a98e8871b86b6fd973e1","modified":1605579320777},{"_id":"source/img/guitar/5shengyinjie/x_2.png","hash":"530c155d4de4f4bc4b00937dcd94411bd4cc4b4a","modified":1604559489201},{"_id":"source/img/guitar/D/picture/d_list.png","hash":"06192b3ddfd25c0709843b65eecd68db772bc0c8","modified":1604559489235},{"_id":"source/img/guitar/5shengyinjie/d_2.png","hash":"8d3b6c525c7e96a3ced50763fb2ebb369d4ec2f6","modified":1604559489193},{"_id":"source/img/guitar/yinjie/yinjie_3.jpg","hash":"bff1a2aee233f78ba6271cac85cbabe128943c8a","modified":1604559489320},{"_id":"source/img/shardingjdbc/shardingSphere4.png","hash":"f50938e260783f8a68cc7ce9739947cc91112910","modified":1605575546997},{"_id":"source/img/guitar/D/picture/whatIsD.png","hash":"90b8212aeb6d0e9a9e6ff771d4fc5e2ea17179b3","modified":1604559489248},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1604559489370},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1604559489154},{"_id":"source/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1604559489183},{"_id":"source/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1604559489389},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1604559489171},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1604559489362},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1604559489381},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1604559489336},{"_id":"public/post-sitemap.xml","hash":"b1f315e187751c8d227070a34e67d3e4b33cbf25","modified":1639461697768},{"_id":"public/page-sitemap.xml","hash":"3126bae7052b25c312110764f49e9ccf0e9582e7","modified":1639461697917},{"_id":"public/tag-sitemap.xml","hash":"aa5b1f178145e3cb649084dc62127093680157cf","modified":1639461697952},{"_id":"public/sitemap.xsl","hash":"0fd30cf5d1d596c10211a430bf1109b3318a6509","modified":1639461697958},{"_id":"public/sitemap.xml","hash":"31177528acf9c208a0d8a3ba35161fdb23ce516b","modified":1639461697958},{"_id":"public/404.html","hash":"179d53d1e2fb3af368f9240c841f5b553a8bbe27","modified":1639461697964},{"_id":"public/tags/index.html","hash":"66e54caf85b868f5cdd3ad609130dc5b3cc90527","modified":1639461697964},{"_id":"public/uncategorized/用Sentinel做限流、熔断和降级/index.html","hash":"098750b5fbfb4bff12fafcb4e329c86a37a5b8a7","modified":1639461697964},{"_id":"public/uncategorized/分布式事务seata-二-springboot-seata-dubbo集成（AT模式）/index.html","hash":"7d96bdbdab14883fce30de5b4481743c68e0873a","modified":1639461697964},{"_id":"public/uncategorized/分布式事务seata-一-概述/index.html","hash":"1b5102da387830ce05c5315771e21550b3f71e03","modified":1639461697964},{"_id":"public/uncategorized/ShardingSphere-二-分库分表/index.html","hash":"159558646ccb26bc0dfa651f820fc34d1be804fc","modified":1639461697964},{"_id":"public/uncategorized/ShardingSphere-一-读写分离/index.html","hash":"791cd9686c5144761f0cfc2ed076d6ced6aac928","modified":1639461697964},{"_id":"public/uncategorized/io.shardingjdbc读写分离/index.html","hash":"6eb4d60c21126f35f74e1d9536108a53c23fa400","modified":1639461697964},{"_id":"public/uncategorized/mysql数据库主从设置/index.html","hash":"e2b426417004770d0590f16f6889421fc6b3a7b8","modified":1639461697964},{"_id":"public/uncategorized/easyExcel的使用及合并单元格的处理/index.html","hash":"e28e0b86ae7c0f6997f2e57ce368195da67e2303","modified":1639461697964},{"_id":"public/uncategorized/java锁的分类/index.html","hash":"08318f05e511f335cf8681081a94ea546fd9e788","modified":1639461697964},{"_id":"public/uncategorized/设计模式如何优雅解决if过多问题/index.html","hash":"908dbe25444b956d7d9c04683abe70d1a0fe946c","modified":1639461697964},{"_id":"public/uncategorized/Callable，FutureTask优化接口/index.html","hash":"44783835cd86312a7b0a3ff6a074072e36aa168d","modified":1639461697964},{"_id":"public/uncategorized/Stream常用场景/index.html","hash":"a9391cc333a8cd59f57ea5b0a20512e6b224abfc","modified":1639461697965},{"_id":"public/uncategorized/用注解实现Redis分布式锁/index.html","hash":"4b97de65fb65c4d90f4da87e50776aacaf13a3ec","modified":1639461697965},{"_id":"public/uncategorized/二叉树的遍历/index.html","hash":"3d4c11ce7c69b5e5aa495a50ab0a1da67becca10","modified":1639461697965},{"_id":"public/uncategorized/springboot使用redis作为二级缓存/index.html","hash":"4516022080e94a0cc87a0297f9d72714a26d1d54","modified":1639461697965},{"_id":"public/uncategorized/Arrays-asList坑点记录/index.html","hash":"ca3859308ca43a235c73b0630117e7457b8c4711","modified":1639461697965},{"_id":"public/uncategorized/jdk8时间工具类整合/index.html","hash":"28a22190412d82eb00a7b70b0ed10aed483816f4","modified":1639461697965},{"_id":"public/uncategorized/springboot集成swagger2-增加全局token/index.html","hash":"d3b4a595c861fb0ea8f092058f1ba27d9c5e1c87","modified":1639461697965},{"_id":"public/uncategorized/idea远程调试/index.html","hash":"99d2e9d3c52e7a49ca9fda4b787467439571c67e","modified":1639461697965},{"_id":"public/uncategorized/单点登录原理/index.html","hash":"104a4364b50b52adb8e305d0cb2b9d9def03bbba","modified":1639461697965},{"_id":"public/uncategorized/五声音阶/index.html","hash":"c652a341443fa8976434f792a439330d529ba6c8","modified":1639461697965},{"_id":"public/uncategorized/音阶理论总结/index.html","hash":"78e70d6fc47c728299167091e354b1bff0925e07","modified":1639461697965},{"_id":"public/uncategorized/吉他大横按的学习技巧总结/index.html","hash":"b8f9d9f9bc5249534ed784cab4b86d9918ecbad4","modified":1639461697965},{"_id":"public/uncategorized/G调常用和弦指法图/index.html","hash":"8209fbaee3067af8930efdcda45899611d4f1d92","modified":1639461697965},{"_id":"public/uncategorized/吉他C大调和弦总结/index.html","hash":"95b52b29c941cdc0e3e5d7b385ffdc2fe7f0ac30","modified":1639461697965},{"_id":"public/uncategorized/吉他D大调和弦总结/index.html","hash":"659e331b6aa1a3c445f5e3182a6f883248fc4554","modified":1639461697966},{"_id":"public/uncategorized/markdown/index.html","hash":"ab3c7a61d7a6d91758b67cca60c0f1e9fa1f23d9","modified":1639461697966},{"_id":"public/about/index.html","hash":"b451d9ed6aa1935839218c4ddac8e1e5071baa94","modified":1639461697966},{"_id":"public/archive/index.html","hash":"79cf61186acf01d5bad69f6872e4801ac6f8430f","modified":1639461697966},{"_id":"public/archives/index.html","hash":"4709097c994f4c90b696f7ffcbd01904cabd057e","modified":1639461697966},{"_id":"public/archives/archives/2/index.html","hash":"44f2d6aae50e6e8fa5584596459b0412bf46e745","modified":1639461697966},{"_id":"public/archives/archives/3/index.html","hash":"be27d96a268ef292c0d0124d3891c1a10011e900","modified":1639461697966},{"_id":"public/archives/2017/index.html","hash":"bf29ee7ca864b8119998c08141319a7bdc1cf258","modified":1639461697966},{"_id":"public/archives/2017/11/index.html","hash":"14046a8b9da7cae229a8de825412fda94de3ca0d","modified":1639461697966},{"_id":"public/archives/2018/index.html","hash":"624263578f63aabf0eea107af4092eada856d287","modified":1639461697966},{"_id":"public/archives/2018/08/index.html","hash":"e88baf0b9f2a817a633fd849229b35d3092ed1ec","modified":1639461697966},{"_id":"public/archives/2018/09/index.html","hash":"e0e32d5208d4a742d29d0eea9b9fa974432e4cf0","modified":1639461697966},{"_id":"public/archives/2018/10/index.html","hash":"c1cd87b59b056987afbf2b1be939b56274d1ce9a","modified":1639461697966},{"_id":"public/archives/2018/11/index.html","hash":"03037f80ddd56a04314260c34e12544a9f25fb73","modified":1639461697966},{"_id":"public/archives/2019/index.html","hash":"3309b0fef840a91cf667126ae7c4f3751805c5cb","modified":1639461697966},{"_id":"public/archives/2019/01/index.html","hash":"609ede67a8b4cb9f2f7245f0ec1873137a6543f3","modified":1639461697967},{"_id":"public/archives/2019/05/index.html","hash":"4527c71d7fe2b365bf2144f4f17f5129cb47c6f8","modified":1639461697967},{"_id":"public/archives/2019/06/index.html","hash":"0b9badaabd2e8e57e901addd20a588e40973c63f","modified":1639461697967},{"_id":"public/archives/2019/09/index.html","hash":"4cfb32b3ff6b4bcb8a5a41df10940c62b9517020","modified":1639461697967},{"_id":"public/archives/2019/12/index.html","hash":"686955fb094d15e9f06bb31240c117661c5650c2","modified":1639461697967},{"_id":"public/archives/2020/index.html","hash":"0150c4980bf45eb996c3d891903986151e4044d6","modified":1639461697967},{"_id":"public/archives/2020/09/index.html","hash":"e38951293a93f4ef2b60846cc59e011be2e5a147","modified":1639461697967},{"_id":"public/archives/2020/11/index.html","hash":"b96c3d917764158988ca0a843b3ee5f6d9ee7930","modified":1639461697967},{"_id":"public/archives/2020/12/index.html","hash":"1dee904a950d31cacfce0b76eb65661f92c71592","modified":1639461697967},{"_id":"public/index.html","hash":"c22569eef12eb8b41fc1d2d0060c8584e3d227e1","modified":1639461697967},{"_id":"public/archives/2/index.html","hash":"ff3c910b019382b06754fbf350725111b19bdf81","modified":1639461697967},{"_id":"public/archives/3/index.html","hash":"d0f4dc1367918506673c123bdc22320f6e59194a","modified":1639461697967},{"_id":"public/tags/java/index.html","hash":"d73c4108625ed1c5da66814ae289840ca36904c6","modified":1639461697967},{"_id":"public/tags/java/archives/2/index.html","hash":"76a428eab67a3f4cc5dbeb5911aeb43bdb47fd5e","modified":1639461697967},{"_id":"public/tags/guitar/index.html","hash":"5a6de7ca9f3926ad5ff5b0ca983ff9ca075569e1","modified":1639461697967},{"_id":"public/tags/markdown/index.html","hash":"33a2ea506644b81aa63dde10de1fcee8aeccd073","modified":1639461697967},{"_id":"public/tags/seata/index.html","hash":"6a5ea9dd182340acadab41e08157d474ead9433d","modified":1639461697968},{"_id":"public/tags/sentinel/index.html","hash":"267c39db24d83ac423819d435d3b23595270ae8a","modified":1639461697968},{"_id":"public/CNAME","hash":"0aa245afe48e903c8d7f3d584950b130cd74ab80","modified":1639461697987},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1639461697988},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1639461697988},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1639461697988},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1639461697988},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1639461697988},{"_id":"public/img/all/2x1.jpg","hash":"2c21b903b39fad80dbed75911d1b9d513fabdb97","modified":1639461697988},{"_id":"public/img/all/2x2.jpg","hash":"99a0914f734acd2188c0c4af74137e28fd0073cb","modified":1639461697988},{"_id":"public/img/all/futrueTask2.jpg","hash":"f24d1a871ec2dda6a05a7c791cabc00c7ee618ca","modified":1639461697988},{"_id":"public/img/all/2x3.jpg","hash":"3eb7a3062ba5449c5a1fe8fd685125fe12473bca","modified":1639461697988},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1639461697988},{"_id":"public/img/all/remote_debug1.PNG","hash":"cbebea4958f6a172f3db1fbf28e4728805e149c3","modified":1639461697988},{"_id":"public/img/all/sso.PNG","hash":"7127893b2471ba5d6f21b9362e1ceafcac665dc9","modified":1639461697988},{"_id":"public/img/sentinel/sentinel2.png","hash":"f8d5d1f424db53f1c07eb307657208f32ed411b6","modified":1639461697988},{"_id":"public/img/sentinel/sentinel4.png","hash":"39c6b45a7963bc7bf8527ab4e07a14cdfdc702ac","modified":1639461697988},{"_id":"public/img/sentinel/sentinel5.png","hash":"34bcb9a0bf14c3fd9ac432eba571d6006599b58b","modified":1639461697988},{"_id":"public/img/sentinel/sentinel3.png","hash":"4189424a4cf523bbf945ae1e32437278923b1f31","modified":1639461697988},{"_id":"public/img/sentinel/sentinel7.png","hash":"711d1eb71c065dae88bcbef535b5fb5b60d90d4d","modified":1639461697988},{"_id":"public/img/sentinel/sentinel6.png","hash":"817ac8aa7fd3615933b5c4407f525d20fa575ebd","modified":1639461697988},{"_id":"public/img/shardingjdbc/mysql1.PNG","hash":"6755b96914765903a1044d86218c339409b31ca7","modified":1639461697988},{"_id":"public/img/shardingjdbc/mysql3.PNG","hash":"c7a6108f34f11ce59f9f708888fcee9c57940ca4","modified":1639461697988},{"_id":"public/img/shardingjdbc/mysql2.PNG","hash":"a44611fb71041de0e99ddaedd21187f527619b34","modified":1639461697989},{"_id":"public/img/shardingjdbc/shardingSphere1.png","hash":"d69b869d00d3d83e6f0f5c97ba13ce1fb258e9e9","modified":1639461697989},{"_id":"public/img/shardingjdbc/shardingSphere2.png","hash":"80608d4020db2faaf7c04fa6177c6237d9147552","modified":1639461697989},{"_id":"public/img/shardingjdbc/shardingSphere6.png","hash":"d6ad7a6f283d46096019c191fc5c2d288a12c444","modified":1639461697989},{"_id":"public/img/shardingjdbc/shardingSphere8.png","hash":"f2ae4ec0db8a7c5b05b18b64be9916c9ff1f2a0b","modified":1639461697989},{"_id":"public/img/shardingjdbc/shardingSphere7.png","hash":"e40b3ea8bbdb60801b04c32a90ba2fe313848cb6","modified":1639461697989},{"_id":"public/img/shardingjdbc/shardingSphere9.png","hash":"6e231f88892eb31943b9d84938b57664923ed99b","modified":1639461697989},{"_id":"public/img/shardingjdbc/shardingjdbc1.PNG","hash":"ee0e508b749c8ec91474b45678e42f9d73c0e307","modified":1639461697989},{"_id":"public/css/images/favicon.ico","hash":"d9ab4272f0c9a0a5a7169411d04c66942ee629b9","modified":1639461697989},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1639461697989},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1639461697989},{"_id":"public/img/guitar/hengan/dlh_1.jpg","hash":"bac0acb5f226968f3615dc75a9eff7765c981b7b","modified":1639461697989},{"_id":"public/img/guitar/5shengyinjie/x_1.png","hash":"520e869782b2b1be33becab22b41b3e2cdd850a8","modified":1639461697989},{"_id":"public/img/guitar/5shengyinjie/d_1.png","hash":"455fde7925c20a886a4ca403d7d9b0b53a0e971c","modified":1639461697989},{"_id":"public/img/guitar/hengan/dlh_2.jpg","hash":"ecba233ebb84b2d2bbdeda1d3d0fb2802b56ef5a","modified":1639461697989},{"_id":"public/img/guitar/hengan/dlh_3.jpg","hash":"3a914de8cd04c89cae7a74f9fa16c11350ad9a89","modified":1639461697989},{"_id":"public/img/guitar/hengan/dlh_4.jpg","hash":"8bacb5bcfdb4011951ab5edfca1d461df9266209","modified":1639461697989},{"_id":"public/img/guitar/hengan/qinjing_2.jpg","hash":"fc9deec2f5aebaa88b29550b20538c1b13636009","modified":1639461697989},{"_id":"public/img/guitar/hengan/qinyan_2.jpg","hash":"7da70745060c29e4f5e940bcf4f49d13562c9a47","modified":1639461697989},{"_id":"public/img/guitar/hengan/qinjing_1.jpg","hash":"f15962e2746696005e1648a21b31dfa6425aecc4","modified":1639461697989},{"_id":"public/img/guitar/hengan/qinyan_1.jpg","hash":"d75f84402d810f5ec6dd61fa9350ed52b3e78fe2","modified":1639461697989},{"_id":"public/img/guitar/hengan/sizhi_1.jpg","hash":"733844e97741b094b445793ed2310de0bced9803","modified":1639461697989},{"_id":"public/img/guitar/hengan/sizhi_2.jpg","hash":"a4f7821274c10b32e79e7364ae9999c2903eaac3","modified":1639461697989},{"_id":"public/img/guitar/hengan/sizhi_3.jpg","hash":"86ae82b3a63dcff8c80d7f71cd8ca8ab9efcb800","modified":1639461697989},{"_id":"public/img/guitar/hengan/sizhi_4.jpg","hash":"57267b5ceb496c5aaecd9b1fccfb22844e62856c","modified":1639461697989},{"_id":"public/img/guitar/hengan/ss.jpg","hash":"08f02726c194cfb6d5ae1a209e4cb8ed7a004de2","modified":1639461697989},{"_id":"public/img/guitar/G/am.png","hash":"0c6d22fb754996b1d555e04160dfaa9f833d3235","modified":1639461697990},{"_id":"public/img/guitar/G/b7.png","hash":"6f337e34d62b7626e97242354836ee355f0e7098","modified":1639461697990},{"_id":"public/img/guitar/G/bm.png","hash":"0879f7cb463e1e2d6a5e9fbd8496e0f37c0a4e7c","modified":1639461697990},{"_id":"public/img/guitar/G/d7.png","hash":"e39b56a7573c500ffdaa3a66dee3f6865d14e76f","modified":1639461697990},{"_id":"public/img/guitar/G/c.png","hash":"5c1d71cc0bd316871e00f50acaabd8c6ab21e96e","modified":1639461697990},{"_id":"public/img/guitar/G/em.png","hash":"d4bbb318a4c178484aee11f9474f991b05a103c4","modified":1639461697990},{"_id":"public/img/guitar/G/g.png","hash":"b9e72b96b6027c5447f34c90e39d4fb1f870c44c","modified":1639461697990},{"_id":"public/img/guitar/G/d.png","hash":"65ea8d09c6e094f287ec6cde45854304a54f2f86","modified":1639461697990},{"_id":"public/img/guitar/yinjie/yinjie_1.jpg","hash":"5320de13673c28a4f2981debcb80786bad981710","modified":1639461697990},{"_id":"public/img/guitar/yinjie/yinjie_2.jpg","hash":"03112ce33ce789c6a91c98f7910c26c3d56e0b9a","modified":1639461697990},{"_id":"public/img/guitar/C/picture/c.png","hash":"f073ebfc5a5d63149a0c1bb27b339f592cc1686a","modified":1639461697990},{"_id":"public/img/guitar/C/picture/am.png","hash":"32d5818a1ff96827c3366469065c38070b958e30","modified":1639461697990},{"_id":"public/img/guitar/C/picture/em.png","hash":"4071a65852a5369e660c529a332cfd6658fd8b77","modified":1639461697990},{"_id":"public/img/guitar/C/picture/dm.png","hash":"d972ec23824f69ebf4a96db81e09f877b2c77923","modified":1639461697990},{"_id":"public/img/guitar/D/picture/a.png","hash":"6976b8edeed7221cd967ea689fcd7038627c70d3","modified":1639461697990},{"_id":"public/img/guitar/C/picture/f.png","hash":"efa2ac1c8256aaace5a9f3308e42044502686506","modified":1639461697991},{"_id":"public/img/guitar/C/picture/g7.png","hash":"d9a4e4e2b0bac32028fa99548fb41d502431b9af","modified":1639461697991},{"_id":"public/img/guitar/C/picture/g.png","hash":"c39891400d38e4047c7e9c511e36c6c85c5a8ff4","modified":1639461697991},{"_id":"public/img/guitar/D/picture/a7.png","hash":"fe6bd90e7a8168588957f78d79c4000026e2570a","modified":1639461697991},{"_id":"public/img/guitar/D/picture/d.png","hash":"11c162ff058545d53a475fb5b5f5d37b12abcb65","modified":1639461697991},{"_id":"public/img/guitar/D/picture/em.png","hash":"2b4b197ca30aca5e6a792139a3e3adf417a2da76","modified":1639461697991},{"_id":"public/img/guitar/D/picture/bm.png","hash":"a4dc9c533eab61773b2a15b23646ffc0a0e0b084","modified":1639461697991},{"_id":"public/img/guitar/D/picture/fm.png","hash":"acde7630714da2b7973fd89513c00cc001f85aa1","modified":1639461697992},{"_id":"public/img/guitar/D/picture/g.png","hash":"40a5812283c441bd160cd2e549bebe09b16147cb","modified":1639461697992},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1639461698177},{"_id":"public/img/all/lock.PNG","hash":"53f9350223e54c76312cacd1bf3bc983543e6ca9","modified":1639461698177},{"_id":"public/img/avatar/boy.png","hash":"7760f9594d2d4484544349fffd07b71b2e3c2e97","modified":1639461698177},{"_id":"public/img/all/remote_debug2.PNG","hash":"85872529f684d89676d0038726257c11415433c5","modified":1639461698177},{"_id":"public/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1639461698177},{"_id":"public/img/seata/seata3.png","hash":"97cc13a6321868f60b0fc1c395c25f401f8580b5","modified":1639461698177},{"_id":"public/img/seata/seata1.png","hash":"559ebcd29bf9a83502a6b38862314278e9541d39","modified":1639461698177},{"_id":"public/img/seata/seata4.png","hash":"1e34598140cca053684e5b78e4f471a65e72c826","modified":1639461698178},{"_id":"public/img/sentinel/sentinel1.png","hash":"9401926a5b674afbb97517c99712df567e9e9f12","modified":1639461698178},{"_id":"public/img/shardingjdbc/mysql0.PNG","hash":"8ab24befc25dc33d7f35510f028ee9f7438bde43","modified":1639461698178},{"_id":"public/img/shardingjdbc/shardingSphere5.png","hash":"010feff1d12b23fa7ca3b926d39bddf95c3824fc","modified":1639461698178},{"_id":"public/css/images/wx.JPG","hash":"74b371b4665bc71b038e3541f982d3efaf8c77dc","modified":1639461698178},{"_id":"public/img/guitar/C/picture/c_list.png","hash":"eeae61930fc2dae5de45093abbe4c17a01d81c7d","modified":1639461698178},{"_id":"public/img/guitar/yinjie/yinjie_4.jpg","hash":"08d53054c3544f0089433b2e8dfe1b6433c6ff05","modified":1639461698178},{"_id":"public/img/guitar/D/picture/d_list.png","hash":"06192b3ddfd25c0709843b65eecd68db772bc0c8","modified":1639461698178},{"_id":"public/img/guitar/yinjie/yinjie_3.jpg","hash":"bff1a2aee233f78ba6271cac85cbabe128943c8a","modified":1639461698178},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1639461698184},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1639461698184},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1639461698184},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1639461698184},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1639461698184},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1639461698184},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1639461698184},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1639461698184},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1639461698184},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1639461698184},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1639461698184},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1639461698184},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1639461698184},{"_id":"public/img/seata/seata2.png","hash":"74eeef4aaad3a6dd2a995176290554aba2dd5a53","modified":1639461698184},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1639461698184},{"_id":"public/img/guitar/G/g_list.png","hash":"d64fd40334d4b865736afd1eed31b22363bfaa48","modified":1639461698184},{"_id":"public/css/images/zfb.JPG","hash":"8a146b49aec35be8765ddb1b4434549529e6181a","modified":1639461698185},{"_id":"public/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1639461698191},{"_id":"public/img/seata/seata5.png","hash":"5f95ac324821596c5aebf120644608ee4fb7c4da","modified":1639461698191},{"_id":"public/img/header_img/car.jpg","hash":"47afbfaf5e5112e16f2539e102903ae46a3d361b","modified":1639461698191},{"_id":"public/img/guitar/5shengyinjie/d_2.png","hash":"8d3b6c525c7e96a3ced50763fb2ebb369d4ec2f6","modified":1639461698191},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1639461698197},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1639461698197},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1639461698197},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1639461698197},{"_id":"public/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1639461698197},{"_id":"public/img/shardingjdbc/shardingSphere3.png","hash":"86e111afff2abce03b3f00723a9bdc5f6c7b6460","modified":1639461698197},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1639461698198},{"_id":"public/img/guitar/5shengyinjie/x_2.png","hash":"530c155d4de4f4bc4b00937dcd94411bd4cc4b4a","modified":1639461698198},{"_id":"public/img/all/futrueTask1.jpg","hash":"9f482baac9473a2f2013c1456326411a8eed9a13","modified":1639461698204},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1639461698204},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1639461698216},{"_id":"public/img/shardingjdbc/shardingSphere10.png","hash":"5cc0720c297f5fd1b440df2cecca6f438a9fd06d","modified":1639461698217},{"_id":"public/img/shardingjdbc/shardingSphere11.png","hash":"8b258c36d405266a7697a98e8871b86b6fd973e1","modified":1639461698217},{"_id":"public/img/shardingjdbc/shardingSphere4.png","hash":"f50938e260783f8a68cc7ce9739947cc91112910","modified":1639461698234},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1639461698242},{"_id":"public/img/guitar/D/picture/whatIsD.png","hash":"90b8212aeb6d0e9a9e6ff771d4fc5e2ea17179b3","modified":1639461698242},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1639461698247},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1639461698247},{"_id":"public/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1639461698258},{"_id":"public/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1639461698258},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1639461698265},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1639461698275},{"_id":"public/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1639461698279},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1639461698284},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1639461698284},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1639461698286},{"_id":"public/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1639461698288},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1639461698290}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/blog/img/header_img/car.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/blog/img/header_img/car.jpg\"\n---\n","date":"2020-11-05T06:58:09.053Z","updated":"2020-11-05T06:58:09.053Z","path":"404.html","title":"","comments":1,"_id":"ckx5p5xjr000098v5mybqs09y","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-10-03T02:48:33.000Z","description":"走在成为极客的路上","header-img":"/blog/img/header_img/archives-widget.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n>Life was like a box of chocolate, you never know what you're gonna get.\n>\n>Just running!\n\n\n### 兴趣爱好\n\n> 跑步，音乐，旅游，吉他，理财\n\n### 参与社区\n\n > CSDN博客:[https://blog.csdn.net/sinat_39456789](https://blog.csdn.net/sinat_39456789 \"https://blog.csdn.net/sinat_39456789\")\n >\n > Github:[https://github.com/xshCloudy](https://github.com/xshCloudy \"https://github.com/xshCloudy\")\n >\n\n### 联系我\n\n>Email: [xsh_cloudy@163.com](mailto:xsh_cloudy@163.com)\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-10-03 10:48:33\ndescription: \"走在成为极客的路上\"\nheader-img: \"/blog/img/header_img/archives-widget.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n>Life was like a box of chocolate, you never know what you're gonna get.\n>\n>Just running!\n\n\n### 兴趣爱好\n\n> 跑步，音乐，旅游，吉他，理财\n\n### 参与社区\n\n > CSDN博客:[https://blog.csdn.net/sinat_39456789](https://blog.csdn.net/sinat_39456789 \"https://blog.csdn.net/sinat_39456789\")\n >\n > Github:[https://github.com/xshCloudy](https://github.com/xshCloudy \"https://github.com/xshCloudy\")\n >\n\n### 联系我\n\n>Email: [xsh_cloudy@163.com](mailto:xsh_cloudy@163.com)\n\n","updated":"2020-11-06T01:55:26.726Z","path":"about/index.html","comments":1,"_id":"ckx5p5xle000198v5qhdv7awf","content":"<h3 id=\"一句话\">一句话</h3>\n<blockquote>\n<p>Life was like a box of chocolate, you never know what you're gonna get.</p>\n<p>Just running!</p>\n</blockquote>\n<h3 id=\"兴趣爱好\">兴趣爱好</h3>\n<blockquote>\n<p>跑步，音乐，旅游，吉他，理财</p>\n</blockquote>\n<h3 id=\"参与社区\">参与社区</h3>\n<blockquote>\n<p>CSDN博客:<a href=\"https://blog.csdn.net/sinat_39456789\" title=\"https://blog.csdn.net/sinat_39456789\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sinat_39456789</a></p>\n<p>Github:<a href=\"https://github.com/xshCloudy\" title=\"https://github.com/xshCloudy\" target=\"_blank\" rel=\"noopener\">https://github.com/xshCloudy</a></p>\n</blockquote>\n<h3 id=\"联系我\">联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:xsh_cloudy@163.com\" target=\"_blank\" rel=\"noopener\">xsh_cloudy@163.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>一句话</h3>\n<blockquote>\n<p>Life was like a box of chocolate, you never know what you're gonna get.</p>\n<p>Just running!</p>\n</blockquote>\n<h3>兴趣爱好</h3>\n<blockquote>\n<p>跑步，音乐，旅游，吉他，理财</p>\n</blockquote>\n<h3>参与社区</h3>\n<blockquote>\n<p>CSDN博客:<a href=\"https://blog.csdn.net/sinat_39456789\" title=\"https://blog.csdn.net/sinat_39456789\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sinat_39456789</a></p>\n<p>Github:<a href=\"https://github.com/xshCloudy\" title=\"https://github.com/xshCloudy\" target=\"_blank\" rel=\"noopener\">https://github.com/xshCloudy</a></p>\n</blockquote>\n<h3>联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:xsh_cloudy@163.com\" target=\"_blank\" rel=\"noopener\">xsh_cloudy@163.com</a></p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"/blog/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/blog/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2020-11-05T06:58:09.119Z","path":"archive/index.html","_id":"ckx5p5xlk000398v57hkjhnjv","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/blog/img/header_img/tag.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/blog/img/header_img/tag.png\"\n---\n","date":"2020-11-05T06:58:09.415Z","updated":"2020-11-05T06:58:09.415Z","path":"tags/index.html","comments":1,"_id":"ckx5p5xls000698v5srx5o5rq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Arrays.asList坑点记录","catalog":true,"date":"2019-01-17T05:43:51.000Z","subtitle":"Arrays.asList坑点记录","header-img":"/blog/img/article_header/article_header.png","_content":"## Arrays.asList坑点记录\n\n### 坑点\n```javascript\n   public static void main( String[] args ){\n        Integer [] a = {0,1,2,3};\n        List<Integer> integers = Arrays.asList(a);\n        integers.add(4);\n    }\n```\n上述代码执行后结果：\n```javascript\nException in thread \"main\" java.lang.UnsupportedOperationException\n\tat java.util.AbstractList.remove(AbstractList.java:161)\n\tat com.xinji.directpaymentclient.web.service.ArraysTest.main(ArraysTest.java:16\n\n```\n### 分析原因\n进入Arrays.asList方法：\n```javascript\n public static <T> List<T> asList(T... a) {\n        return new ArrayList<>(a);\n    }\n\n```\n发现返回的ArrayList 是Arrays的内部类，并不是java.util包下的ArrayList 。\nArrays里面的ArrayList并没有重写父类AbstractList 中的add，remove方法。\n而父类AbstractList中的add，remove方法是\n```javascript\n    public void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n    public E remove(int index) {\n        throw new UnsupportedOperationException();\n    }\n```\n所以才会报UnsupportedOperationException错误。\n\n### 解决办法\n\n如果不需要改变list长度，可以使用Arrays.asList.\n但如果要改变长度就如下处理转成java.util包下的ArrayList \n```javascript\n  public static void main( String[] args ){\n        Integer [] a = {0,1,2,3,4,5};\n        List<Integer> ints = new ArrayList<Integer>(Arrays.asList(a));\n        ints.add(6);\n        System.out.println(ints.size());\n\n    }\n\n```\n\n\n\n","source":"_posts/Arrays-asList坑点记录.md","raw":"---\ntitle: Arrays.asList坑点记录\ncatalog: true\ndate: 2019-01-17 13:43:51\nsubtitle: \"Arrays.asList坑点记录\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n## Arrays.asList坑点记录\n\n### 坑点\n```javascript\n   public static void main( String[] args ){\n        Integer [] a = {0,1,2,3};\n        List<Integer> integers = Arrays.asList(a);\n        integers.add(4);\n    }\n```\n上述代码执行后结果：\n```javascript\nException in thread \"main\" java.lang.UnsupportedOperationException\n\tat java.util.AbstractList.remove(AbstractList.java:161)\n\tat com.xinji.directpaymentclient.web.service.ArraysTest.main(ArraysTest.java:16\n\n```\n### 分析原因\n进入Arrays.asList方法：\n```javascript\n public static <T> List<T> asList(T... a) {\n        return new ArrayList<>(a);\n    }\n\n```\n发现返回的ArrayList 是Arrays的内部类，并不是java.util包下的ArrayList 。\nArrays里面的ArrayList并没有重写父类AbstractList 中的add，remove方法。\n而父类AbstractList中的add，remove方法是\n```javascript\n    public void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n    public E remove(int index) {\n        throw new UnsupportedOperationException();\n    }\n```\n所以才会报UnsupportedOperationException错误。\n\n### 解决办法\n\n如果不需要改变list长度，可以使用Arrays.asList.\n但如果要改变长度就如下处理转成java.util包下的ArrayList \n```javascript\n  public static void main( String[] args ){\n        Integer [] a = {0,1,2,3,4,5};\n        List<Integer> ints = new ArrayList<Integer>(Arrays.asList(a));\n        ints.add(6);\n        System.out.println(ints.size());\n\n    }\n\n```\n\n\n\n","slug":"Arrays-asList坑点记录","published":1,"updated":"2020-11-05T06:58:09.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xlf000298v5yupzyxp2","content":"<h2 id=\"arraysaslist坑点记录\">Arrays.asList坑点记录</h2>\n<h3 id=\"坑点\">坑点</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main( <span class=\"built_in\">String</span>[] args )&#123;</span><br><span class=\"line\">     Integer [] a = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">     List&lt;Integer&gt; integers = Arrays.asList(a);</span><br><span class=\"line\">     integers.add(<span class=\"number\">4</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码执行后结果：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java.lang.UnsupportedOperationException</span><br><span class=\"line\">\tat java.util.AbstractList.remove(AbstractList.java:<span class=\"number\">161</span>)</span><br><span class=\"line\">\tat com.xinji.directpaymentclient.web.service.ArraysTest.main(ArraysTest.java:<span class=\"number\">16</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分析原因\">分析原因</h3>\n<p>进入Arrays.asList方法：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">static</span> &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(a);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>发现返回的ArrayList 是Arrays的内部类，并不是java.util包下的ArrayList 。\nArrays里面的ArrayList并没有重写父类AbstractList 中的add，remove方法。\n而父类AbstractList中的add，remove方法是\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">void</span> add(int index, E element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public E remove(int index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以才会报UnsupportedOperationException错误。</p>\n<h3 id=\"解决办法\">解决办法</h3>\n<p>如果不需要改变list长度，可以使用Arrays.asList.\n但如果要改变长度就如下处理转成java.util包下的ArrayList\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main( <span class=\"built_in\">String</span>[] args )&#123;</span><br><span class=\"line\">      Integer [] a = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">      List&lt;Integer&gt; ints = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(a));</span><br><span class=\"line\">      ints.add(<span class=\"number\">6</span>);</span><br><span class=\"line\">      System.out.println(ints.size());</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Arrays.asList坑点记录</h2>\n<h3>坑点</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main( <span class=\"built_in\">String</span>[] args )&#123;</span><br><span class=\"line\">     Integer [] a = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">     List&lt;Integer&gt; integers = Arrays.asList(a);</span><br><span class=\"line\">     integers.add(<span class=\"number\">4</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码执行后结果：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java.lang.UnsupportedOperationException</span><br><span class=\"line\">\tat java.util.AbstractList.remove(AbstractList.java:<span class=\"number\">161</span>)</span><br><span class=\"line\">\tat com.xinji.directpaymentclient.web.service.ArraysTest.main(ArraysTest.java:<span class=\"number\">16</span></span><br></pre></td></tr></table></figure></p>\n<h3>分析原因</h3>\n<p>进入Arrays.asList方法：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">static</span> &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(a);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>发现返回的ArrayList 是Arrays的内部类，并不是java.util包下的ArrayList 。\nArrays里面的ArrayList并没有重写父类AbstractList 中的add，remove方法。\n而父类AbstractList中的add，remove方法是\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">void</span> add(int index, E element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public E remove(int index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以才会报UnsupportedOperationException错误。</p>\n<h3>解决办法</h3>\n<p>如果不需要改变list长度，可以使用Arrays.asList.\n但如果要改变长度就如下处理转成java.util包下的ArrayList\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main( <span class=\"built_in\">String</span>[] args )&#123;</span><br><span class=\"line\">      Integer [] a = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">      List&lt;Integer&gt; ints = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(a));</span><br><span class=\"line\">      ints.add(<span class=\"number\">6</span>);</span><br><span class=\"line\">      System.out.println(ints.size());</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ShardingSphere(一)读写分离","catalog":true,"date":"2020-11-16T00:46:01.000Z","subtitle":"ShardingSphere","header-img":"/blog/img/header_img/404.png","_content":"## ShardingSphere(一)读写分离\n### 一.读写分离架构图\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingjdbc1.PNG)\n### 二.数据库主从配置\n[mysql主从设置](https://xshcloudy.gitee.io/blog/uncategorized/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E8%AE%BE%E7%BD%AE/ \"mysql主从设置\")\n### 三.ShardingSphere配置\n`1.引入依赖`\n```java\n  <dependency>\n      <groupId>org.apache.shardingsphere</groupId>\n      <artifactId>sharding-jdbc-spring-boot-starter</artifactId>\n      <version>4.0.0-RC1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.shardingsphere</groupId>\n      <artifactId>sharding-jdbc-spring-namespace</artifactId>\n      <version>4.0.0-RC1</version>\n    </dependency>\n```\n`2.yaml配置`\n```json\nspring:\n  shardingsphere:\n    enabled: true\n    datasource:\n      names: master,slave\n      master:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/sharding?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n      slave:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3307/sharding?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n    masterslave:\n      load-balance-algorithm-type: round_robin\n      name: master_slave\n      master-data-source-name: master\n      slave-data-source-names: slave\n#    encrypt:\n#      encryptors:\n#        aes_encryptor:\n#          type: aes\n#          qualifiedColumns: user.PASS_WORD\n#          props:\n#            aes.key.value: qwwerwefrwe\n    props:\n      #query.with.cipher.column: true\n      sql:\n        show: true\n```\n### 四.验证\n`1.插入数据`\n\n------------\n```\n下图console日志可看到数据源是master，数据是插入master数据库，然后同步到slave数据库。\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere3.png)\n**master数据库**\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere1.png)\n**slave数据库**\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere2.png)\n\n`2.查询数据`\n\n------------\n\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere4.png)\n```\nconsole日志可看到查询是用的slave数据源。\n```\n`3.删除和修改同理，这里省略`\n\n------------\n\n\n### 五.结论\n```json\nshardingSphere默认master数据库执行delete,update,insert,slave数据库执行select，见读写分离架构图，\n读写分离适合数据量不是很多的情况，通过读写分离，扩展从库，来缓解查询的压力。\n```\n### 六.范例代码\n    https://gitee.com/xshCloudy/sharding.git\n\t\n\n\n\n\n","source":"_posts/ShardingSphere-一-读写分离.md","raw":"---\ntitle: ShardingSphere(一)读写分离\ncatalog: true\ndate: 2020-11-16 08:46:01\nsubtitle: ShardingSphere\nheader-img: \"/blog/img/header_img/404.png\"\ntags:\n- java\n---\n## ShardingSphere(一)读写分离\n### 一.读写分离架构图\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingjdbc1.PNG)\n### 二.数据库主从配置\n[mysql主从设置](https://xshcloudy.gitee.io/blog/uncategorized/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E8%AE%BE%E7%BD%AE/ \"mysql主从设置\")\n### 三.ShardingSphere配置\n`1.引入依赖`\n```java\n  <dependency>\n      <groupId>org.apache.shardingsphere</groupId>\n      <artifactId>sharding-jdbc-spring-boot-starter</artifactId>\n      <version>4.0.0-RC1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.shardingsphere</groupId>\n      <artifactId>sharding-jdbc-spring-namespace</artifactId>\n      <version>4.0.0-RC1</version>\n    </dependency>\n```\n`2.yaml配置`\n```json\nspring:\n  shardingsphere:\n    enabled: true\n    datasource:\n      names: master,slave\n      master:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/sharding?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n      slave:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3307/sharding?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n    masterslave:\n      load-balance-algorithm-type: round_robin\n      name: master_slave\n      master-data-source-name: master\n      slave-data-source-names: slave\n#    encrypt:\n#      encryptors:\n#        aes_encryptor:\n#          type: aes\n#          qualifiedColumns: user.PASS_WORD\n#          props:\n#            aes.key.value: qwwerwefrwe\n    props:\n      #query.with.cipher.column: true\n      sql:\n        show: true\n```\n### 四.验证\n`1.插入数据`\n\n------------\n```\n下图console日志可看到数据源是master，数据是插入master数据库，然后同步到slave数据库。\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere3.png)\n**master数据库**\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere1.png)\n**slave数据库**\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere2.png)\n\n`2.查询数据`\n\n------------\n\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere4.png)\n```\nconsole日志可看到查询是用的slave数据源。\n```\n`3.删除和修改同理，这里省略`\n\n------------\n\n\n### 五.结论\n```json\nshardingSphere默认master数据库执行delete,update,insert,slave数据库执行select，见读写分离架构图，\n读写分离适合数据量不是很多的情况，通过读写分离，扩展从库，来缓解查询的压力。\n```\n### 六.范例代码\n    https://gitee.com/xshCloudy/sharding.git\n\t\n\n\n\n\n","slug":"ShardingSphere-一-读写分离","published":1,"updated":"2020-12-04T06:22:43.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xlp000498v5f4pv9r7u","content":"<h2 id=\"shardingsphere一读写分离\">ShardingSphere(一)读写分离</h2>\n<h3 id=\"一读写分离架构图\">一.读写分离架构图</h3>\n<p><img src=\"/blog/img/shardingjdbc/shardingjdbc1.PNG\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"二数据库主从配置\">二.数据库主从配置</h3>\n<p><a href=\"https://xshcloudy.gitee.io/blog/uncategorized/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E8%AE%BE%E7%BD%AE/\" title=\"mysql主从设置\">mysql主从设置</a></p>\n<h3 id=\"三shardingsphere配置\">三.ShardingSphere配置</h3>\n<p><code>1.引入依赖</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sharding-jdbc-spring-namespace&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.yaml配置</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  shardingsphere:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    datasource:</span><br><span class=\"line\">      names: master,slave</span><br><span class=\"line\">      master:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: 111111</span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql://localhost:3306/sharding?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">      slave:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: 111111</span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql://localhost:3307/sharding?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">    masterslave:</span><br><span class=\"line\">      load-balance-algorithm-type: round_robin</span><br><span class=\"line\">      name: master_slave</span><br><span class=\"line\">      master-data-source-name: master</span><br><span class=\"line\">      slave-data-source-names: slave</span><br><span class=\"line\">#    encrypt:</span><br><span class=\"line\">#      encryptors:</span><br><span class=\"line\">#        aes_encryptor:</span><br><span class=\"line\">#          type: aes</span><br><span class=\"line\">#          qualifiedColumns: user.PASS_WORD</span><br><span class=\"line\">#          props:</span><br><span class=\"line\">#            aes.key.value: qwwerwefrwe</span><br><span class=\"line\">    props:</span><br><span class=\"line\">      #query.with.cipher.column: true</span><br><span class=\"line\">      sql:</span><br><span class=\"line\">        show: true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四验证\">四.验证</h3>\n<p><code>1.插入数据</code></p>\n<hr>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下图console日志可看到数据源是master，数据是插入master数据库，然后同步到slave数据库。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere3.png\" alt=\"在这里插入图片描述\">\n<strong>master数据库</strong>\n<img src=\"/blog/img/shardingjdbc/shardingSphere1.png\" alt=\"在这里插入图片描述\">\n<strong>slave数据库</strong>\n<img src=\"/blog/img/shardingjdbc/shardingSphere2.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>2.查询数据</code></p>\n<hr>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere4.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console日志可看到查询是用的slave数据源。</span><br></pre></td></tr></table></figure></p>\n<p><code>3.删除和修改同理，这里省略</code></p>\n<hr>\n<h3 id=\"五结论\">五.结论</h3>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shardingSphere默认master数据库执行delete,update,insert,slave数据库执行select，见读写分离架构图，</span><br><span class=\"line\">读写分离适合数据量不是很多的情况，通过读写分离，扩展从库，来缓解查询的压力。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"六范例代码\">六.范例代码</h3>\n<pre><code>https://gitee.com/xshCloudy/sharding.git\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2>ShardingSphere(一)读写分离</h2>\n<h3>一.读写分离架构图</h3>\n<p><img src=\"/blog/img/shardingjdbc/shardingjdbc1.PNG\" alt=\"在这里插入图片描述\"></p>\n<h3>二.数据库主从配置</h3>\n<p><a href=\"https://xshcloudy.gitee.io/blog/uncategorized/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E8%AE%BE%E7%BD%AE/\" title=\"mysql主从设置\">mysql主从设置</a></p>\n<h3>三.ShardingSphere配置</h3>\n<p><code>1.引入依赖</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sharding-jdbc-spring-namespace&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.yaml配置</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  shardingsphere:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    datasource:</span><br><span class=\"line\">      names: master,slave</span><br><span class=\"line\">      master:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: 111111</span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql://localhost:3306/sharding?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">      slave:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: 111111</span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql://localhost:3307/sharding?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">    masterslave:</span><br><span class=\"line\">      load-balance-algorithm-type: round_robin</span><br><span class=\"line\">      name: master_slave</span><br><span class=\"line\">      master-data-source-name: master</span><br><span class=\"line\">      slave-data-source-names: slave</span><br><span class=\"line\">#    encrypt:</span><br><span class=\"line\">#      encryptors:</span><br><span class=\"line\">#        aes_encryptor:</span><br><span class=\"line\">#          type: aes</span><br><span class=\"line\">#          qualifiedColumns: user.PASS_WORD</span><br><span class=\"line\">#          props:</span><br><span class=\"line\">#            aes.key.value: qwwerwefrwe</span><br><span class=\"line\">    props:</span><br><span class=\"line\">      #query.with.cipher.column: true</span><br><span class=\"line\">      sql:</span><br><span class=\"line\">        show: true</span><br></pre></td></tr></table></figure></p>\n<h3>四.验证</h3>\n<p><code>1.插入数据</code></p>\n<hr>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下图console日志可看到数据源是master，数据是插入master数据库，然后同步到slave数据库。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere3.png\" alt=\"在这里插入图片描述\">\n<strong>master数据库</strong>\n<img src=\"/blog/img/shardingjdbc/shardingSphere1.png\" alt=\"在这里插入图片描述\">\n<strong>slave数据库</strong>\n<img src=\"/blog/img/shardingjdbc/shardingSphere2.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>2.查询数据</code></p>\n<hr>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere4.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console日志可看到查询是用的slave数据源。</span><br></pre></td></tr></table></figure></p>\n<p><code>3.删除和修改同理，这里省略</code></p>\n<hr>\n<h3>五.结论</h3>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shardingSphere默认master数据库执行delete,update,insert,slave数据库执行select，见读写分离架构图，</span><br><span class=\"line\">读写分离适合数据量不是很多的情况，通过读写分离，扩展从库，来缓解查询的压力。</span><br></pre></td></tr></table></figure></p>\n<h3>六.范例代码</h3>\n<pre><code>https://gitee.com/xshCloudy/sharding.git\n</code></pre>\n"},{"title":"Callable，FutureTask优化接口","catalog":true,"date":"2019-12-12T11:06:24.000Z","subtitle":"优化接口","header-img":"/blog/img/article_header/article_header.png","_content":"\n## 一.futrue,callable接口关系图\n![在这里插入图片描述](/blog/img/all/futrueTask1.jpg)\n\n\n\n```javascript\n\nCallable接口代表一段可以调用并返回结果的代码;Future接口表示异步任务，是还没有完成的任务给出的未来结果。\n所以说Callable用于产生结果，Future用于获取结果。\n\nCallable接口使用泛型去定义它的返回类型。Executors类提供了一些有用的方法在线程池中执行Callable内的任务。\n由于Callable任务是并行的（并行就是整体看上去是并行的，其实在某个时间点只有一个线程在执行），我们必须等待它返回的结果。 \njava.util.concurrent.Future对象为我们解决了这个问题。在线程池提交Callable任务后返回了一个Future对象，\n使用它可以知道Callable任务的状态和得到Callable返回的执行结果。\nFuture提供了get()方法让我们可以等待Callable结束并获取它的执行结果。\n\n```\n### 在Future接口中声明了5个方法，下面依次解释每个方法的作用：\n\n```javascript\ncancel方法用来取消任务，如果取消任务成功则返回true，如果取消任务失败则返回false。\n参数mayInterruptIfRunning表示是否允许取消正在执行却没有执行完毕的任务，如果设置true，则表示可以取消正在执行过程中的任务。\n如果任务已经完成，则无论mayInterruptIfRunning为true还是false，此方法肯定返回false，即如果取消已经完成的任务会返回false；\n如果任务正在执行，若mayInterruptIfRunning设置为true，则返回true，若mayInterruptIfRunning设置为false，则返回false；\n如果任务还没有执行，则无论mayInterruptIfRunning为true还是false，肯定返回true。\n\nisCancelled方法表示任务是否被取消成功，如果在任务正常完成前被取消成功，则返回 true。\n\nisDone方法表示任务是否已经完成，若任务完成，则返回true；\n\nget()方法用来获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回；\n\nget(long timeout, TimeUnit unit)用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null。\n\n```\n\n## 二.使用范例\n```javascript\n​​​​\t​\n@Configuration\n@EnableAsync\npublic class AsyncCofig {\n    @Value(\"${Executor.corePoolSize}\")\n    private int corePoolSize;\n    @Value(\"${Executor.maxPoolSize}\")\n    private int maxPoolSize;\n    @Value(\"${Executor.queueCapacity}\")\n    private int queueCapacity;\n\n    @Bean\n    public ThreadPoolTaskExecutor taskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(corePoolSize);\n        executor.setMaxPoolSize(maxPoolSize);\n        executor.setQueueCapacity(queueCapacity);\n        executor.initialize();\n        return executor;\n    }\n}\n\n​\n\n```\n\n\n```javascript\n\n​\npublic class CallableTask implements Callable<String> {\n    @Override\n    public String call(){\n        return Thread.currentThread().getName();\n    }\n}\n\n​\n\n```\n\n\n\n```javascript\n\n​\npublic class FutrueTest extends BaseTest {\n    @Autowired\n    private ThreadPoolTaskExecutor executor;\n\n    @Test\n    public void test() throws ExecutionException, InterruptedException {\n        List<String> dataList = new ArrayList<>();\n        FutureTask<String> futureTask1 = new FutureTask<>(new CallableTask());\n        FutureTask<String> futureTask2 = new FutureTask<>(new CallableTask());\n        executor.submit(futureTask1);\n        executor.submit(futureTask2);\n        System.out.println(futureTask1.isDone());\n        String result1 = futureTask1.get();\n        dataList.add(result1);\n        String result2 = futureTask2.get();\n        dataList.add(result2);\n        System.out.println(JSONObject.toJSONString(dataList));\n    }\n}\n\n​\n\n```\n\n\n## 三.结论\n\n![在这里插入图片描述](/blog/img/all/futrueTask2.jpg)","source":"_posts/Callable，FutureTask优化接口.md","raw":"---\ntitle: Callable，FutureTask优化接口\ncatalog: true\ndate: 2019-12-12 19:06:24\nsubtitle: \"优化接口\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n\n## 一.futrue,callable接口关系图\n![在这里插入图片描述](/blog/img/all/futrueTask1.jpg)\n\n\n\n```javascript\n\nCallable接口代表一段可以调用并返回结果的代码;Future接口表示异步任务，是还没有完成的任务给出的未来结果。\n所以说Callable用于产生结果，Future用于获取结果。\n\nCallable接口使用泛型去定义它的返回类型。Executors类提供了一些有用的方法在线程池中执行Callable内的任务。\n由于Callable任务是并行的（并行就是整体看上去是并行的，其实在某个时间点只有一个线程在执行），我们必须等待它返回的结果。 \njava.util.concurrent.Future对象为我们解决了这个问题。在线程池提交Callable任务后返回了一个Future对象，\n使用它可以知道Callable任务的状态和得到Callable返回的执行结果。\nFuture提供了get()方法让我们可以等待Callable结束并获取它的执行结果。\n\n```\n### 在Future接口中声明了5个方法，下面依次解释每个方法的作用：\n\n```javascript\ncancel方法用来取消任务，如果取消任务成功则返回true，如果取消任务失败则返回false。\n参数mayInterruptIfRunning表示是否允许取消正在执行却没有执行完毕的任务，如果设置true，则表示可以取消正在执行过程中的任务。\n如果任务已经完成，则无论mayInterruptIfRunning为true还是false，此方法肯定返回false，即如果取消已经完成的任务会返回false；\n如果任务正在执行，若mayInterruptIfRunning设置为true，则返回true，若mayInterruptIfRunning设置为false，则返回false；\n如果任务还没有执行，则无论mayInterruptIfRunning为true还是false，肯定返回true。\n\nisCancelled方法表示任务是否被取消成功，如果在任务正常完成前被取消成功，则返回 true。\n\nisDone方法表示任务是否已经完成，若任务完成，则返回true；\n\nget()方法用来获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回；\n\nget(long timeout, TimeUnit unit)用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null。\n\n```\n\n## 二.使用范例\n```javascript\n​​​​\t​\n@Configuration\n@EnableAsync\npublic class AsyncCofig {\n    @Value(\"${Executor.corePoolSize}\")\n    private int corePoolSize;\n    @Value(\"${Executor.maxPoolSize}\")\n    private int maxPoolSize;\n    @Value(\"${Executor.queueCapacity}\")\n    private int queueCapacity;\n\n    @Bean\n    public ThreadPoolTaskExecutor taskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(corePoolSize);\n        executor.setMaxPoolSize(maxPoolSize);\n        executor.setQueueCapacity(queueCapacity);\n        executor.initialize();\n        return executor;\n    }\n}\n\n​\n\n```\n\n\n```javascript\n\n​\npublic class CallableTask implements Callable<String> {\n    @Override\n    public String call(){\n        return Thread.currentThread().getName();\n    }\n}\n\n​\n\n```\n\n\n\n```javascript\n\n​\npublic class FutrueTest extends BaseTest {\n    @Autowired\n    private ThreadPoolTaskExecutor executor;\n\n    @Test\n    public void test() throws ExecutionException, InterruptedException {\n        List<String> dataList = new ArrayList<>();\n        FutureTask<String> futureTask1 = new FutureTask<>(new CallableTask());\n        FutureTask<String> futureTask2 = new FutureTask<>(new CallableTask());\n        executor.submit(futureTask1);\n        executor.submit(futureTask2);\n        System.out.println(futureTask1.isDone());\n        String result1 = futureTask1.get();\n        dataList.add(result1);\n        String result2 = futureTask2.get();\n        dataList.add(result2);\n        System.out.println(JSONObject.toJSONString(dataList));\n    }\n}\n\n​\n\n```\n\n\n## 三.结论\n\n![在这里插入图片描述](/blog/img/all/futrueTask2.jpg)","slug":"Callable，FutureTask优化接口","published":1,"updated":"2020-11-05T06:58:09.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xls000798v58w8vb7ey","content":"<h2 id=\"一futruecallable接口关系图\">一.futrue,callable接口关系图</h2>\n<p><img src=\"/blog/img/all/futrueTask1.jpg\" alt=\"在这里插入图片描述\"></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Callable接口代表一段可以调用并返回结果的代码;Future接口表示异步任务，是还没有完成的任务给出的未来结果。</span><br><span class=\"line\">所以说Callable用于产生结果，Future用于获取结果。</span><br><span class=\"line\"></span><br><span class=\"line\">Callable接口使用泛型去定义它的返回类型。Executors类提供了一些有用的方法在线程池中执行Callable内的任务。</span><br><span class=\"line\">由于Callable任务是并行的（并行就是整体看上去是并行的，其实在某个时间点只有一个线程在执行），我们必须等待它返回的结果。 </span><br><span class=\"line\">java.util.concurrent.Future对象为我们解决了这个问题。在线程池提交Callable任务后返回了一个Future对象，</span><br><span class=\"line\">使用它可以知道Callable任务的状态和得到Callable返回的执行结果。</span><br><span class=\"line\">Future提供了get()方法让我们可以等待Callable结束并获取它的执行结果。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"在future接口中声明了5个方法下面依次解释每个方法的作用\">在Future接口中声明了5个方法，下面依次解释每个方法的作用：</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cancel方法用来取消任务，如果取消任务成功则返回<span class=\"literal\">true</span>，如果取消任务失败则返回<span class=\"literal\">false</span>。</span><br><span class=\"line\">参数mayInterruptIfRunning表示是否允许取消正在执行却没有执行完毕的任务，如果设置<span class=\"literal\">true</span>，则表示可以取消正在执行过程中的任务。</span><br><span class=\"line\">如果任务已经完成，则无论mayInterruptIfRunning为<span class=\"literal\">true</span>还是<span class=\"literal\">false</span>，此方法肯定返回<span class=\"literal\">false</span>，即如果取消已经完成的任务会返回<span class=\"literal\">false</span>；</span><br><span class=\"line\">如果任务正在执行，若mayInterruptIfRunning设置为<span class=\"literal\">true</span>，则返回<span class=\"literal\">true</span>，若mayInterruptIfRunning设置为<span class=\"literal\">false</span>，则返回<span class=\"literal\">false</span>；</span><br><span class=\"line\">如果任务还没有执行，则无论mayInterruptIfRunning为<span class=\"literal\">true</span>还是<span class=\"literal\">false</span>，肯定返回<span class=\"literal\">true</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">isCancelled方法表示任务是否被取消成功，如果在任务正常完成前被取消成功，则返回 <span class=\"literal\">true</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">isDone方法表示任务是否已经完成，若任务完成，则返回<span class=\"literal\">true</span>；</span><br><span class=\"line\"></span><br><span class=\"line\">get()方法用来获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回；</span><br><span class=\"line\"></span><br><span class=\"line\">get(long timeout, TimeUnit unit)用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回<span class=\"literal\">null</span>。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二使用范例\">二.使用范例</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​​​​\t​</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncCofig</span> </span>&#123;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"$&#123;Executor.corePoolSize&#125;\"</span>)</span><br><span class=\"line\">    private int corePoolSize;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"$&#123;Executor.maxPoolSize&#125;\"</span>)</span><br><span class=\"line\">    private int maxPoolSize;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"$&#123;Executor.queueCapacity&#125;\"</span>)</span><br><span class=\"line\">    private int queueCapacity;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ThreadPoolTaskExecutor taskExecutor() &#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor executor = <span class=\"keyword\">new</span> ThreadPoolTaskExecutor();</span><br><span class=\"line\">        executor.setCorePoolSize(corePoolSize);</span><br><span class=\"line\">        executor.setMaxPoolSize(maxPoolSize);</span><br><span class=\"line\">        executor.setQueueCapacity(queueCapacity);</span><br><span class=\"line\">        executor.initialize();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">​</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableTask</span> <span class=\"title\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"built_in\">String</span> call()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Thread.currentThread().getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">​</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutrueTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private ThreadPoolTaskExecutor executor;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> test() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        List&lt;<span class=\"built_in\">String</span>&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        FutureTask&lt;<span class=\"built_in\">String</span>&gt; futureTask1 = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> CallableTask());</span><br><span class=\"line\">        FutureTask&lt;<span class=\"built_in\">String</span>&gt; futureTask2 = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> CallableTask());</span><br><span class=\"line\">        executor.submit(futureTask1);</span><br><span class=\"line\">        executor.submit(futureTask2);</span><br><span class=\"line\">        System.out.println(futureTask1.isDone());</span><br><span class=\"line\">        <span class=\"built_in\">String</span> result1 = futureTask1.get();</span><br><span class=\"line\">        dataList.add(result1);</span><br><span class=\"line\">        <span class=\"built_in\">String</span> result2 = futureTask2.get();</span><br><span class=\"line\">        dataList.add(result2);</span><br><span class=\"line\">        System.out.println(JSONObject.toJSONString(dataList));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三结论\">三.结论</h2>\n<p><img src=\"/blog/img/all/futrueTask2.jpg\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>一.futrue,callable接口关系图</h2>\n<p><img src=\"/blog/img/all/futrueTask1.jpg\" alt=\"在这里插入图片描述\"></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Callable接口代表一段可以调用并返回结果的代码;Future接口表示异步任务，是还没有完成的任务给出的未来结果。</span><br><span class=\"line\">所以说Callable用于产生结果，Future用于获取结果。</span><br><span class=\"line\"></span><br><span class=\"line\">Callable接口使用泛型去定义它的返回类型。Executors类提供了一些有用的方法在线程池中执行Callable内的任务。</span><br><span class=\"line\">由于Callable任务是并行的（并行就是整体看上去是并行的，其实在某个时间点只有一个线程在执行），我们必须等待它返回的结果。 </span><br><span class=\"line\">java.util.concurrent.Future对象为我们解决了这个问题。在线程池提交Callable任务后返回了一个Future对象，</span><br><span class=\"line\">使用它可以知道Callable任务的状态和得到Callable返回的执行结果。</span><br><span class=\"line\">Future提供了get()方法让我们可以等待Callable结束并获取它的执行结果。</span><br></pre></td></tr></table></figure></p>\n<h3>在Future接口中声明了5个方法，下面依次解释每个方法的作用：</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cancel方法用来取消任务，如果取消任务成功则返回<span class=\"literal\">true</span>，如果取消任务失败则返回<span class=\"literal\">false</span>。</span><br><span class=\"line\">参数mayInterruptIfRunning表示是否允许取消正在执行却没有执行完毕的任务，如果设置<span class=\"literal\">true</span>，则表示可以取消正在执行过程中的任务。</span><br><span class=\"line\">如果任务已经完成，则无论mayInterruptIfRunning为<span class=\"literal\">true</span>还是<span class=\"literal\">false</span>，此方法肯定返回<span class=\"literal\">false</span>，即如果取消已经完成的任务会返回<span class=\"literal\">false</span>；</span><br><span class=\"line\">如果任务正在执行，若mayInterruptIfRunning设置为<span class=\"literal\">true</span>，则返回<span class=\"literal\">true</span>，若mayInterruptIfRunning设置为<span class=\"literal\">false</span>，则返回<span class=\"literal\">false</span>；</span><br><span class=\"line\">如果任务还没有执行，则无论mayInterruptIfRunning为<span class=\"literal\">true</span>还是<span class=\"literal\">false</span>，肯定返回<span class=\"literal\">true</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">isCancelled方法表示任务是否被取消成功，如果在任务正常完成前被取消成功，则返回 <span class=\"literal\">true</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">isDone方法表示任务是否已经完成，若任务完成，则返回<span class=\"literal\">true</span>；</span><br><span class=\"line\"></span><br><span class=\"line\">get()方法用来获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回；</span><br><span class=\"line\"></span><br><span class=\"line\">get(long timeout, TimeUnit unit)用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回<span class=\"literal\">null</span>。</span><br></pre></td></tr></table></figure></p>\n<h2>二.使用范例</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​​​​\t​</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncCofig</span> </span>&#123;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"$&#123;Executor.corePoolSize&#125;\"</span>)</span><br><span class=\"line\">    private int corePoolSize;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"$&#123;Executor.maxPoolSize&#125;\"</span>)</span><br><span class=\"line\">    private int maxPoolSize;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"$&#123;Executor.queueCapacity&#125;\"</span>)</span><br><span class=\"line\">    private int queueCapacity;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ThreadPoolTaskExecutor taskExecutor() &#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor executor = <span class=\"keyword\">new</span> ThreadPoolTaskExecutor();</span><br><span class=\"line\">        executor.setCorePoolSize(corePoolSize);</span><br><span class=\"line\">        executor.setMaxPoolSize(maxPoolSize);</span><br><span class=\"line\">        executor.setQueueCapacity(queueCapacity);</span><br><span class=\"line\">        executor.initialize();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">​</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableTask</span> <span class=\"title\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"built_in\">String</span> call()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Thread.currentThread().getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">​</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutrueTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private ThreadPoolTaskExecutor executor;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> test() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        List&lt;<span class=\"built_in\">String</span>&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        FutureTask&lt;<span class=\"built_in\">String</span>&gt; futureTask1 = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> CallableTask());</span><br><span class=\"line\">        FutureTask&lt;<span class=\"built_in\">String</span>&gt; futureTask2 = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> CallableTask());</span><br><span class=\"line\">        executor.submit(futureTask1);</span><br><span class=\"line\">        executor.submit(futureTask2);</span><br><span class=\"line\">        System.out.println(futureTask1.isDone());</span><br><span class=\"line\">        <span class=\"built_in\">String</span> result1 = futureTask1.get();</span><br><span class=\"line\">        dataList.add(result1);</span><br><span class=\"line\">        <span class=\"built_in\">String</span> result2 = futureTask2.get();</span><br><span class=\"line\">        dataList.add(result2);</span><br><span class=\"line\">        System.out.println(JSONObject.toJSONString(dataList));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<h2>三.结论</h2>\n<p><img src=\"/blog/img/all/futrueTask2.jpg\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"G调常用和弦指法图","catalog":true,"date":"2018-08-26T17:04:01.000Z","subtitle":"G调常用和弦指法图","header-img":"/blog/img/article_header/article_header.png","_content":"## 一.G调常用和弦指法图\n###### B7和弦\n![在这里插入图片描述](/blog/img/guitar/G/b7.png)\n```javascript\nB7和弦同样也是G调中常用的和弦之一，比较熟悉的G调歌曲 唐磊-丁香花吉他谱 以及 朴树-白桦林吉他谱中就用到了B7和弦。\nB7和弦的按法：\n左手食指-1按4弦1品、中指-2按5弦2品、无名指-3按3弦2品、小指-4按1弦2品。\n```\n###### Em和弦\n![在这里插入图片描述](/blog/img/guitar/G/em.png)\n```javascript\n以上三种为常见的Em和弦和弦图，图片上稍微有点差别不过是大同小异。\nEm和弦的按法：2—中指按5弦2品、3—无名指按4弦2品。按弦指法仅供参考，\nEm和弦属于比较容易掌握的和弦在实际弹奏中大家可以按照自己的习惯去按，\n主要是方便下一个和弦的转换，因为在吉他弹奏中和弦转换是弹好吉他的必要条件。\n```\n###### D和弦\n![在这里插入图片描述](/blog/img/guitar/G/d.png)\n```javascript\n以上为三种常见的D和弦和弦指法图，D和弦中5弦、6弦为和弦外音在一般弹奏中如果没有用到和弦外音5、6弦是不要弹的。\nD和弦按法\n食指按3弦2品、中指按1弦2品、无名指按2弦3品。\n图1中的按法是食指横按1、3弦2品、中指按2弦3品。\n\n```\n###### C和弦\n![在这里插入图片描述](/blog/img/guitar/G/c.png)\n```javascript\n以上为常见的三种样式的吉他C和弦和弦图，图1中数字1、2、3分别表示：1—食指按2弦1品、2—中指按4弦2品、3—无名指按5弦3品。\nC和弦按法\n食指按2弦1品、中指按4弦2品、无名指按5弦3品。\nC和弦可能是我们学习吉他和弦的第一个和弦，同时也是比较简单的和弦指法，以上三个C和弦指法图按法都是一样，一般在我们初学阶段简单的弹唱就是用到以上的指法，不过还有一种常见的C和弦指法图如下图，这里的C和弦用到了6弦的G音所以按法是：食指按2弦1品、中指按4弦2品、无名指按6弦3品、小指按5弦3品。一般在歌曲的弹唱中如果和弦部分没有用到6弦我们就以上面的指法弹奏即可，同时按法上也简单了不少。\n\n```\n\n###### Bm和弦\n![在这里插入图片描述](/blog/img/guitar/G/bm.png)\n```javascript\n吉他Bm和弦按法\n6弦为和弦外音，一般弹奏中不要弹奏。食指横按2品、中指按2弦3品、无名指按3弦4品、小指按4弦4品。\nBm和弦也是大横按和弦不过F和弦稍微要容易点。\n```\n###### Am和弦\n![在这里插入图片描述](/blog/img/guitar/G/am.png)\n```javascript\nAm和弦是C调和G调中比较常用的和弦也比较的容易掌握，6弦为和弦外音，在一般的弹奏中不要弹。\nAm和弦按法：\n1—食指按2弦1品、2—中指按4弦2品、3—无名指按3弦2品。\n```\n###### G和弦\n![在这里插入图片描述](/blog/img/guitar/G/g.png)\n```javascript\n以上三个G和弦和弦图，图1、3左手按弦指法稍有差别。\nG和弦按法：\n1、1—食指按5弦2品、2—中指按6弦3品、3—无名指按1弦3品\n2、2—中指按5弦2品、3—无名指按6弦3品、4—小指按1弦3品\n两种按法都可以，只要方便下一个和弦的转换即可。\n```\n\n###### D7和弦\n![在这里插入图片描述](/blog/img/guitar/G/d7.png)\n```javascript\nD7和弦按法：\n食指按2弦1品、中指按3弦2品、无名指按1弦2品。\nG调弹奏中比较常用的一个和弦，5、6弦为和弦外音扫弦时需要注意不要扫到5、6弦。\n```\n\n\n## 二. 吉他指板G大调音阶图\n![在这里插入图片描述](/blog/img/guitar/G/g_list.png)\n\n\n## 三.G大调起音\n```javascript\nG调的音阶是由G音为第一音，依次向上升（降）一个音：G A B C D E #F G；对应简谱就是：5 6 7 1 2 3 #4 5，所以，\nG调各对C调而言，只要升一个F（4）就是了。为什么样呢？这是因为E和F是自然半音，\n把F升高半音后，#F和G就成半音关系了，自然界也就是7和1了。因此，在五线谱上G调就是一个升号的谱子。\n```\n","source":"_posts/G调常用和弦指法图.md","raw":"---\ntitle: G调常用和弦指法图\ncatalog: true\ndate: 2018-08-27 01:04:01\nsubtitle: \"G调常用和弦指法图\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- guitar\n---\n## 一.G调常用和弦指法图\n###### B7和弦\n![在这里插入图片描述](/blog/img/guitar/G/b7.png)\n```javascript\nB7和弦同样也是G调中常用的和弦之一，比较熟悉的G调歌曲 唐磊-丁香花吉他谱 以及 朴树-白桦林吉他谱中就用到了B7和弦。\nB7和弦的按法：\n左手食指-1按4弦1品、中指-2按5弦2品、无名指-3按3弦2品、小指-4按1弦2品。\n```\n###### Em和弦\n![在这里插入图片描述](/blog/img/guitar/G/em.png)\n```javascript\n以上三种为常见的Em和弦和弦图，图片上稍微有点差别不过是大同小异。\nEm和弦的按法：2—中指按5弦2品、3—无名指按4弦2品。按弦指法仅供参考，\nEm和弦属于比较容易掌握的和弦在实际弹奏中大家可以按照自己的习惯去按，\n主要是方便下一个和弦的转换，因为在吉他弹奏中和弦转换是弹好吉他的必要条件。\n```\n###### D和弦\n![在这里插入图片描述](/blog/img/guitar/G/d.png)\n```javascript\n以上为三种常见的D和弦和弦指法图，D和弦中5弦、6弦为和弦外音在一般弹奏中如果没有用到和弦外音5、6弦是不要弹的。\nD和弦按法\n食指按3弦2品、中指按1弦2品、无名指按2弦3品。\n图1中的按法是食指横按1、3弦2品、中指按2弦3品。\n\n```\n###### C和弦\n![在这里插入图片描述](/blog/img/guitar/G/c.png)\n```javascript\n以上为常见的三种样式的吉他C和弦和弦图，图1中数字1、2、3分别表示：1—食指按2弦1品、2—中指按4弦2品、3—无名指按5弦3品。\nC和弦按法\n食指按2弦1品、中指按4弦2品、无名指按5弦3品。\nC和弦可能是我们学习吉他和弦的第一个和弦，同时也是比较简单的和弦指法，以上三个C和弦指法图按法都是一样，一般在我们初学阶段简单的弹唱就是用到以上的指法，不过还有一种常见的C和弦指法图如下图，这里的C和弦用到了6弦的G音所以按法是：食指按2弦1品、中指按4弦2品、无名指按6弦3品、小指按5弦3品。一般在歌曲的弹唱中如果和弦部分没有用到6弦我们就以上面的指法弹奏即可，同时按法上也简单了不少。\n\n```\n\n###### Bm和弦\n![在这里插入图片描述](/blog/img/guitar/G/bm.png)\n```javascript\n吉他Bm和弦按法\n6弦为和弦外音，一般弹奏中不要弹奏。食指横按2品、中指按2弦3品、无名指按3弦4品、小指按4弦4品。\nBm和弦也是大横按和弦不过F和弦稍微要容易点。\n```\n###### Am和弦\n![在这里插入图片描述](/blog/img/guitar/G/am.png)\n```javascript\nAm和弦是C调和G调中比较常用的和弦也比较的容易掌握，6弦为和弦外音，在一般的弹奏中不要弹。\nAm和弦按法：\n1—食指按2弦1品、2—中指按4弦2品、3—无名指按3弦2品。\n```\n###### G和弦\n![在这里插入图片描述](/blog/img/guitar/G/g.png)\n```javascript\n以上三个G和弦和弦图，图1、3左手按弦指法稍有差别。\nG和弦按法：\n1、1—食指按5弦2品、2—中指按6弦3品、3—无名指按1弦3品\n2、2—中指按5弦2品、3—无名指按6弦3品、4—小指按1弦3品\n两种按法都可以，只要方便下一个和弦的转换即可。\n```\n\n###### D7和弦\n![在这里插入图片描述](/blog/img/guitar/G/d7.png)\n```javascript\nD7和弦按法：\n食指按2弦1品、中指按3弦2品、无名指按1弦2品。\nG调弹奏中比较常用的一个和弦，5、6弦为和弦外音扫弦时需要注意不要扫到5、6弦。\n```\n\n\n## 二. 吉他指板G大调音阶图\n![在这里插入图片描述](/blog/img/guitar/G/g_list.png)\n\n\n## 三.G大调起音\n```javascript\nG调的音阶是由G音为第一音，依次向上升（降）一个音：G A B C D E #F G；对应简谱就是：5 6 7 1 2 3 #4 5，所以，\nG调各对C调而言，只要升一个F（4）就是了。为什么样呢？这是因为E和F是自然半音，\n把F升高半音后，#F和G就成半音关系了，自然界也就是7和1了。因此，在五线谱上G调就是一个升号的谱子。\n```\n","slug":"G调常用和弦指法图","published":1,"updated":"2020-11-05T06:58:09.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xlv000898v588oyt67h","content":"<h2 id=\"一g调常用和弦指法图\">一.G调常用和弦指法图</h2>\n<h6 id=\"b7和弦\">B7和弦</h6>\n<p><img src=\"/blog/img/guitar/G/b7.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B7和弦同样也是G调中常用的和弦之一，比较熟悉的G调歌曲 唐磊-丁香花吉他谱 以及 朴树-白桦林吉他谱中就用到了B7和弦。</span><br><span class=\"line\">B7和弦的按法：</span><br><span class=\"line\">左手食指<span class=\"number\">-1</span>按<span class=\"number\">4</span>弦<span class=\"number\">1</span>品、中指<span class=\"number\">-2</span>按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、无名指<span class=\"number\">-3</span>按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、小指<span class=\"number\">-4</span>按<span class=\"number\">1</span>弦<span class=\"number\">2</span>品。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"em和弦\">Em和弦</h6>\n<p><img src=\"/blog/img/guitar/G/em.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上三种为常见的Em和弦和弦图，图片上稍微有点差别不过是大同小异。</span><br><span class=\"line\">Em和弦的按法：<span class=\"number\">2</span>—中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品。按弦指法仅供参考，</span><br><span class=\"line\">Em和弦属于比较容易掌握的和弦在实际弹奏中大家可以按照自己的习惯去按，</span><br><span class=\"line\">主要是方便下一个和弦的转换，因为在吉他弹奏中和弦转换是弹好吉他的必要条件。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"d和弦\">D和弦</h6>\n<p><img src=\"/blog/img/guitar/G/d.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上为三种常见的D和弦和弦指法图，D和弦中<span class=\"number\">5</span>弦、<span class=\"number\">6</span>弦为和弦外音在一般弹奏中如果没有用到和弦外音<span class=\"number\">5</span>、<span class=\"number\">6</span>弦是不要弹的。</span><br><span class=\"line\">D和弦按法</span><br><span class=\"line\">食指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">1</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">图<span class=\"number\">1</span>中的按法是食指横按<span class=\"number\">1</span>、<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"c和弦\">C和弦</h6>\n<p><img src=\"/blog/img/guitar/G/c.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上为常见的三种样式的吉他C和弦和弦图，图<span class=\"number\">1</span>中数字<span class=\"number\">1</span>、<span class=\"number\">2</span>、<span class=\"number\">3</span>分别表示：<span class=\"number\">1</span>—食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、<span class=\"number\">2</span>—中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">C和弦按法</span><br><span class=\"line\">食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">C和弦可能是我们学习吉他和弦的第一个和弦，同时也是比较简单的和弦指法，以上三个C和弦指法图按法都是一样，一般在我们初学阶段简单的弹唱就是用到以上的指法，不过还有一种常见的C和弦指法图如下图，这里的C和弦用到了<span class=\"number\">6</span>弦的G音所以按法是：食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、小指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品。一般在歌曲的弹唱中如果和弦部分没有用到<span class=\"number\">6</span>弦我们就以上面的指法弹奏即可，同时按法上也简单了不少。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"bm和弦\">Bm和弦</h6>\n<p><img src=\"/blog/img/guitar/G/bm.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">吉他Bm和弦按法</span><br><span class=\"line\"><span class=\"number\">6</span>弦为和弦外音，一般弹奏中不要弹奏。食指横按<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品、无名指按<span class=\"number\">3</span>弦<span class=\"number\">4</span>品、小指按<span class=\"number\">4</span>弦<span class=\"number\">4</span>品。</span><br><span class=\"line\">Bm和弦也是大横按和弦不过F和弦稍微要容易点。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"am和弦\">Am和弦</h6>\n<p><img src=\"/blog/img/guitar/G/am.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Am和弦是C调和G调中比较常用的和弦也比较的容易掌握，<span class=\"number\">6</span>弦为和弦外音，在一般的弹奏中不要弹。</span><br><span class=\"line\">Am和弦按法：</span><br><span class=\"line\"><span class=\"number\">1</span>—食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、<span class=\"number\">2</span>—中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"g和弦\">G和弦</h6>\n<p><img src=\"/blog/img/guitar/G/g.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上三个G和弦和弦图，图<span class=\"number\">1</span>、<span class=\"number\">3</span>左手按弦指法稍有差别。</span><br><span class=\"line\">G和弦按法：</span><br><span class=\"line\"><span class=\"number\">1</span>、<span class=\"number\">1</span>—食指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">2</span>—中指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\"><span class=\"number\">2</span>、<span class=\"number\">2</span>—中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、<span class=\"number\">4</span>—小指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\">两种按法都可以，只要方便下一个和弦的转换即可。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"d7和弦\">D7和弦</h6>\n<p><img src=\"/blog/img/guitar/G/d7.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D7和弦按法：</span><br><span class=\"line\">食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">1</span>弦<span class=\"number\">2</span>品。</span><br><span class=\"line\">G调弹奏中比较常用的一个和弦，<span class=\"number\">5</span>、<span class=\"number\">6</span>弦为和弦外音扫弦时需要注意不要扫到<span class=\"number\">5</span>、<span class=\"number\">6</span>弦。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二-吉他指板g大调音阶图\">二. 吉他指板G大调音阶图</h2>\n<p><img src=\"/blog/img/guitar/G/g_list.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"三g大调起音\">三.G大调起音</h2>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G调的音阶是由G音为第一音，依次向上升（降）一个音：G A B C D E #F G；对应简谱就是：5 6 7 1 2 3 #4 5，所以，</span><br><span class=\"line\">G调各对C调而言，只要升一个F（<span class=\"number\">4</span>）就是了。为什么样呢？这是因为E和F是自然半音，</span><br><span class=\"line\">把F升高半音后，#F和G就成半音关系了，自然界也就是7和1了。因此，在五线谱上G调就是一个升号的谱子。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>一.G调常用和弦指法图</h2>\n<h6>B7和弦</h6>\n<p><img src=\"/blog/img/guitar/G/b7.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B7和弦同样也是G调中常用的和弦之一，比较熟悉的G调歌曲 唐磊-丁香花吉他谱 以及 朴树-白桦林吉他谱中就用到了B7和弦。</span><br><span class=\"line\">B7和弦的按法：</span><br><span class=\"line\">左手食指<span class=\"number\">-1</span>按<span class=\"number\">4</span>弦<span class=\"number\">1</span>品、中指<span class=\"number\">-2</span>按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、无名指<span class=\"number\">-3</span>按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、小指<span class=\"number\">-4</span>按<span class=\"number\">1</span>弦<span class=\"number\">2</span>品。</span><br></pre></td></tr></table></figure></p>\n<h6>Em和弦</h6>\n<p><img src=\"/blog/img/guitar/G/em.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上三种为常见的Em和弦和弦图，图片上稍微有点差别不过是大同小异。</span><br><span class=\"line\">Em和弦的按法：<span class=\"number\">2</span>—中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品。按弦指法仅供参考，</span><br><span class=\"line\">Em和弦属于比较容易掌握的和弦在实际弹奏中大家可以按照自己的习惯去按，</span><br><span class=\"line\">主要是方便下一个和弦的转换，因为在吉他弹奏中和弦转换是弹好吉他的必要条件。</span><br></pre></td></tr></table></figure></p>\n<h6>D和弦</h6>\n<p><img src=\"/blog/img/guitar/G/d.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上为三种常见的D和弦和弦指法图，D和弦中<span class=\"number\">5</span>弦、<span class=\"number\">6</span>弦为和弦外音在一般弹奏中如果没有用到和弦外音<span class=\"number\">5</span>、<span class=\"number\">6</span>弦是不要弹的。</span><br><span class=\"line\">D和弦按法</span><br><span class=\"line\">食指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">1</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">图<span class=\"number\">1</span>中的按法是食指横按<span class=\"number\">1</span>、<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品。</span><br></pre></td></tr></table></figure></p>\n<h6>C和弦</h6>\n<p><img src=\"/blog/img/guitar/G/c.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上为常见的三种样式的吉他C和弦和弦图，图<span class=\"number\">1</span>中数字<span class=\"number\">1</span>、<span class=\"number\">2</span>、<span class=\"number\">3</span>分别表示：<span class=\"number\">1</span>—食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、<span class=\"number\">2</span>—中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">C和弦按法</span><br><span class=\"line\">食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">C和弦可能是我们学习吉他和弦的第一个和弦，同时也是比较简单的和弦指法，以上三个C和弦指法图按法都是一样，一般在我们初学阶段简单的弹唱就是用到以上的指法，不过还有一种常见的C和弦指法图如下图，这里的C和弦用到了<span class=\"number\">6</span>弦的G音所以按法是：食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、小指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品。一般在歌曲的弹唱中如果和弦部分没有用到<span class=\"number\">6</span>弦我们就以上面的指法弹奏即可，同时按法上也简单了不少。</span><br></pre></td></tr></table></figure></p>\n<h6>Bm和弦</h6>\n<p><img src=\"/blog/img/guitar/G/bm.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">吉他Bm和弦按法</span><br><span class=\"line\"><span class=\"number\">6</span>弦为和弦外音，一般弹奏中不要弹奏。食指横按<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品、无名指按<span class=\"number\">3</span>弦<span class=\"number\">4</span>品、小指按<span class=\"number\">4</span>弦<span class=\"number\">4</span>品。</span><br><span class=\"line\">Bm和弦也是大横按和弦不过F和弦稍微要容易点。</span><br></pre></td></tr></table></figure></p>\n<h6>Am和弦</h6>\n<p><img src=\"/blog/img/guitar/G/am.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Am和弦是C调和G调中比较常用的和弦也比较的容易掌握，<span class=\"number\">6</span>弦为和弦外音，在一般的弹奏中不要弹。</span><br><span class=\"line\">Am和弦按法：</span><br><span class=\"line\"><span class=\"number\">1</span>—食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、<span class=\"number\">2</span>—中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品。</span><br></pre></td></tr></table></figure></p>\n<h6>G和弦</h6>\n<p><img src=\"/blog/img/guitar/G/g.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上三个G和弦和弦图，图<span class=\"number\">1</span>、<span class=\"number\">3</span>左手按弦指法稍有差别。</span><br><span class=\"line\">G和弦按法：</span><br><span class=\"line\"><span class=\"number\">1</span>、<span class=\"number\">1</span>—食指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">2</span>—中指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\"><span class=\"number\">2</span>、<span class=\"number\">2</span>—中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、<span class=\"number\">4</span>—小指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\">两种按法都可以，只要方便下一个和弦的转换即可。</span><br></pre></td></tr></table></figure></p>\n<h6>D7和弦</h6>\n<p><img src=\"/blog/img/guitar/G/d7.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D7和弦按法：</span><br><span class=\"line\">食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">1</span>弦<span class=\"number\">2</span>品。</span><br><span class=\"line\">G调弹奏中比较常用的一个和弦，<span class=\"number\">5</span>、<span class=\"number\">6</span>弦为和弦外音扫弦时需要注意不要扫到<span class=\"number\">5</span>、<span class=\"number\">6</span>弦。</span><br></pre></td></tr></table></figure></p>\n<h2>二. 吉他指板G大调音阶图</h2>\n<p><img src=\"/blog/img/guitar/G/g_list.png\" alt=\"在这里插入图片描述\"></p>\n<h2>三.G大调起音</h2>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G调的音阶是由G音为第一音，依次向上升（降）一个音：G A B C D E #F G；对应简谱就是：5 6 7 1 2 3 #4 5，所以，</span><br><span class=\"line\">G调各对C调而言，只要升一个F（<span class=\"number\">4</span>）就是了。为什么样呢？这是因为E和F是自然半音，</span><br><span class=\"line\">把F升高半音后，#F和G就成半音关系了，自然界也就是7和1了。因此，在五线谱上G调就是一个升号的谱子。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ShardingSphere(二)分库分表","catalog":true,"date":"2020-11-17T02:29:29.000Z","subtitle":"ShardingSphere","header-img":"/blog/img/header_img/404.png","_content":"## ShardingSphere(二)分库分表\n### 一.分库分表架构图\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere5.png)\n### 二.ShardingSphere配置\n`1.引入依赖`\n```java\n  <dependency>\n      <groupId>org.apache.shardingsphere</groupId>\n      <artifactId>sharding-jdbc-spring-boot-starter</artifactId>\n      <version>4.0.0-RC1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.shardingsphere</groupId>\n      <artifactId>sharding-jdbc-spring-namespace</artifactId>\n      <version>4.0.0-RC1</version>\n    </dependency>\n```\n`2.yaml配置`\n```json\nspring:\n  shardingsphere:\n    enabled: true\n    datasource:\n      names: ds0,ds1\n      ds0:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/datasource0?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n      ds1:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/datasource1?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n    sharding:\n      #分库\n      default-database-strategy:\n        inline:\n          sharding-column: AGE\n          algorithm-expression: ds$->{AGE % 2}\n      #分表\n      tables:\n        user:\n          actual-data-nodes: ds$->{0..1}.user$->{0..1}\n\t\t  #雪花算法生成ID\n          key-generator:\n            column: ID\n            type: SNOWFLAKE  #UUID\n          table-strategy:\n            inline:\n              sharding-column: ID\n              algorithm-expression: user$->{ID % 2}\n    props:\n      query.with.cipher.column: true\n      sql:\n        show: true\n\n\n```\n### 三.验证\n`1.插入数据`\n\n------------\n\n\n```\n下面四张图可以看出插入的数据，根据age字段分库，根据id字段分表\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere6.png)\n\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere7.png)\n\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere8.png)\n\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere9.png)\n\n`2.查询数据`\n\n------------\n**queryAll**\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere10.png)\n**queryById**\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere11.png)\n```\n查询所有数据是查所有表，再总和在一起，当然根据id查询会先根据分片计算在哪个表里，\n再直接从两个库的指定表里面查询。\n```\n`3.删除和修改同理，这里省略`\n\n### 四.结论\n```json\nshardingSphere分库分表实际上是将数据垂直切分库，再水平分表。通过shardingSphere中间件统一管理这些库和表，\n见架构图，由于数据库连接和表存储都有瓶颈，当数据量达到500w以上时，我们就可以考虑使用分库分表，\n来缓解查询的压力，缩短查询时间。分库，分表，还是分库分表都使用，需结合实际情况来判断。\n```\n### 五.主键ID（特别注意）\n```json\n常用的主键ID生成方案：\n\tmysql自增主键:分表分库会有ID冲突。\n\tUUID：太长，索引多占用空间\n\t雪花算法：\n\t\t优点:既可以保证唯一又可以排序，效率高，适合分布式场景下生成唯一ID。\n\t\t缺点：强依赖时间，如果时钟回拨，就会生成重复的ID。\n\tredis自增主键：效率高，适合分布式场景，但需要redis中间件生成。\n```\n**`建议使用雪花算法或者redis自增生成唯一ID`**\n\n\n### 六.范例代码\n    https://gitee.com/xshCloudy/sharding.git\n\n\n\n","source":"_posts/ShardingSphere-二-分库分表.md","raw":"---\ntitle: ShardingSphere(二)分库分表\ncatalog: true\ndate: 2020-11-17 10:29:29\nsubtitle: ShardingSphere\nheader-img: \"/blog/img/header_img/404.png\"\ntags:\n- java\n---\n## ShardingSphere(二)分库分表\n### 一.分库分表架构图\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere5.png)\n### 二.ShardingSphere配置\n`1.引入依赖`\n```java\n  <dependency>\n      <groupId>org.apache.shardingsphere</groupId>\n      <artifactId>sharding-jdbc-spring-boot-starter</artifactId>\n      <version>4.0.0-RC1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.shardingsphere</groupId>\n      <artifactId>sharding-jdbc-spring-namespace</artifactId>\n      <version>4.0.0-RC1</version>\n    </dependency>\n```\n`2.yaml配置`\n```json\nspring:\n  shardingsphere:\n    enabled: true\n    datasource:\n      names: ds0,ds1\n      ds0:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/datasource0?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n      ds1:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/datasource1?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n    sharding:\n      #分库\n      default-database-strategy:\n        inline:\n          sharding-column: AGE\n          algorithm-expression: ds$->{AGE % 2}\n      #分表\n      tables:\n        user:\n          actual-data-nodes: ds$->{0..1}.user$->{0..1}\n\t\t  #雪花算法生成ID\n          key-generator:\n            column: ID\n            type: SNOWFLAKE  #UUID\n          table-strategy:\n            inline:\n              sharding-column: ID\n              algorithm-expression: user$->{ID % 2}\n    props:\n      query.with.cipher.column: true\n      sql:\n        show: true\n\n\n```\n### 三.验证\n`1.插入数据`\n\n------------\n\n\n```\n下面四张图可以看出插入的数据，根据age字段分库，根据id字段分表\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere6.png)\n\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere7.png)\n\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere8.png)\n\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere9.png)\n\n`2.查询数据`\n\n------------\n**queryAll**\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere10.png)\n**queryById**\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingSphere11.png)\n```\n查询所有数据是查所有表，再总和在一起，当然根据id查询会先根据分片计算在哪个表里，\n再直接从两个库的指定表里面查询。\n```\n`3.删除和修改同理，这里省略`\n\n### 四.结论\n```json\nshardingSphere分库分表实际上是将数据垂直切分库，再水平分表。通过shardingSphere中间件统一管理这些库和表，\n见架构图，由于数据库连接和表存储都有瓶颈，当数据量达到500w以上时，我们就可以考虑使用分库分表，\n来缓解查询的压力，缩短查询时间。分库，分表，还是分库分表都使用，需结合实际情况来判断。\n```\n### 五.主键ID（特别注意）\n```json\n常用的主键ID生成方案：\n\tmysql自增主键:分表分库会有ID冲突。\n\tUUID：太长，索引多占用空间\n\t雪花算法：\n\t\t优点:既可以保证唯一又可以排序，效率高，适合分布式场景下生成唯一ID。\n\t\t缺点：强依赖时间，如果时钟回拨，就会生成重复的ID。\n\tredis自增主键：效率高，适合分布式场景，但需要redis中间件生成。\n```\n**`建议使用雪花算法或者redis自增生成唯一ID`**\n\n\n### 六.范例代码\n    https://gitee.com/xshCloudy/sharding.git\n\n\n\n","slug":"ShardingSphere-二-分库分表","published":1,"updated":"2020-12-04T06:23:03.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xlw000998v50zj7fo7v","content":"<h2 id=\"shardingsphere二分库分表\">ShardingSphere(二)分库分表</h2>\n<h3 id=\"一分库分表架构图\">一.分库分表架构图</h3>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere5.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"二shardingsphere配置\">二.ShardingSphere配置</h3>\n<p><code>1.引入依赖</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sharding-jdbc-spring-namespace&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.yaml配置</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  shardingsphere:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    datasource:</span><br><span class=\"line\">      names: ds0,ds1</span><br><span class=\"line\">      ds0:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: 111111</span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql://localhost:3306/datasource0?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">      ds1:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: 111111</span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql://localhost:3306/datasource1?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">    sharding:</span><br><span class=\"line\">      #分库</span><br><span class=\"line\">      default-database-strategy:</span><br><span class=\"line\">        inline:</span><br><span class=\"line\">          sharding-column: AGE</span><br><span class=\"line\">          algorithm-expression: ds$-&gt;&#123;AGE % 2&#125;</span><br><span class=\"line\">      #分表</span><br><span class=\"line\">      tables:</span><br><span class=\"line\">        user:</span><br><span class=\"line\">          actual-data-nodes: ds$-&gt;&#123;0..1&#125;.user$-&gt;&#123;0..1&#125;</span><br><span class=\"line\">\t\t  #雪花算法生成ID</span><br><span class=\"line\">          key-generator:</span><br><span class=\"line\">            column: ID</span><br><span class=\"line\">            type: SNOWFLAKE  #UUID</span><br><span class=\"line\">          table-strategy:</span><br><span class=\"line\">            inline:</span><br><span class=\"line\">              sharding-column: ID</span><br><span class=\"line\">              algorithm-expression: user$-&gt;&#123;ID % 2&#125;</span><br><span class=\"line\">    props:</span><br><span class=\"line\">      query.with.cipher.column: true</span><br><span class=\"line\">      sql:</span><br><span class=\"line\">        show: true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三验证\">三.验证</h3>\n<p><code>1.插入数据</code></p>\n<hr>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下面四张图可以看出插入的数据，根据age字段分库，根据id字段分表</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere6.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere7.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere8.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere9.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>2.查询数据</code></p>\n<hr>\n<p><strong>queryAll</strong>\n<img src=\"/blog/img/shardingjdbc/shardingSphere10.png\" alt=\"在这里插入图片描述\">\n<strong>queryById</strong>\n<img src=\"/blog/img/shardingjdbc/shardingSphere11.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询所有数据是查所有表，再总和在一起，当然根据id查询会先根据分片计算在哪个表里，</span><br><span class=\"line\">再直接从两个库的指定表里面查询。</span><br></pre></td></tr></table></figure></p>\n<p><code>3.删除和修改同理，这里省略</code></p>\n<h3 id=\"四结论\">四.结论</h3>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shardingSphere分库分表实际上是将数据垂直切分库，再水平分表。通过shardingSphere中间件统一管理这些库和表，</span><br><span class=\"line\">见架构图，由于数据库连接和表存储都有瓶颈，当数据量达到500w以上时，我们就可以考虑使用分库分表，</span><br><span class=\"line\">来缓解查询的压力，缩短查询时间。分库，分表，还是分库分表都使用，需结合实际情况来判断。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"五主键id特别注意\">五.主键ID（特别注意）</h3>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用的主键ID生成方案：</span><br><span class=\"line\">\tmysql自增主键:分表分库会有ID冲突。</span><br><span class=\"line\">\tUUID：太长，索引多占用空间</span><br><span class=\"line\">\t雪花算法：</span><br><span class=\"line\">\t\t优点:既可以保证唯一又可以排序，效率高，适合分布式场景下生成唯一ID。</span><br><span class=\"line\">\t\t缺点：强依赖时间，如果时钟回拨，就会生成重复的ID。</span><br><span class=\"line\">\tredis自增主键：效率高，适合分布式场景，但需要redis中间件生成。</span><br></pre></td></tr></table></figure></p>\n<p><strong><code>建议使用雪花算法或者redis自增生成唯一ID</code></strong></p>\n<h3 id=\"六范例代码\">六.范例代码</h3>\n<pre><code>https://gitee.com/xshCloudy/sharding.git\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2>ShardingSphere(二)分库分表</h2>\n<h3>一.分库分表架构图</h3>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere5.png\" alt=\"在这里插入图片描述\"></p>\n<h3>二.ShardingSphere配置</h3>\n<p><code>1.引入依赖</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sharding-jdbc-spring-namespace&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.yaml配置</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  shardingsphere:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    datasource:</span><br><span class=\"line\">      names: ds0,ds1</span><br><span class=\"line\">      ds0:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: 111111</span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql://localhost:3306/datasource0?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">      ds1:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: 111111</span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql://localhost:3306/datasource1?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">    sharding:</span><br><span class=\"line\">      #分库</span><br><span class=\"line\">      default-database-strategy:</span><br><span class=\"line\">        inline:</span><br><span class=\"line\">          sharding-column: AGE</span><br><span class=\"line\">          algorithm-expression: ds$-&gt;&#123;AGE % 2&#125;</span><br><span class=\"line\">      #分表</span><br><span class=\"line\">      tables:</span><br><span class=\"line\">        user:</span><br><span class=\"line\">          actual-data-nodes: ds$-&gt;&#123;0..1&#125;.user$-&gt;&#123;0..1&#125;</span><br><span class=\"line\">\t\t  #雪花算法生成ID</span><br><span class=\"line\">          key-generator:</span><br><span class=\"line\">            column: ID</span><br><span class=\"line\">            type: SNOWFLAKE  #UUID</span><br><span class=\"line\">          table-strategy:</span><br><span class=\"line\">            inline:</span><br><span class=\"line\">              sharding-column: ID</span><br><span class=\"line\">              algorithm-expression: user$-&gt;&#123;ID % 2&#125;</span><br><span class=\"line\">    props:</span><br><span class=\"line\">      query.with.cipher.column: true</span><br><span class=\"line\">      sql:</span><br><span class=\"line\">        show: true</span><br></pre></td></tr></table></figure></p>\n<h3>三.验证</h3>\n<p><code>1.插入数据</code></p>\n<hr>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下面四张图可以看出插入的数据，根据age字段分库，根据id字段分表</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere6.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere7.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere8.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/blog/img/shardingjdbc/shardingSphere9.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>2.查询数据</code></p>\n<hr>\n<p><strong>queryAll</strong>\n<img src=\"/blog/img/shardingjdbc/shardingSphere10.png\" alt=\"在这里插入图片描述\">\n<strong>queryById</strong>\n<img src=\"/blog/img/shardingjdbc/shardingSphere11.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询所有数据是查所有表，再总和在一起，当然根据id查询会先根据分片计算在哪个表里，</span><br><span class=\"line\">再直接从两个库的指定表里面查询。</span><br></pre></td></tr></table></figure></p>\n<p><code>3.删除和修改同理，这里省略</code></p>\n<h3>四.结论</h3>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shardingSphere分库分表实际上是将数据垂直切分库，再水平分表。通过shardingSphere中间件统一管理这些库和表，</span><br><span class=\"line\">见架构图，由于数据库连接和表存储都有瓶颈，当数据量达到500w以上时，我们就可以考虑使用分库分表，</span><br><span class=\"line\">来缓解查询的压力，缩短查询时间。分库，分表，还是分库分表都使用，需结合实际情况来判断。</span><br></pre></td></tr></table></figure></p>\n<h3>五.主键ID（特别注意）</h3>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用的主键ID生成方案：</span><br><span class=\"line\">\tmysql自增主键:分表分库会有ID冲突。</span><br><span class=\"line\">\tUUID：太长，索引多占用空间</span><br><span class=\"line\">\t雪花算法：</span><br><span class=\"line\">\t\t优点:既可以保证唯一又可以排序，效率高，适合分布式场景下生成唯一ID。</span><br><span class=\"line\">\t\t缺点：强依赖时间，如果时钟回拨，就会生成重复的ID。</span><br><span class=\"line\">\tredis自增主键：效率高，适合分布式场景，但需要redis中间件生成。</span><br></pre></td></tr></table></figure></p>\n<p><strong><code>建议使用雪花算法或者redis自增生成唯一ID</code></strong></p>\n<h3>六.范例代码</h3>\n<pre><code>https://gitee.com/xshCloudy/sharding.git\n</code></pre>\n"},{"title":"idea远程调试","catalog":true,"date":"2018-10-15T06:25:56.000Z","subtitle":"idea远程调试","header-img":"/blog/img/header_img/car.jpg","_content":"### 一.前言\n```javascript\n\t远程连接服务器调试是一个程序员基础必备技能，特别是在开发，测试，回归的调试过程中很有用处，\n\t因为一个bug在不同环境可能呈现不同的结果。\n\n```\n### 二.tomcat配置修改\n```javascript\n\ttomcat修改配置开放调试端口给idea远程连接，下面分别介绍以jar包和war包部署时tomcat怎么开放调试端口\n\n```\n#### 1.jar包部署\n\n```javascript\n\t只需要在nohup java -jar 后面加上-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999，\n\t例如：\n\tnohup java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999  /home/gp2-web.jar \n\t--spring.profiles.active=${ENV} --server.port=${PORT}  &\n\t9999就是暴露的调试端口\n```\n#### 2.war包部署\n\n```javascript\n\t找到tomcat bin目录下的catalina.sh文件，将JPDA_ADDRESS=\"localhost:8000\"修改成JPDA_ADDRESS=\"0.0.0.0:9999\"，\n\t0.0.0.0代表所有远程调试端都可以访问，也可以单独指定一个ip，9999就是暴露的调试端口，\n\t然后shutdown掉tomcat，用tomcat bin目录下的catalina.sh jpda start命令重新启动tomcat即可。\n```\n\n### 二.idea远程调试的使用\n![在这里插入图片描述](/blog/img/all/remote_debug1.PNG)\n![在这里插入图片描述](/blog/img/all/remote_debug2.PNG)\n```javascript\n\t如上面两张图，只需要idea new一个remote连接,修改remote配置上的远程服务器ip和端口，\n\t然后启动remote，可以看到console上显示已经连上远程服务器。\n\t这个时候就可以在idea上打断点调试了。\n\n```","source":"_posts/idea远程调试.md","raw":"---\ntitle: idea远程调试\ncatalog: true\ndate: 2018-10-15 14:25:56\nsubtitle: idea远程调试\nheader-img: \"/blog/img/header_img/car.jpg\"\ntags:\n- java\n---\n### 一.前言\n```javascript\n\t远程连接服务器调试是一个程序员基础必备技能，特别是在开发，测试，回归的调试过程中很有用处，\n\t因为一个bug在不同环境可能呈现不同的结果。\n\n```\n### 二.tomcat配置修改\n```javascript\n\ttomcat修改配置开放调试端口给idea远程连接，下面分别介绍以jar包和war包部署时tomcat怎么开放调试端口\n\n```\n#### 1.jar包部署\n\n```javascript\n\t只需要在nohup java -jar 后面加上-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999，\n\t例如：\n\tnohup java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999  /home/gp2-web.jar \n\t--spring.profiles.active=${ENV} --server.port=${PORT}  &\n\t9999就是暴露的调试端口\n```\n#### 2.war包部署\n\n```javascript\n\t找到tomcat bin目录下的catalina.sh文件，将JPDA_ADDRESS=\"localhost:8000\"修改成JPDA_ADDRESS=\"0.0.0.0:9999\"，\n\t0.0.0.0代表所有远程调试端都可以访问，也可以单独指定一个ip，9999就是暴露的调试端口，\n\t然后shutdown掉tomcat，用tomcat bin目录下的catalina.sh jpda start命令重新启动tomcat即可。\n```\n\n### 二.idea远程调试的使用\n![在这里插入图片描述](/blog/img/all/remote_debug1.PNG)\n![在这里插入图片描述](/blog/img/all/remote_debug2.PNG)\n```javascript\n\t如上面两张图，只需要idea new一个remote连接,修改remote配置上的远程服务器ip和端口，\n\t然后启动remote，可以看到console上显示已经连上远程服务器。\n\t这个时候就可以在idea上打断点调试了。\n\n```","slug":"idea远程调试","published":1,"updated":"2020-11-05T06:58:09.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xm0000c98v5dmb4uw3p","content":"<h3 id=\"一前言\">一.前言</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">远程连接服务器调试是一个程序员基础必备技能，特别是在开发，测试，回归的调试过程中很有用处，</span><br><span class=\"line\">因为一个bug在不同环境可能呈现不同的结果。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二tomcat配置修改\">二.tomcat配置修改</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tomcat修改配置开放调试端口给idea远程连接，下面分别介绍以jar包和war包部署时tomcat怎么开放调试端口</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1jar包部署\">1.jar包部署</h4>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只需要在nohup java -jar 后面加上-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<span class=\"number\">9999</span>，</span><br><span class=\"line\">例如：</span><br><span class=\"line\">nohup java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<span class=\"number\">9999</span>  /home/gp2-web.jar </span><br><span class=\"line\">--spring.profiles.active=$&#123;ENV&#125; --server.port=$&#123;PORT&#125;  &amp;</span><br><span class=\"line\"><span class=\"number\">9999</span>就是暴露的调试端口</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2war包部署\">2.war包部署</h4>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找到tomcat bin目录下的catalina.sh文件，将JPDA_ADDRESS=<span class=\"string\">\"localhost:8000\"</span>修改成JPDA_ADDRESS=<span class=\"string\">\"0.0.0.0:9999\"</span>，</span><br><span class=\"line\"><span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>代表所有远程调试端都可以访问，也可以单独指定一个ip，<span class=\"number\">9999</span>就是暴露的调试端口，</span><br><span class=\"line\">然后shutdown掉tomcat，用tomcat bin目录下的catalina.sh jpda start命令重新启动tomcat即可。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二idea远程调试的使用\">二.idea远程调试的使用</h3>\n<p><img src=\"/blog/img/all/remote_debug1.PNG\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/all/remote_debug2.PNG\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如上面两张图，只需要idea <span class=\"keyword\">new</span>一个remote连接,修改remote配置上的远程服务器ip和端口，</span><br><span class=\"line\">然后启动remote，可以看到<span class=\"built_in\">console</span>上显示已经连上远程服务器。</span><br><span class=\"line\">这个时候就可以在idea上打断点调试了。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>一.前言</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">远程连接服务器调试是一个程序员基础必备技能，特别是在开发，测试，回归的调试过程中很有用处，</span><br><span class=\"line\">因为一个bug在不同环境可能呈现不同的结果。</span><br></pre></td></tr></table></figure></p>\n<h3>二.tomcat配置修改</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tomcat修改配置开放调试端口给idea远程连接，下面分别介绍以jar包和war包部署时tomcat怎么开放调试端口</span><br></pre></td></tr></table></figure></p>\n<h4>1.jar包部署</h4>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只需要在nohup java -jar 后面加上-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<span class=\"number\">9999</span>，</span><br><span class=\"line\">例如：</span><br><span class=\"line\">nohup java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<span class=\"number\">9999</span>  /home/gp2-web.jar </span><br><span class=\"line\">--spring.profiles.active=$&#123;ENV&#125; --server.port=$&#123;PORT&#125;  &amp;</span><br><span class=\"line\"><span class=\"number\">9999</span>就是暴露的调试端口</span><br></pre></td></tr></table></figure></p>\n<h4>2.war包部署</h4>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找到tomcat bin目录下的catalina.sh文件，将JPDA_ADDRESS=<span class=\"string\">\"localhost:8000\"</span>修改成JPDA_ADDRESS=<span class=\"string\">\"0.0.0.0:9999\"</span>，</span><br><span class=\"line\"><span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>代表所有远程调试端都可以访问，也可以单独指定一个ip，<span class=\"number\">9999</span>就是暴露的调试端口，</span><br><span class=\"line\">然后shutdown掉tomcat，用tomcat bin目录下的catalina.sh jpda start命令重新启动tomcat即可。</span><br></pre></td></tr></table></figure></p>\n<h3>二.idea远程调试的使用</h3>\n<p><img src=\"/blog/img/all/remote_debug1.PNG\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/all/remote_debug2.PNG\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如上面两张图，只需要idea <span class=\"keyword\">new</span>一个remote连接,修改remote配置上的远程服务器ip和端口，</span><br><span class=\"line\">然后启动remote，可以看到<span class=\"built_in\">console</span>上显示已经连上远程服务器。</span><br><span class=\"line\">这个时候就可以在idea上打断点调试了。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"shardingjdbc读写分离","catalog":true,"date":"2020-11-05T06:27:29.000Z","subtitle":"shardingjdbc","header-img":"/blog/img/header_img/404.png","_content":"## io.shardingjdbc读写分离\n### 一.读写分离架构图\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingjdbc1.PNG)\n### 二.数据库主从配置\n[mysql主从设置](https://xshcloudy.gitee.io/blog/uncategorized/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E8%AE%BE%E7%BD%AE/ \"mysql主从设置\")\n### 三.shardingjdbc配置\n`1.引入依赖`\n```java\n<dependency>\n\t<groupId>io.shardingjdbc</groupId>\n\t<artifactId>sharding-jdbc-core</artifactId>\n\t<version>2.0.3</version>\n</dependency>\n```\n`2.config配置`\n```java\nsharding:\n  jdbc:\n    datasource:\n      #master数据库数据源\n      master:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/sharding?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n      #slave数据库数据源\n      slave0:\n        username: root\n        password: 123456\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3307/sharding?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n```\n```java\n@Configuration\n@EnableTransactionManagement\n@MapperScan(value = {\"com.pineapple.dao\"}, sqlSessionFactoryRef = \"sqlSessionFactory\")\npublic class MybatisConfig {\n\n    @Bean(name = \"masterDataSource\")\n    @Primary\n    @ConfigurationProperties(prefix = \"sharding.jdbc.datasource.master\")\n    public DataSource getMasterDataSource() {\n        return new DruidDataSource();\n    }\n\n    @Bean(name = \"slaveDataSource0\")\n    @ConfigurationProperties(prefix = \"sharding.jdbc.datasource.slave0\")\n    public DataSource getSlaveDataSource0() {\n        return new DruidDataSource();\n    }\n\n    @Bean(name = \"masterSlaveJdbcDatasource\")\n    public DataSource getMasterSlaveDataSource(@Qualifier(\"masterDataSource\") DataSource dataSourceMaster,\n        @Qualifier(\"slaveDataSource0\") DataSource dataSourceSlave0) throws SQLException {\n\n        Map<String, DataSource> dsMap = new HashMap<>();\n        dsMap.put(\"ds-master-0\", dataSourceMaster);\n        dsMap.put(\"ds-master-0-slave-0\", dataSourceSlave0);\n        MasterSlaveRuleConfiguration masterSlaveRuleConfig = new MasterSlaveRuleConfiguration();\n        masterSlaveRuleConfig.setName(\"ds-0\");\n        masterSlaveRuleConfig.setMasterDataSourceName(\"ds-master-0\");\n        masterSlaveRuleConfig.setSlaveDataSourceNames(Arrays.asList(\"ds-master-0-slave-0\"));\n        return MasterSlaveDataSourceFactory.createDataSource(dsMap, masterSlaveRuleConfig, new HashMap<>());\n    }\n\n    @Bean(name = \"sqlSessionFactory\")\n    @Primary\n    public SqlSessionFactory sqlSessionFactory(\n        @Qualifier(\"masterSlaveJdbcDatasource\") DataSource masterSlaveJdbcDatasource) throws Exception {\n        SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();\n        factoryBean.setVfs(SpringBootVFS.class);\n        factoryBean.setDataSource(masterSlaveJdbcDatasource);\n        PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();\n        factoryBean.setMapperLocations(resolver.getResources(\"classpath*:/mapper/*.xml\"));\n        return factoryBean.getObject();\n    }\n\n    @Bean(name = \"transactionManager\")\n    public DataSourceTransactionManager transactionManager(@Qualifier(\"masterSlaveJdbcDatasource\") DataSource dataSource) {\n        return new DataSourceTransactionManager(dataSource);\n    }\n\n    @Bean(name = \"transactionTemplate\")\n    public TransactionTemplate transactionTemplate(@Qualifier(\"transactionManager\") DataSourceTransactionManager transactionManager) {\n        return new TransactionTemplate(transactionManager);\n    }\n}\n```\n\n`shardingjdbc默认master数据库执行delete,update,insert,slave数据库执行select`\n\n\n\n\n\n","source":"_posts/io.shardingjdbc读写分离.md","raw":"---\ntitle: shardingjdbc读写分离\ncatalog: true\ndate: 2020-11-05 14:27:29\nsubtitle: shardingjdbc\nheader-img: \"/blog/img/header_img/404.png\"\ntags:\n- java\n---\n## io.shardingjdbc读写分离\n### 一.读写分离架构图\n![在这里插入图片描述](/blog/img/shardingjdbc/shardingjdbc1.PNG)\n### 二.数据库主从配置\n[mysql主从设置](https://xshcloudy.gitee.io/blog/uncategorized/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E8%AE%BE%E7%BD%AE/ \"mysql主从设置\")\n### 三.shardingjdbc配置\n`1.引入依赖`\n```java\n<dependency>\n\t<groupId>io.shardingjdbc</groupId>\n\t<artifactId>sharding-jdbc-core</artifactId>\n\t<version>2.0.3</version>\n</dependency>\n```\n`2.config配置`\n```java\nsharding:\n  jdbc:\n    datasource:\n      #master数据库数据源\n      master:\n        username: root\n        password: 111111\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/sharding?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n      #slave数据库数据源\n      slave0:\n        username: root\n        password: 123456\n        driver-class-name: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3307/sharding?useUnicoe=true&characterEncoding=utf-8&serverTimezone=GMT\n        type: com.alibaba.druid.pool.DruidDataSource\n```\n```java\n@Configuration\n@EnableTransactionManagement\n@MapperScan(value = {\"com.pineapple.dao\"}, sqlSessionFactoryRef = \"sqlSessionFactory\")\npublic class MybatisConfig {\n\n    @Bean(name = \"masterDataSource\")\n    @Primary\n    @ConfigurationProperties(prefix = \"sharding.jdbc.datasource.master\")\n    public DataSource getMasterDataSource() {\n        return new DruidDataSource();\n    }\n\n    @Bean(name = \"slaveDataSource0\")\n    @ConfigurationProperties(prefix = \"sharding.jdbc.datasource.slave0\")\n    public DataSource getSlaveDataSource0() {\n        return new DruidDataSource();\n    }\n\n    @Bean(name = \"masterSlaveJdbcDatasource\")\n    public DataSource getMasterSlaveDataSource(@Qualifier(\"masterDataSource\") DataSource dataSourceMaster,\n        @Qualifier(\"slaveDataSource0\") DataSource dataSourceSlave0) throws SQLException {\n\n        Map<String, DataSource> dsMap = new HashMap<>();\n        dsMap.put(\"ds-master-0\", dataSourceMaster);\n        dsMap.put(\"ds-master-0-slave-0\", dataSourceSlave0);\n        MasterSlaveRuleConfiguration masterSlaveRuleConfig = new MasterSlaveRuleConfiguration();\n        masterSlaveRuleConfig.setName(\"ds-0\");\n        masterSlaveRuleConfig.setMasterDataSourceName(\"ds-master-0\");\n        masterSlaveRuleConfig.setSlaveDataSourceNames(Arrays.asList(\"ds-master-0-slave-0\"));\n        return MasterSlaveDataSourceFactory.createDataSource(dsMap, masterSlaveRuleConfig, new HashMap<>());\n    }\n\n    @Bean(name = \"sqlSessionFactory\")\n    @Primary\n    public SqlSessionFactory sqlSessionFactory(\n        @Qualifier(\"masterSlaveJdbcDatasource\") DataSource masterSlaveJdbcDatasource) throws Exception {\n        SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();\n        factoryBean.setVfs(SpringBootVFS.class);\n        factoryBean.setDataSource(masterSlaveJdbcDatasource);\n        PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();\n        factoryBean.setMapperLocations(resolver.getResources(\"classpath*:/mapper/*.xml\"));\n        return factoryBean.getObject();\n    }\n\n    @Bean(name = \"transactionManager\")\n    public DataSourceTransactionManager transactionManager(@Qualifier(\"masterSlaveJdbcDatasource\") DataSource dataSource) {\n        return new DataSourceTransactionManager(dataSource);\n    }\n\n    @Bean(name = \"transactionTemplate\")\n    public TransactionTemplate transactionTemplate(@Qualifier(\"transactionManager\") DataSourceTransactionManager transactionManager) {\n        return new TransactionTemplate(transactionManager);\n    }\n}\n```\n\n`shardingjdbc默认master数据库执行delete,update,insert,slave数据库执行select`\n\n\n\n\n\n","slug":"io.shardingjdbc读写分离","published":1,"updated":"2020-11-17T01:17:31.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xm3000e98v5qv8bju1d","content":"<h2 id=\"ioshardingjdbc读写分离\">io.shardingjdbc读写分离</h2>\n<h3 id=\"一读写分离架构图\">一.读写分离架构图</h3>\n<p><img src=\"/blog/img/shardingjdbc/shardingjdbc1.PNG\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"二数据库主从配置\">二.数据库主从配置</h3>\n<p><a href=\"https://xshcloudy.gitee.io/blog/uncategorized/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E8%AE%BE%E7%BD%AE/\" title=\"mysql主从设置\">mysql主从设置</a></p>\n<h3 id=\"三shardingjdbc配置\">三.shardingjdbc配置</h3>\n<p><code>1.引入依赖</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.shardingjdbc&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;sharding-jdbc-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.0.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.config配置</code>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sharding:</span><br><span class=\"line\">  jdbc:</span><br><span class=\"line\">    datasource:</span><br><span class=\"line\">      #master数据库数据源</span><br><span class=\"line\">      master:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: <span class=\"number\">111111</span></span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql:<span class=\"comment\">//localhost:3306/sharding?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span></span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">      #slave数据库数据源</span><br><span class=\"line\">      slave0:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: <span class=\"number\">123456</span></span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql:<span class=\"comment\">//localhost:3307/sharding?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span></span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(value = &#123;<span class=\"string\">\"com.pineapple.dao\"</span>&#125;, sqlSessionFactoryRef = <span class=\"string\">\"sqlSessionFactory\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"masterDataSource\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"sharding.jdbc.datasource.master\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">getMasterDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"slaveDataSource0\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"sharding.jdbc.datasource.slave0\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">getSlaveDataSource0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"masterSlaveJdbcDatasource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">getMasterSlaveDataSource</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"masterDataSource\"</span>)</span> DataSource dataSourceMaster,</span></span><br><span class=\"line\"><span class=\"function\">        @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"slaveDataSource0\"</span>)</span> DataSource dataSourceSlave0) <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, DataSource&gt; dsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        dsMap.put(<span class=\"string\">\"ds-master-0\"</span>, dataSourceMaster);</span><br><span class=\"line\">        dsMap.put(<span class=\"string\">\"ds-master-0-slave-0\"</span>, dataSourceSlave0);</span><br><span class=\"line\">        MasterSlaveRuleConfiguration masterSlaveRuleConfig = <span class=\"keyword\">new</span> MasterSlaveRuleConfiguration();</span><br><span class=\"line\">        masterSlaveRuleConfig.setName(<span class=\"string\">\"ds-0\"</span>);</span><br><span class=\"line\">        masterSlaveRuleConfig.setMasterDataSourceName(<span class=\"string\">\"ds-master-0\"</span>);</span><br><span class=\"line\">        masterSlaveRuleConfig.setSlaveDataSourceNames(Arrays.asList(<span class=\"string\">\"ds-master-0-slave-0\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MasterSlaveDataSourceFactory.createDataSource(dsMap, masterSlaveRuleConfig, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"sqlSessionFactory\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactory</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Qualifier(<span class=\"string\">\"masterSlaveJdbcDatasource\"</span>)</span> DataSource masterSlaveJdbcDatasource) <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean factoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        factoryBean.setVfs(SpringBootVFS.class);</span><br><span class=\"line\">        factoryBean.setDataSource(masterSlaveJdbcDatasource);</span><br><span class=\"line\">        PathMatchingResourcePatternResolver resolver = <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver();</span><br><span class=\"line\">        factoryBean.setMapperLocations(resolver.getResources(<span class=\"string\">\"classpath*:/mapper/*.xml\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factoryBean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"masterSlaveJdbcDatasource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TransactionTemplate <span class=\"title\">transactionTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"transactionManager\"</span>)</span> DataSourceTransactionManager transactionManager) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransactionTemplate(transactionManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>shardingjdbc默认master数据库执行delete,update,insert,slave数据库执行select</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>io.shardingjdbc读写分离</h2>\n<h3>一.读写分离架构图</h3>\n<p><img src=\"/blog/img/shardingjdbc/shardingjdbc1.PNG\" alt=\"在这里插入图片描述\"></p>\n<h3>二.数据库主从配置</h3>\n<p><a href=\"https://xshcloudy.gitee.io/blog/uncategorized/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E8%AE%BE%E7%BD%AE/\" title=\"mysql主从设置\">mysql主从设置</a></p>\n<h3>三.shardingjdbc配置</h3>\n<p><code>1.引入依赖</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.shardingjdbc&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;sharding-jdbc-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.0.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.config配置</code>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sharding:</span><br><span class=\"line\">  jdbc:</span><br><span class=\"line\">    datasource:</span><br><span class=\"line\">      #master数据库数据源</span><br><span class=\"line\">      master:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: <span class=\"number\">111111</span></span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql:<span class=\"comment\">//localhost:3306/sharding?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span></span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">      #slave数据库数据源</span><br><span class=\"line\">      slave0:</span><br><span class=\"line\">        username: root</span><br><span class=\"line\">        password: <span class=\"number\">123456</span></span><br><span class=\"line\">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">        url: jdbc:mysql:<span class=\"comment\">//localhost:3307/sharding?useUnicoe=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span></span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(value = &#123;<span class=\"string\">\"com.pineapple.dao\"</span>&#125;, sqlSessionFactoryRef = <span class=\"string\">\"sqlSessionFactory\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"masterDataSource\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"sharding.jdbc.datasource.master\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">getMasterDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"slaveDataSource0\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"sharding.jdbc.datasource.slave0\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">getSlaveDataSource0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"masterSlaveJdbcDatasource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">getMasterSlaveDataSource</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"masterDataSource\"</span>)</span> DataSource dataSourceMaster,</span></span><br><span class=\"line\"><span class=\"function\">        @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"slaveDataSource0\"</span>)</span> DataSource dataSourceSlave0) <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, DataSource&gt; dsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        dsMap.put(<span class=\"string\">\"ds-master-0\"</span>, dataSourceMaster);</span><br><span class=\"line\">        dsMap.put(<span class=\"string\">\"ds-master-0-slave-0\"</span>, dataSourceSlave0);</span><br><span class=\"line\">        MasterSlaveRuleConfiguration masterSlaveRuleConfig = <span class=\"keyword\">new</span> MasterSlaveRuleConfiguration();</span><br><span class=\"line\">        masterSlaveRuleConfig.setName(<span class=\"string\">\"ds-0\"</span>);</span><br><span class=\"line\">        masterSlaveRuleConfig.setMasterDataSourceName(<span class=\"string\">\"ds-master-0\"</span>);</span><br><span class=\"line\">        masterSlaveRuleConfig.setSlaveDataSourceNames(Arrays.asList(<span class=\"string\">\"ds-master-0-slave-0\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MasterSlaveDataSourceFactory.createDataSource(dsMap, masterSlaveRuleConfig, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"sqlSessionFactory\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactory</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Qualifier(<span class=\"string\">\"masterSlaveJdbcDatasource\"</span>)</span> DataSource masterSlaveJdbcDatasource) <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean factoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        factoryBean.setVfs(SpringBootVFS.class);</span><br><span class=\"line\">        factoryBean.setDataSource(masterSlaveJdbcDatasource);</span><br><span class=\"line\">        PathMatchingResourcePatternResolver resolver = <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver();</span><br><span class=\"line\">        factoryBean.setMapperLocations(resolver.getResources(<span class=\"string\">\"classpath*:/mapper/*.xml\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factoryBean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionManager\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"masterSlaveJdbcDatasource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TransactionTemplate <span class=\"title\">transactionTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"transactionManager\"</span>)</span> DataSourceTransactionManager transactionManager) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransactionTemplate(transactionManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>shardingjdbc默认master数据库执行delete,update,insert,slave数据库执行select</code></p>\n"},{"title":"java锁的分类","catalog":true,"date":"2020-09-14T12:28:04.000Z","subtitle":"java锁的分类","header-img":"/blog/img/article_header/article_header.png","_content":"![在这里插入图片描述](/blog/img/all/lock.PNG)\n","source":"_posts/java锁的分类.md","raw":"---\ntitle: java锁的分类\ncatalog: true\ndate: 2020-09-14 20:28:04\nsubtitle: java锁的分类\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n![在这里插入图片描述](/blog/img/all/lock.PNG)\n","slug":"java锁的分类","published":1,"updated":"2020-11-05T06:58:09.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xm5000h98v5i8ywmb3e","content":"<p><img src=\"/blog/img/all/lock.PNG\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/blog/img/all/lock.PNG\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"mysql数据库主从设置","catalog":true,"date":"2020-11-05T06:23:41.000Z","subtitle":"shardingjdbc","header-img":"/blog/img/header_img/404.png","_content":"## mysql数据库主从设置\n### 一.主从同步原理\n![在这里插入图片描述](/blog/img/shardingjdbc/mysql0.PNG)\n\n### 二.主从同步设置\n##### 1.安装两个mysql\n##### 2.配置主数据库my.ini\n`新建my.ini（windows是my.ini，linux是my.cnf），放在mysql根目录下`\n```json\n[mysql]\n \n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir=E:\\mysql\\mysql-5.7.31-0\n# 设置mysql数据库的数据的存放目录（目录记得更改）\n#datadir=E:\\mysql\\mysql-5.7.31-0\\data\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 跳过登录密码验证\n#skip-grant-tables\nserver-id=1 #唯一ID\nlog_bin=sharding_log_bin  #开启及设置二进制日志文件名称\nmax_binlog_size=500M\nsync_binlog = 0\nbinlog_cache_size=128K  #binlog缓存大小\nbinlog-do-db=sharding  #要同步的数据库 \nbinlog-ignore-db=mysql  #不需要同步的数据库\nbinlog_ignore_db=performation_schema\n#log-slave-updates=1  #A>B>C实现三级同步开关\n#expire_logs_day=2  #二进制日志自动删除的天数。默认值为0，表示不自动删除。\nbinlog_format=MIXED \n```\n\n##### 3.重启主数据库\n##### 4.主数据库创建授权用户\n```java\nCREATE USER 'slave'@'@' IDENTIFIED BY '123456';\nGRANT REPLICATION SLAVE ON *.* TO slave@'%' IDENTIFIED BY '123456';\nFLUSH PRIVILEGES;\n\nselect user,host from mysql.user;\n```\n##### 5.查看主数据库log_bin是否开启（需要开启log_bin）\n```java\nshow variables like 'log_bin';\n```\n##### 6.查看主数据库master状态\n```java\nshow master status;\n# 如下图file（log_bin文件名）和position（log_bin文件位置，会变化）的值在从数据库的配置中会用到\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/mysql1.PNG)\n\n##### 7.配置主数据库my.ini\n```json\n[mysql]\n \n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3307端口（和主数据库区分开）\nport = 3307\n# 设置mysql的安装目录\nbasedir=E:\\mysql\\mysql-5.7.31-1\n# 设置mysql数据库的数据的存放目录（目录记得更改）\n#datadir=E:\\mysql\\mysql-5.7.31-0\\data\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 跳过登录密码验证\n#skip-grant-tables\nserver-id=2\n```\n##### 8.重启从数据库\n##### 9.关闭从数据库slave开关\n```java\nstop slave;\n```\n##### 10.从数据库配置主数据库信息\n```java\nCHANGE MASTER TO MASTER_HOST = '127.0.0.1',\nMASTER_USER = 'slave',\nMASTER_PASSWORD = '123456',\nMASTER_LOG_FILE = 'sharding_log_bin.000002',\nMASTER_LOG_POS = 3315;\n```\n##### 11.开启从数据库slave开关\n```java\nstart slave;\n```\n##### 12.查看从数据库slave状态\n```java\nSHOW SLAVE STATUS;\n#如下图只有【Slave_IO_Running】和【Slave_SQL_Running】都是Yes，则同步正常。\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/mysql2.PNG)\n##### 13.查看mysql-error.log\n```java\nshow variables like 'log_error%';\n#如果主从同步异常，可执行该命令，如下图，DESKTOP-BOMJA8F.err中可查看异常日志\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/mysql3.PNG)\n","source":"_posts/mysql数据库主从设置.md","raw":"---\ntitle: mysql数据库主从设置\ncatalog: true\ndate: 2020-11-05 14:23:41\nsubtitle: shardingjdbc\nheader-img: \"/blog/img/header_img/404.png\"\ntags:\n- java\n---\n## mysql数据库主从设置\n### 一.主从同步原理\n![在这里插入图片描述](/blog/img/shardingjdbc/mysql0.PNG)\n\n### 二.主从同步设置\n##### 1.安装两个mysql\n##### 2.配置主数据库my.ini\n`新建my.ini（windows是my.ini，linux是my.cnf），放在mysql根目录下`\n```json\n[mysql]\n \n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir=E:\\mysql\\mysql-5.7.31-0\n# 设置mysql数据库的数据的存放目录（目录记得更改）\n#datadir=E:\\mysql\\mysql-5.7.31-0\\data\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 跳过登录密码验证\n#skip-grant-tables\nserver-id=1 #唯一ID\nlog_bin=sharding_log_bin  #开启及设置二进制日志文件名称\nmax_binlog_size=500M\nsync_binlog = 0\nbinlog_cache_size=128K  #binlog缓存大小\nbinlog-do-db=sharding  #要同步的数据库 \nbinlog-ignore-db=mysql  #不需要同步的数据库\nbinlog_ignore_db=performation_schema\n#log-slave-updates=1  #A>B>C实现三级同步开关\n#expire_logs_day=2  #二进制日志自动删除的天数。默认值为0，表示不自动删除。\nbinlog_format=MIXED \n```\n\n##### 3.重启主数据库\n##### 4.主数据库创建授权用户\n```java\nCREATE USER 'slave'@'@' IDENTIFIED BY '123456';\nGRANT REPLICATION SLAVE ON *.* TO slave@'%' IDENTIFIED BY '123456';\nFLUSH PRIVILEGES;\n\nselect user,host from mysql.user;\n```\n##### 5.查看主数据库log_bin是否开启（需要开启log_bin）\n```java\nshow variables like 'log_bin';\n```\n##### 6.查看主数据库master状态\n```java\nshow master status;\n# 如下图file（log_bin文件名）和position（log_bin文件位置，会变化）的值在从数据库的配置中会用到\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/mysql1.PNG)\n\n##### 7.配置主数据库my.ini\n```json\n[mysql]\n \n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3307端口（和主数据库区分开）\nport = 3307\n# 设置mysql的安装目录\nbasedir=E:\\mysql\\mysql-5.7.31-1\n# 设置mysql数据库的数据的存放目录（目录记得更改）\n#datadir=E:\\mysql\\mysql-5.7.31-0\\data\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 跳过登录密码验证\n#skip-grant-tables\nserver-id=2\n```\n##### 8.重启从数据库\n##### 9.关闭从数据库slave开关\n```java\nstop slave;\n```\n##### 10.从数据库配置主数据库信息\n```java\nCHANGE MASTER TO MASTER_HOST = '127.0.0.1',\nMASTER_USER = 'slave',\nMASTER_PASSWORD = '123456',\nMASTER_LOG_FILE = 'sharding_log_bin.000002',\nMASTER_LOG_POS = 3315;\n```\n##### 11.开启从数据库slave开关\n```java\nstart slave;\n```\n##### 12.查看从数据库slave状态\n```java\nSHOW SLAVE STATUS;\n#如下图只有【Slave_IO_Running】和【Slave_SQL_Running】都是Yes，则同步正常。\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/mysql2.PNG)\n##### 13.查看mysql-error.log\n```java\nshow variables like 'log_error%';\n#如果主从同步异常，可执行该命令，如下图，DESKTOP-BOMJA8F.err中可查看异常日志\n```\n![在这里插入图片描述](/blog/img/shardingjdbc/mysql3.PNG)\n","slug":"mysql数据库主从设置","published":1,"updated":"2020-11-05T07:31:55.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xm6000j98v581gf3b3m","content":"<h2 id=\"mysql数据库主从设置\">mysql数据库主从设置</h2>\n<h3 id=\"一主从同步原理\">一.主从同步原理</h3>\n<p><img src=\"/blog/img/shardingjdbc/mysql0.PNG\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"二主从同步设置\">二.主从同步设置</h3>\n<h5 id=\"1安装两个mysql\">1.安装两个mysql</h5>\n<h5 id=\"2配置主数据库myini\">2.配置主数据库my.ini</h5>\n<p><code>新建my.ini（windows是my.ini，linux是my.cnf），放在mysql根目录下</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-set=utf8 </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">#设置3306端口</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\">basedir=E:\\mysql\\mysql-5.7.31-0</span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录（目录记得更改）</span><br><span class=\"line\">#datadir=E:\\mysql\\mysql-5.7.31-0\\data</span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\"># 跳过登录密码验证</span><br><span class=\"line\">#skip-grant-tables</span><br><span class=\"line\">server-id=1 #唯一ID</span><br><span class=\"line\">log_bin=sharding_log_bin  #开启及设置二进制日志文件名称</span><br><span class=\"line\">max_binlog_size=500M</span><br><span class=\"line\">sync_binlog = 0</span><br><span class=\"line\">binlog_cache_size=128K  #binlog缓存大小</span><br><span class=\"line\">binlog-do-db=sharding  #要同步的数据库 </span><br><span class=\"line\">binlog-ignore-db=mysql  #不需要同步的数据库</span><br><span class=\"line\">binlog_ignore_db=performation_schema</span><br><span class=\"line\">#log-slave-updates=1  #A&gt;B&gt;C实现三级同步开关</span><br><span class=\"line\">#expire_logs_day=2  #二进制日志自动删除的天数。默认值为0，表示不自动删除。</span><br><span class=\"line\">binlog_format=MIXED</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3重启主数据库\">3.重启主数据库</h5>\n<h5 id=\"4主数据库创建授权用户\">4.主数据库创建授权用户</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER <span class=\"string\">'slave'</span>@<span class=\"string\">'@'</span> IDENTIFIED BY <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* TO slave@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"></span><br><span class=\"line\">select user,host from mysql.user;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5查看主数据库log_bin是否开启需要开启log_bin\">5.查看主数据库log_bin是否开启（需要开启log_bin）</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like <span class=\"string\">'log_bin'</span>;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"6查看主数据库master状态\">6.查看主数据库master状态</h5>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br><span class=\"line\"># 如下图file（log_bin文件名）和position（log_bin文件位置，会变化）的值在从数据库的配置中会用到</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/mysql1.PNG\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"7配置主数据库myini\">7.配置主数据库my.ini</h5>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-set=utf8 </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">#设置3307端口（和主数据库区分开）</span><br><span class=\"line\">port = 3307</span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\">basedir=E:\\mysql\\mysql-5.7.31-1</span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录（目录记得更改）</span><br><span class=\"line\">#datadir=E:\\mysql\\mysql-5.7.31-0\\data</span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\"># 跳过登录密码验证</span><br><span class=\"line\">#skip-grant-tables</span><br><span class=\"line\">server-id=2</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"8重启从数据库\">8.重启从数据库</h5>\n<h5 id=\"9关闭从数据库slave开关\">9.关闭从数据库slave开关</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stop slave;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"10从数据库配置主数据库信息\">10.从数据库配置主数据库信息</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHANGE MASTER TO MASTER_HOST = <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">MASTER_USER = <span class=\"string\">'slave'</span>,</span><br><span class=\"line\">MASTER_PASSWORD = <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">MASTER_LOG_FILE = <span class=\"string\">'sharding_log_bin.000002'</span>,</span><br><span class=\"line\">MASTER_LOG_POS = <span class=\"number\">3315</span>;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"11开启从数据库slave开关\">11.开启从数据库slave开关</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"12查看从数据库slave状态\">12.查看从数据库slave状态</h5>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW SLAVE STATUS;</span><br><span class=\"line\">#如下图只有【Slave_IO_Running】和【Slave_SQL_Running】都是Yes，则同步正常。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/mysql2.PNG\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"13查看mysql-errorlog\">13.查看mysql-error.log</h5>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like <span class=\"string\">'log_error%'</span>;</span><br><span class=\"line\">#如果主从同步异常，可执行该命令，如下图，DESKTOP-BOMJA8F.err中可查看异常日志</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/mysql3.PNG\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>mysql数据库主从设置</h2>\n<h3>一.主从同步原理</h3>\n<p><img src=\"/blog/img/shardingjdbc/mysql0.PNG\" alt=\"在这里插入图片描述\"></p>\n<h3>二.主从同步设置</h3>\n<h5>1.安装两个mysql</h5>\n<h5>2.配置主数据库my.ini</h5>\n<p><code>新建my.ini（windows是my.ini，linux是my.cnf），放在mysql根目录下</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-set=utf8 </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">#设置3306端口</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\">basedir=E:\\mysql\\mysql-5.7.31-0</span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录（目录记得更改）</span><br><span class=\"line\">#datadir=E:\\mysql\\mysql-5.7.31-0\\data</span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\"># 跳过登录密码验证</span><br><span class=\"line\">#skip-grant-tables</span><br><span class=\"line\">server-id=1 #唯一ID</span><br><span class=\"line\">log_bin=sharding_log_bin  #开启及设置二进制日志文件名称</span><br><span class=\"line\">max_binlog_size=500M</span><br><span class=\"line\">sync_binlog = 0</span><br><span class=\"line\">binlog_cache_size=128K  #binlog缓存大小</span><br><span class=\"line\">binlog-do-db=sharding  #要同步的数据库 </span><br><span class=\"line\">binlog-ignore-db=mysql  #不需要同步的数据库</span><br><span class=\"line\">binlog_ignore_db=performation_schema</span><br><span class=\"line\">#log-slave-updates=1  #A&gt;B&gt;C实现三级同步开关</span><br><span class=\"line\">#expire_logs_day=2  #二进制日志自动删除的天数。默认值为0，表示不自动删除。</span><br><span class=\"line\">binlog_format=MIXED</span><br></pre></td></tr></table></figure></p>\n<h5>3.重启主数据库</h5>\n<h5>4.主数据库创建授权用户</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER <span class=\"string\">'slave'</span>@<span class=\"string\">'@'</span> IDENTIFIED BY <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* TO slave@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"></span><br><span class=\"line\">select user,host from mysql.user;</span><br></pre></td></tr></table></figure></p>\n<h5>5.查看主数据库log_bin是否开启（需要开启log_bin）</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like <span class=\"string\">'log_bin'</span>;</span><br></pre></td></tr></table></figure></p>\n<h5>6.查看主数据库master状态</h5>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br><span class=\"line\"># 如下图file（log_bin文件名）和position（log_bin文件位置，会变化）的值在从数据库的配置中会用到</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/mysql1.PNG\" alt=\"在这里插入图片描述\"></p>\n<h5>7.配置主数据库my.ini</h5>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-set=utf8 </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">#设置3307端口（和主数据库区分开）</span><br><span class=\"line\">port = 3307</span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\">basedir=E:\\mysql\\mysql-5.7.31-1</span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录（目录记得更改）</span><br><span class=\"line\">#datadir=E:\\mysql\\mysql-5.7.31-0\\data</span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\"># 跳过登录密码验证</span><br><span class=\"line\">#skip-grant-tables</span><br><span class=\"line\">server-id=2</span><br></pre></td></tr></table></figure></p>\n<h5>8.重启从数据库</h5>\n<h5>9.关闭从数据库slave开关</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stop slave;</span><br></pre></td></tr></table></figure></p>\n<h5>10.从数据库配置主数据库信息</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHANGE MASTER TO MASTER_HOST = <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">MASTER_USER = <span class=\"string\">'slave'</span>,</span><br><span class=\"line\">MASTER_PASSWORD = <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">MASTER_LOG_FILE = <span class=\"string\">'sharding_log_bin.000002'</span>,</span><br><span class=\"line\">MASTER_LOG_POS = <span class=\"number\">3315</span>;</span><br></pre></td></tr></table></figure></p>\n<h5>11.开启从数据库slave开关</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure></p>\n<h5>12.查看从数据库slave状态</h5>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW SLAVE STATUS;</span><br><span class=\"line\">#如下图只有【Slave_IO_Running】和【Slave_SQL_Running】都是Yes，则同步正常。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/mysql2.PNG\" alt=\"在这里插入图片描述\"></p>\n<h5>13.查看mysql-error.log</h5>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like <span class=\"string\">'log_error%'</span>;</span><br><span class=\"line\">#如果主从同步异常，可执行该命令，如下图，DESKTOP-BOMJA8F.err中可查看异常日志</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/shardingjdbc/mysql3.PNG\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"springboot使用redis作为二级缓存","catalog":true,"date":"2019-01-26T15:33:50.000Z","subtitle":"二级缓存","header-img":"/blog/img/article_header/article_header.png","_content":"# springboot使用redis作为二级缓存\n## 1.maven依赖\n```javascript\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-cache</artifactId>\n        </dependency>\n```\n## 2.配置\n```javascript\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/5/13\n **/\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n    @Value(\"${cache.expireTime}\")\n    private Integer cacheExpireTime;\n    private final static Logger log = LoggerFactory.getLogger(RedisConfig.class);\n\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {\n        //设置redis序列化方式\n        StringRedisTemplate template = new StringRedisTemplate(connectionFactory);\n        template.setValueSerializer(new Jackson2JsonRedisSerializer(Object.class));\n        template.setHashValueSerializer(new Jackson2JsonRedisSerializer(Object.class));\n        template.afterPropertiesSet();\n        //初始化CacheManager，使用redis作为二级缓存\n        return new RedisCacheManager(RedisCacheWriter.nonLockingRedisCacheWriter(connectionFactory),\n                getDefaultTtlRedisCacheConfiguration(cacheExpireTime), getCustomizeTtlRedisCacheConfigurationMap());\n    }\n\n    /**\n     * 设置缓存默认配置\n     *\n     * @param seconds\n     * @return\n     */\n    private RedisCacheConfiguration getDefaultTtlRedisCacheConfiguration(Integer seconds) {\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();\n        //设置序列化方式以及失效时间\n        redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(\n                RedisSerializationContext\n                        .SerializationPair\n                        .fromSerializer(jackson2JsonRedisSerializer)\n        ).entryTtl(Duration.ofSeconds(seconds));\n        return redisCacheConfiguration;\n    }\n\n    /**\n     * 自定义缓存失效时间\n     *\n     * @return\n     */\n    private Map<String, RedisCacheConfiguration> getCustomizeTtlRedisCacheConfigurationMap() {\n        Map<String, RedisCacheConfiguration> redisCacheConfigurationMap = new HashMap<>();\n        //dictionary就是我们自定义的key，使用@Cacheable等注解时，将其value属性设置为dictionary，那么这个dictionary的缓存失效时间就是这里我们自定义的失效时间（cacheExpireTime）\n        redisCacheConfigurationMap.put(\"dictionary\", this.getDefaultTtlRedisCacheConfiguration(cacheExpireTime));\n        return redisCacheConfigurationMap;\n    }\n\t/**\n\t设置缓存默认key生成方式，使用@Cacheable注解时，如果不指明key值，则默认按下面方式生成key\n\t */\n    @Nullable\n    @Override\n    public KeyGenerator keyGenerator() {\n        return new KeyGenerator() {\n            @Override\n            public Object generate(Object target, Method method, Object... params) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(target.getClass().getName());\n                sb.append(method.getName());\n                for (Object obj : params) {\n                    sb.append(obj.toString());\n                }\n                log.info(\"缓存自动生成key：\" + sb.toString());\n                return sb.toString();\n            }\n        };\n    }\n}\n\n```\n## 3.使用方式\n###### @Cacheable\n当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。，缓存改方法的返回值。\n| 参数        | 解释   |  例子  |\n| :--------   | :----- | :----  |\n| value      | 缓存的名称，在 spring 配置文件中定义，必须指定至少一个   |   例如:<br />@Cacheable(value=”mycache”)<br />@Cacheable(value={”cache1”,”cache2”}     |\n|key        |   缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合   |   @Cacheable(value=”testcache”,key=”#userName”)   |\n| condition        |    缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存    |  @Cacheable(value=”testcache”,condition=”#userName.length()>2”)  |\n\n###### @CachePut\n@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。\n\n\n###### @CacheEvict\n@CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。\n###### @Caching\n@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。\n```javascript\n@Caching(cacheable = @Cacheable(\"users\"), evict = { @CacheEvict(\"cache2\"),\n   @CacheEvict(value = \"cache3\") })\n   public User find(Integer id) {\n      returnnull;\n   }\n   ```\n\n","source":"_posts/springboot使用redis作为二级缓存.md","raw":"---\ntitle: springboot使用redis作为二级缓存\ncatalog: true\ndate: 2019-01-26 23:33:50\nsubtitle: \"二级缓存\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n# springboot使用redis作为二级缓存\n## 1.maven依赖\n```javascript\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-cache</artifactId>\n        </dependency>\n```\n## 2.配置\n```javascript\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/5/13\n **/\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n    @Value(\"${cache.expireTime}\")\n    private Integer cacheExpireTime;\n    private final static Logger log = LoggerFactory.getLogger(RedisConfig.class);\n\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {\n        //设置redis序列化方式\n        StringRedisTemplate template = new StringRedisTemplate(connectionFactory);\n        template.setValueSerializer(new Jackson2JsonRedisSerializer(Object.class));\n        template.setHashValueSerializer(new Jackson2JsonRedisSerializer(Object.class));\n        template.afterPropertiesSet();\n        //初始化CacheManager，使用redis作为二级缓存\n        return new RedisCacheManager(RedisCacheWriter.nonLockingRedisCacheWriter(connectionFactory),\n                getDefaultTtlRedisCacheConfiguration(cacheExpireTime), getCustomizeTtlRedisCacheConfigurationMap());\n    }\n\n    /**\n     * 设置缓存默认配置\n     *\n     * @param seconds\n     * @return\n     */\n    private RedisCacheConfiguration getDefaultTtlRedisCacheConfiguration(Integer seconds) {\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();\n        //设置序列化方式以及失效时间\n        redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(\n                RedisSerializationContext\n                        .SerializationPair\n                        .fromSerializer(jackson2JsonRedisSerializer)\n        ).entryTtl(Duration.ofSeconds(seconds));\n        return redisCacheConfiguration;\n    }\n\n    /**\n     * 自定义缓存失效时间\n     *\n     * @return\n     */\n    private Map<String, RedisCacheConfiguration> getCustomizeTtlRedisCacheConfigurationMap() {\n        Map<String, RedisCacheConfiguration> redisCacheConfigurationMap = new HashMap<>();\n        //dictionary就是我们自定义的key，使用@Cacheable等注解时，将其value属性设置为dictionary，那么这个dictionary的缓存失效时间就是这里我们自定义的失效时间（cacheExpireTime）\n        redisCacheConfigurationMap.put(\"dictionary\", this.getDefaultTtlRedisCacheConfiguration(cacheExpireTime));\n        return redisCacheConfigurationMap;\n    }\n\t/**\n\t设置缓存默认key生成方式，使用@Cacheable注解时，如果不指明key值，则默认按下面方式生成key\n\t */\n    @Nullable\n    @Override\n    public KeyGenerator keyGenerator() {\n        return new KeyGenerator() {\n            @Override\n            public Object generate(Object target, Method method, Object... params) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(target.getClass().getName());\n                sb.append(method.getName());\n                for (Object obj : params) {\n                    sb.append(obj.toString());\n                }\n                log.info(\"缓存自动生成key：\" + sb.toString());\n                return sb.toString();\n            }\n        };\n    }\n}\n\n```\n## 3.使用方式\n###### @Cacheable\n当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。，缓存改方法的返回值。\n| 参数        | 解释   |  例子  |\n| :--------   | :----- | :----  |\n| value      | 缓存的名称，在 spring 配置文件中定义，必须指定至少一个   |   例如:<br />@Cacheable(value=”mycache”)<br />@Cacheable(value={”cache1”,”cache2”}     |\n|key        |   缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合   |   @Cacheable(value=”testcache”,key=”#userName”)   |\n| condition        |    缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存    |  @Cacheable(value=”testcache”,condition=”#userName.length()>2”)  |\n\n###### @CachePut\n@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。\n\n\n###### @CacheEvict\n@CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。\n###### @Caching\n@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。\n```javascript\n@Caching(cacheable = @Cacheable(\"users\"), evict = { @CacheEvict(\"cache2\"),\n   @CacheEvict(value = \"cache3\") })\n   public User find(Integer id) {\n      returnnull;\n   }\n   ```\n\n","slug":"springboot使用redis作为二级缓存","published":1,"updated":"2020-11-05T06:58:09.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xm8000m98v5nrm0hvtr","content":"<h1 id=\"springboot使用redis作为二级缓存\">springboot使用redis作为二级缓存</h1>\n<h2 id=\"1maven依赖\">1.maven依赖</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;<span class=\"regexp\">/groupId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/</span>artifactId&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/dependency&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;groupId&gt;org.springframework.boot&lt;/g</span>roupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-cache&lt;<span class=\"regexp\">/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2配置\">2.配置</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @version 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author shenghao.xiao</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date 2019/5/13</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">CachingConfigurerSupport</span> </span>&#123;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"$&#123;cache.expireTime&#125;\"</span>)</span><br><span class=\"line\">    private Integer cacheExpireTime;</span><br><span class=\"line\">    private final <span class=\"keyword\">static</span> Logger log = LoggerFactory.getLogger(RedisConfig.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置redis序列化方式</span></span><br><span class=\"line\">        StringRedisTemplate template = <span class=\"keyword\">new</span> StringRedisTemplate(connectionFactory);</span><br><span class=\"line\">        template.setValueSerializer(<span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(<span class=\"built_in\">Object</span>.class));</span><br><span class=\"line\">        template.setHashValueSerializer(<span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(<span class=\"built_in\">Object</span>.class));</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"comment\">//初始化CacheManager，使用redis作为二级缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RedisCacheManager(RedisCacheWriter.nonLockingRedisCacheWriter(connectionFactory),</span><br><span class=\"line\">                getDefaultTtlRedisCacheConfiguration(cacheExpireTime), getCustomizeTtlRedisCacheConfigurationMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置缓存默认配置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param seconds</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    private RedisCacheConfiguration getDefaultTtlRedisCacheConfiguration(Integer seconds) &#123;</span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;<span class=\"built_in\">Object</span>&gt; jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer&lt;&gt;(<span class=\"built_in\">Object</span>.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class=\"line\">        <span class=\"comment\">//设置序列化方式以及失效时间</span></span><br><span class=\"line\">        redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(</span><br><span class=\"line\">                RedisSerializationContext</span><br><span class=\"line\">                        .SerializationPair</span><br><span class=\"line\">                        .fromSerializer(jackson2JsonRedisSerializer)</span><br><span class=\"line\">        ).entryTtl(Duration.ofSeconds(seconds));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisCacheConfiguration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自定义缓存失效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    private <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, RedisCacheConfiguration&gt; getCustomizeTtlRedisCacheConfigurationMap() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, RedisCacheConfiguration&gt; redisCacheConfigurationMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//dictionary就是我们自定义的key，使用@Cacheable等注解时，将其value属性设置为dictionary，那么这个dictionary的缓存失效时间就是这里我们自定义的失效时间（cacheExpireTime）</span></span><br><span class=\"line\">        redisCacheConfigurationMap.put(<span class=\"string\">\"dictionary\"</span>, <span class=\"keyword\">this</span>.getDefaultTtlRedisCacheConfiguration(cacheExpireTime));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisCacheConfigurationMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t设置缓存默认key生成方式，使用@Cacheable注解时，如果不指明key值，则默认按下面方式生成key</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    @Nullable</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public KeyGenerator keyGenerator() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyGenerator() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public <span class=\"built_in\">Object</span> generate(<span class=\"built_in\">Object</span> target, Method method, <span class=\"built_in\">Object</span>... params) &#123;</span><br><span class=\"line\">                StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                sb.append(target.getClass().getName());</span><br><span class=\"line\">                sb.append(method.getName());</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">Object</span> obj : params) &#123;</span><br><span class=\"line\">                    sb.append(obj.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                log.info(<span class=\"string\">\"缓存自动生成key：\"</span> + sb.toString());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3使用方式\">3.使用方式</h2>\n<h6 id=\"cacheable\">@Cacheable</h6>\n<p>当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。，缓存改方法的返回值。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">解释</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">value</td>\n<td style=\"text-align:left\">缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>\n<td style=\"text-align:left\">例如:&lt;br /&gt;@Cacheable(value=”mycache”)&lt;br /&gt;@Cacheable(value={”cache1”,”cache2”}</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">key</td>\n<td style=\"text-align:left\">缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td>\n<td style=\"text-align:left\">@Cacheable(value=”testcache”,key=”#userName”)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">condition</td>\n<td style=\"text-align:left\">缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存</td>\n<td style=\"text-align:left\">@Cacheable(value=”testcache”,condition=”#userName.length()&gt;2”)</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"cacheput\">@CachePut</h6>\n<p>@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。</p>\n<h6 id=\"cacheevict\">@CacheEvict</h6>\n<p>@CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。</p>\n<h6 id=\"caching\">@Caching</h6>\n<p>@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Caching(cacheable = @Cacheable(<span class=\"string\">\"users\"</span>), evict = &#123; @CacheEvict(<span class=\"string\">\"cache2\"</span>),</span><br><span class=\"line\">   @CacheEvict(value = <span class=\"string\">\"cache3\"</span>) &#125;)</span><br><span class=\"line\">   public User find(Integer id) &#123;</span><br><span class=\"line\">      returnnull;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>springboot使用redis作为二级缓存</h1>\n<h2>1.maven依赖</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;<span class=\"regexp\">/groupId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/</span>artifactId&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/dependency&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;groupId&gt;org.springframework.boot&lt;/g</span>roupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-cache&lt;<span class=\"regexp\">/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h2>2.配置</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @version 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author shenghao.xiao</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date 2019/5/13</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">CachingConfigurerSupport</span> </span>&#123;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"$&#123;cache.expireTime&#125;\"</span>)</span><br><span class=\"line\">    private Integer cacheExpireTime;</span><br><span class=\"line\">    private final <span class=\"keyword\">static</span> Logger log = LoggerFactory.getLogger(RedisConfig.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置redis序列化方式</span></span><br><span class=\"line\">        StringRedisTemplate template = <span class=\"keyword\">new</span> StringRedisTemplate(connectionFactory);</span><br><span class=\"line\">        template.setValueSerializer(<span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(<span class=\"built_in\">Object</span>.class));</span><br><span class=\"line\">        template.setHashValueSerializer(<span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(<span class=\"built_in\">Object</span>.class));</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"comment\">//初始化CacheManager，使用redis作为二级缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RedisCacheManager(RedisCacheWriter.nonLockingRedisCacheWriter(connectionFactory),</span><br><span class=\"line\">                getDefaultTtlRedisCacheConfiguration(cacheExpireTime), getCustomizeTtlRedisCacheConfigurationMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置缓存默认配置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param seconds</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    private RedisCacheConfiguration getDefaultTtlRedisCacheConfiguration(Integer seconds) &#123;</span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;<span class=\"built_in\">Object</span>&gt; jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer&lt;&gt;(<span class=\"built_in\">Object</span>.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class=\"line\">        <span class=\"comment\">//设置序列化方式以及失效时间</span></span><br><span class=\"line\">        redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(</span><br><span class=\"line\">                RedisSerializationContext</span><br><span class=\"line\">                        .SerializationPair</span><br><span class=\"line\">                        .fromSerializer(jackson2JsonRedisSerializer)</span><br><span class=\"line\">        ).entryTtl(Duration.ofSeconds(seconds));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisCacheConfiguration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自定义缓存失效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    private <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, RedisCacheConfiguration&gt; getCustomizeTtlRedisCacheConfigurationMap() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, RedisCacheConfiguration&gt; redisCacheConfigurationMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//dictionary就是我们自定义的key，使用@Cacheable等注解时，将其value属性设置为dictionary，那么这个dictionary的缓存失效时间就是这里我们自定义的失效时间（cacheExpireTime）</span></span><br><span class=\"line\">        redisCacheConfigurationMap.put(<span class=\"string\">\"dictionary\"</span>, <span class=\"keyword\">this</span>.getDefaultTtlRedisCacheConfiguration(cacheExpireTime));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisCacheConfigurationMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t设置缓存默认key生成方式，使用@Cacheable注解时，如果不指明key值，则默认按下面方式生成key</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    @Nullable</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public KeyGenerator keyGenerator() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyGenerator() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public <span class=\"built_in\">Object</span> generate(<span class=\"built_in\">Object</span> target, Method method, <span class=\"built_in\">Object</span>... params) &#123;</span><br><span class=\"line\">                StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                sb.append(target.getClass().getName());</span><br><span class=\"line\">                sb.append(method.getName());</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">Object</span> obj : params) &#123;</span><br><span class=\"line\">                    sb.append(obj.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                log.info(<span class=\"string\">\"缓存自动生成key：\"</span> + sb.toString());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2>3.使用方式</h2>\n<h6>@Cacheable</h6>\n<p>当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。，缓存改方法的返回值。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">解释</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">value</td>\n<td style=\"text-align:left\">缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>\n<td style=\"text-align:left\">例如:&lt;br /&gt;@Cacheable(value=”mycache”)&lt;br /&gt;@Cacheable(value={”cache1”,”cache2”}</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">key</td>\n<td style=\"text-align:left\">缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td>\n<td style=\"text-align:left\">@Cacheable(value=”testcache”,key=”#userName”)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">condition</td>\n<td style=\"text-align:left\">缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存</td>\n<td style=\"text-align:left\">@Cacheable(value=”testcache”,condition=”#userName.length()&gt;2”)</td>\n</tr>\n</tbody>\n</table>\n<h6>@CachePut</h6>\n<p>@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。</p>\n<h6>@CacheEvict</h6>\n<p>@CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。</p>\n<h6>@Caching</h6>\n<p>@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Caching(cacheable = @Cacheable(<span class=\"string\">\"users\"</span>), evict = &#123; @CacheEvict(<span class=\"string\">\"cache2\"</span>),</span><br><span class=\"line\">   @CacheEvict(value = <span class=\"string\">\"cache3\"</span>) &#125;)</span><br><span class=\"line\">   public User find(Integer id) &#123;</span><br><span class=\"line\">      returnnull;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"markdown","catalog":true,"date":"2017-11-19T06:43:32.000Z","subtitle":"markdown使用说明","header-img":"/img/article_header/article_header.png","_content":"@[TOC](这里写自定义目录标题)\n\n# 欢迎使用Markdown编辑器\n链接: [markdown说明](https://mp.csdn.net/mdeditor?not_checkout=1#Markdown_2).\n你好！ 这是你第一次使用 **Markdown编辑器** 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\n\n## 新的改变\n\n我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\n\n 1. **全新的界面设计** ，将会带来全新的写作体验；\n 2. 在创作中心设置你喜爱的代码高亮样式，Markdown **将代码片显示选择的高亮样式** 进行展示；\n 3. 增加了 **图片拖拽** 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；\n 4. 全新的 **KaTeX数学公式** 语法；\n 5. 增加了支持**甘特图的mermaid语法[^1]** 功能；\n 6. 增加了 **多屏幕编辑** Markdown文章功能；\n 7. 增加了 **焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置** 等功能，功能按钮位于编辑区域与预览区域中间；\n 8. 增加了 **检查列表** 功能。\n [^1]: [mermaid语法说明](https://mermaidjs.github.io/)\n\n## 功能快捷键\n\n撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd>\n重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd>\n加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd>\n斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd>\n标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd>\n无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd>\n有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd>\n检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd>\n插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd>\n插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd>\n\n\n## 合理的创建标题，有助于目录的生成\n\n直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用`TOC`语法后生成一个完美的目录。\n\n\n\n## 如何改变文本的样式\n\n*强调文本* _强调文本_\n\n**加粗文本** __加粗文本__\n\n==标记文本==\n\n~~删除文本~~\n\n> 引用文本\n\nH~2~O is是液体。\n\n2^10^ 运算结果是 1024.\n\n\n\n## 插入链接与图片\n\n链接: [link](https://mp.csdn.net).\n\n图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg)\n\n带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg =30x30)\n\n居中的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center)\n\n居中并且带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center =30x30)\n\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\n\n\n## 如何插入一段漂亮的代码片\n\n去[博客设置](https://mp.csdn.net/configure)页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 `代码片`.\n```javascript\n// An highlighted block\nvar foo = 'bar';\n```\n\n\n## 生成一个适合你的列表\n\n- 项目\n  - 项目\n    - 项目\n\n1. 项目1\n2. 项目2\n3. 项目3\n\n- [ ] 计划任务\n- [x] 完成任务\n\n\n## 创建一个表格\n一个简单的表格是这么创建的：\n项目     | Value\n-------- | -----\n电脑  | $1600\n手机  | $12\n导管  | $1\n\n### 设定内容居中、居左、居右\n使用`:---------:`居中\n使用`:----------`居左\n使用`----------:`居右\n| 第一列       | 第二列         | 第三列        |\n|:-----------:| -------------:|:-------------|\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | \n\n\n### SmartyPants\nSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\n|    TYPE   |ASCII                          |HTML                         \n|----------------|-------------------------------|-----------------------------|\n|Single backticks|`'Isn't this fun?'`            |'Isn't this fun?'            |\n|Quotes          |`\"Isn't this fun?\"`            |\"Isn't this fun?\"            |\n|Dashes          |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash|\n\n\n## 创建一个自定义列表\nMarkdown\n:  Text-to-HTML conversion tool\n\nAuthors\n:  John\n:  Luke\n\n\n## 如何创建一个注脚\n\n一个具有注脚的文本。[^2]\n\n[^2]: 注脚的解释\n\n\n##  注释也是必不可少的\n\nMarkdown将文本转换为 HTML。\n\n*[HTML]:   超文本标记语言\n\n\n## KaTeX数学公式\n\n您可以使用渲染LaTeX数学表达式 [KaTeX](https://khan.github.io/KaTeX/):\n\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分\n\n$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\n$$\n\n> 你可以找到更多关于的信息 **LaTeX** 数学表达式[here][1].\n\n\n## 新的甘特图功能，丰富你的文章\n\n```mermaid\ngantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section 现有任务\n        已完成               :done,    des1, 2014-01-06,2014-01-08\n        进行中               :active,  des2, 2014-01-09, 3d\n        计划一               :         des3, after des2, 5d\n        计划二               :         des4, after des3, 5d\n```\n- 关于 **甘特图** 语法，参考 [这儿][2],\n\n## UML 图表\n\n可以使用UML图表进行渲染。 [Mermaid](https://mermaidjs.github.io/). 例如下面产生的一个序列图：:\n\n```mermaid\nsequenceDiagram\n张三 ->> 李四: 你好！李四, 最近怎么样?\n李四-->>王五: 你最近怎么样，王五？\n李四--x 张三: 我很好，谢谢!\n李四-x 王五: 我很好，谢谢!\nNote right of 王五: 李四想了很长时间, 文字太长了<br/>不适合放在一行.\n\n李四-->>张三: 打量着王五...\n张三->>王五: 很好... 王五, 你怎么样?\n```\n\n这将产生一个流程图。:\n\n```mermaid\ngraph LR\nA[长方形] -- 链接 --> B((圆))\nA --> C(圆角长方形)\nB --> D{菱形}\nC --> D\n```\n\n- 关于 **Mermaid** 语法，参考 [这儿][3],\n\n## FLowchart流程图\n\n我们依旧会支持flowchart的流程图：\n```mermaid\nflowchat\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 关于 **Flowchart流程图** 语法，参考 [这儿][4].\n\n\n## 导出与导入\n\n###  导出\n如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 **文章导出** ，生成一个.md文件或者.html文件进行本地保存。\n\n### 导入\n如果你想加载一篇你写过的.md文件或者.html文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，\n继续你的创作。\n\n [1]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n [2]: https://mermaidjs.github.io/\n [3]: https://mermaidjs.github.io/\n [4]: http://adrai.github.io/flowchart.js/\n\n<details>\n<summary>展开查看</summary>\n<pre><code>\nSystem.out.println(\"Hello to see U!\");\n</code></pre>\n</details>\n\n\n","source":"_posts/markdown.md","raw":"---\ntitle: markdown\ncatalog: true\ndate: 2017-11-19 14:43:32\nsubtitle: markdown使用说明\nheader-img: \"/img/article_header/article_header.png\"\ntags:\n- markdown\n---\n@[TOC](这里写自定义目录标题)\n\n# 欢迎使用Markdown编辑器\n链接: [markdown说明](https://mp.csdn.net/mdeditor?not_checkout=1#Markdown_2).\n你好！ 这是你第一次使用 **Markdown编辑器** 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\n\n## 新的改变\n\n我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\n\n 1. **全新的界面设计** ，将会带来全新的写作体验；\n 2. 在创作中心设置你喜爱的代码高亮样式，Markdown **将代码片显示选择的高亮样式** 进行展示；\n 3. 增加了 **图片拖拽** 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；\n 4. 全新的 **KaTeX数学公式** 语法；\n 5. 增加了支持**甘特图的mermaid语法[^1]** 功能；\n 6. 增加了 **多屏幕编辑** Markdown文章功能；\n 7. 增加了 **焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置** 等功能，功能按钮位于编辑区域与预览区域中间；\n 8. 增加了 **检查列表** 功能。\n [^1]: [mermaid语法说明](https://mermaidjs.github.io/)\n\n## 功能快捷键\n\n撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd>\n重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd>\n加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd>\n斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd>\n标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd>\n无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd>\n有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd>\n检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd>\n插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd>\n插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd>\n\n\n## 合理的创建标题，有助于目录的生成\n\n直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用`TOC`语法后生成一个完美的目录。\n\n\n\n## 如何改变文本的样式\n\n*强调文本* _强调文本_\n\n**加粗文本** __加粗文本__\n\n==标记文本==\n\n~~删除文本~~\n\n> 引用文本\n\nH~2~O is是液体。\n\n2^10^ 运算结果是 1024.\n\n\n\n## 插入链接与图片\n\n链接: [link](https://mp.csdn.net).\n\n图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg)\n\n带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg =30x30)\n\n居中的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center)\n\n居中并且带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center =30x30)\n\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\n\n\n## 如何插入一段漂亮的代码片\n\n去[博客设置](https://mp.csdn.net/configure)页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 `代码片`.\n```javascript\n// An highlighted block\nvar foo = 'bar';\n```\n\n\n## 生成一个适合你的列表\n\n- 项目\n  - 项目\n    - 项目\n\n1. 项目1\n2. 项目2\n3. 项目3\n\n- [ ] 计划任务\n- [x] 完成任务\n\n\n## 创建一个表格\n一个简单的表格是这么创建的：\n项目     | Value\n-------- | -----\n电脑  | $1600\n手机  | $12\n导管  | $1\n\n### 设定内容居中、居左、居右\n使用`:---------:`居中\n使用`:----------`居左\n使用`----------:`居右\n| 第一列       | 第二列         | 第三列        |\n|:-----------:| -------------:|:-------------|\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | \n\n\n### SmartyPants\nSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\n|    TYPE   |ASCII                          |HTML                         \n|----------------|-------------------------------|-----------------------------|\n|Single backticks|`'Isn't this fun?'`            |'Isn't this fun?'            |\n|Quotes          |`\"Isn't this fun?\"`            |\"Isn't this fun?\"            |\n|Dashes          |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash|\n\n\n## 创建一个自定义列表\nMarkdown\n:  Text-to-HTML conversion tool\n\nAuthors\n:  John\n:  Luke\n\n\n## 如何创建一个注脚\n\n一个具有注脚的文本。[^2]\n\n[^2]: 注脚的解释\n\n\n##  注释也是必不可少的\n\nMarkdown将文本转换为 HTML。\n\n*[HTML]:   超文本标记语言\n\n\n## KaTeX数学公式\n\n您可以使用渲染LaTeX数学表达式 [KaTeX](https://khan.github.io/KaTeX/):\n\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分\n\n$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\n$$\n\n> 你可以找到更多关于的信息 **LaTeX** 数学表达式[here][1].\n\n\n## 新的甘特图功能，丰富你的文章\n\n```mermaid\ngantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section 现有任务\n        已完成               :done,    des1, 2014-01-06,2014-01-08\n        进行中               :active,  des2, 2014-01-09, 3d\n        计划一               :         des3, after des2, 5d\n        计划二               :         des4, after des3, 5d\n```\n- 关于 **甘特图** 语法，参考 [这儿][2],\n\n## UML 图表\n\n可以使用UML图表进行渲染。 [Mermaid](https://mermaidjs.github.io/). 例如下面产生的一个序列图：:\n\n```mermaid\nsequenceDiagram\n张三 ->> 李四: 你好！李四, 最近怎么样?\n李四-->>王五: 你最近怎么样，王五？\n李四--x 张三: 我很好，谢谢!\n李四-x 王五: 我很好，谢谢!\nNote right of 王五: 李四想了很长时间, 文字太长了<br/>不适合放在一行.\n\n李四-->>张三: 打量着王五...\n张三->>王五: 很好... 王五, 你怎么样?\n```\n\n这将产生一个流程图。:\n\n```mermaid\ngraph LR\nA[长方形] -- 链接 --> B((圆))\nA --> C(圆角长方形)\nB --> D{菱形}\nC --> D\n```\n\n- 关于 **Mermaid** 语法，参考 [这儿][3],\n\n## FLowchart流程图\n\n我们依旧会支持flowchart的流程图：\n```mermaid\nflowchat\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 关于 **Flowchart流程图** 语法，参考 [这儿][4].\n\n\n## 导出与导入\n\n###  导出\n如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 **文章导出** ，生成一个.md文件或者.html文件进行本地保存。\n\n### 导入\n如果你想加载一篇你写过的.md文件或者.html文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，\n继续你的创作。\n\n [1]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n [2]: https://mermaidjs.github.io/\n [3]: https://mermaidjs.github.io/\n [4]: http://adrai.github.io/flowchart.js/\n\n<details>\n<summary>展开查看</summary>\n<pre><code>\nSystem.out.println(\"Hello to see U!\");\n</code></pre>\n</details>\n\n\n","slug":"markdown","published":1,"updated":"2020-11-05T06:58:09.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xm9000o98v56jxjzdr1","content":"<p>@<a href=\"%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98\">TOC</a></p>\n<h1 id=\"欢迎使用markdown编辑器\">欢迎使用Markdown编辑器</h1>\n<p>链接: <a href=\"https://mp.csdn.net/mdeditor?not_checkout=1#Markdown_2\" target=\"_blank\" rel=\"noopener\">markdown说明</a>.\n你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p>\n<h2 id=\"新的改变\">新的改变</h2>\n<p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p>\n<ol>\n<li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li>\n<li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li>\n<li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li>\n<li>全新的 <strong>KaTeX数学公式</strong> 语法；</li>\n<li>增加了支持<strong>甘特图的mermaid语法[^1]</strong> 功能；</li>\n<li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li>\n<li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li>\n<li>增加了 <strong>检查列表</strong> 功能。\n[^1]: <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">mermaid语法说明</a></li>\n</ol>\n<h2 id=\"功能快捷键\">功能快捷键</h2>\n<p>撤销：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Z&lt;/kbd&gt;\n重做：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Y&lt;/kbd&gt;\n加粗：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;B&lt;/kbd&gt;\n斜体：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;I&lt;/kbd&gt;\n标题：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;H&lt;/kbd&gt;\n无序列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;U&lt;/kbd&gt;\n有序列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;O&lt;/kbd&gt;\n检查列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt;\n插入代码：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;K&lt;/kbd&gt;\n插入链接：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;L&lt;/kbd&gt;\n插入图片：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;G&lt;/kbd&gt;</p>\n<h2 id=\"合理的创建标题有助于目录的生成\">合理的创建标题，有助于目录的生成</h2>\n<p>直接输入1次&lt;kbd&gt;#&lt;/kbd&gt;，并按下&lt;kbd&gt;space&lt;/kbd&gt;后，将生成1级标题。\n输入2次&lt;kbd&gt;#&lt;/kbd&gt;，并按下&lt;kbd&gt;space&lt;/kbd&gt;后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>\n<h2 id=\"如何改变文本的样式\">如何改变文本的样式</h2>\n<p><em>强调文本</em> <em>强调文本</em></p>\n<p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n<p>==标记文本==</p>\n<p><s>删除文本</s></p>\n<blockquote>\n<p>引用文本</p>\n</blockquote>\n<p>H~2~O is是液体。</p>\n<p>2^10^ 运算结果是 1024.</p>\n<h2 id=\"插入链接与图片\">插入链接与图片</h2>\n<p>链接: <a href=\"https://mp.csdn.net\" target=\"_blank\" rel=\"noopener\">link</a>.</p>\n<p>图片: <img src=\"https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg\" alt=\"Alt\"></p>\n<p>带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg =30x30)</p>\n<p>居中的图片: <img src=\"https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center\" alt=\"Alt\"></p>\n<p>居中并且带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center =30x30)</p>\n<p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p>\n<h2 id=\"如何插入一段漂亮的代码片\">如何插入一段漂亮的代码片</h2>\n<p>去<a href=\"https://mp.csdn.net/configure\" target=\"_blank\" rel=\"noopener\">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生成一个适合你的列表\">生成一个适合你的列表</h2>\n<ul>\n<li>项目\n<ul>\n<li>项目\n<ul>\n<li>项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>项目1</li>\n<li>项目2</li>\n<li>项目3</li>\n</ol>\n<ul>\n<li>[ ] 计划任务</li>\n<li>[x] 完成任务</li>\n</ul>\n<h2 id=\"创建一个表格\">创建一个表格</h2>\n<p>一个简单的表格是这么创建的：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>电脑</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>手机</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>导管</td>\n<td>$1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"设定内容居中-居左-居右\">设定内容居中、居左、居右</h3>\n<p>使用<code>:---------:</code>居中\n使用<code>:----------</code>居左\n使用<code>----------:</code>居右</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一列</th>\n<th style=\"text-align:right\">第二列</th>\n<th style=\"text-align:left\">第三列</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第一列文本居中</td>\n<td style=\"text-align:right\">第二列文本居右</td>\n<td style=\"text-align:left\">第三列文本居左</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"smartypants\">SmartyPants</h3>\n<p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：</p>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>ASCII</th>\n<th>HTML</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Single backticks</td>\n<td><code>'Isn't this fun?'</code></td>\n<td>'Isn't this fun?'</td>\n</tr>\n<tr>\n<td>Quotes</td>\n<td><code>&quot;Isn't this fun?&quot;</code></td>\n<td>&quot;Isn't this fun?&quot;</td>\n</tr>\n<tr>\n<td>Dashes</td>\n<td><code>-- is en-dash, --- is em-dash</code></td>\n<td>-- is en-dash, --- is em-dash</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"创建一个自定义列表\">创建一个自定义列表</h2>\n<p>Markdown\n:  Text-to-HTML conversion tool</p>\n<p>Authors\n:  John\n:  Luke</p>\n<h2 id=\"如何创建一个注脚\">如何创建一个注脚</h2>\n<p>一个具有注脚的文本。<a href=\"%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A\">^2</a></p>\n<h2 id=\"注释也是必不可少的\">注释也是必不可少的</h2>\n<p>Markdown将文本转换为 HTML。</p>\n<p>*[HTML]:   超文本标记语言</p>\n<h2 id=\"katex数学公式\">KaTeX数学公式</h2>\n<p>您可以使用渲染LaTeX数学表达式 <a href=\"https://khan.github.io/KaTeX/\" target=\"_blank\" rel=\"noopener\">KaTeX</a>:</p>\n<p>Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分</p>\n<p>$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.\n$$</p>\n<blockquote>\n<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n</blockquote>\n<h2 id=\"新的甘特图功能丰富你的文章\">新的甘特图功能，丰富你的文章</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">        dateFormat  YYYY-MM-DD</span><br><span class=\"line\">        title Adding GANTT diagram functionality to mermaid</span><br><span class=\"line\">        section 现有任务</span><br><span class=\"line\">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class=\"line\">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class=\"line\">        计划一               :         des3, after des2, 5d</span><br><span class=\"line\">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>关于 <strong>甘特图</strong> 语法，参考 <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">这儿</a>,</li>\n</ul>\n<h2 id=\"uml-图表\">UML 图表</h2>\n<p>可以使用UML图表进行渲染。 <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">Mermaid</a>. 例如下面产生的一个序列图：:</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span><br><span class=\"line\">李四--&gt;&gt;王五: 你最近怎么样，王五？</span><br><span class=\"line\">李四--x 张三: 我很好，谢谢!</span><br><span class=\"line\">李四-x 王五: 我很好，谢谢!</span><br><span class=\"line\">Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span><br><span class=\"line\"></span><br><span class=\"line\">李四--&gt;&gt;张三: 打量着王五...</span><br><span class=\"line\">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure></p>\n<p>这将产生一个流程图。:</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class=\"line\">A --&gt; C(圆角长方形)</span><br><span class=\"line\">B --&gt; D&#123;菱形&#125;</span><br><span class=\"line\">C --&gt; D</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>关于 <strong>Mermaid</strong> 语法，参考 <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">这儿</a>,</li>\n</ul>\n<h2 id=\"flowchart流程图\">FLowchart流程图</h2>\n<p>我们依旧会支持flowchart的流程图：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flowchat</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">e=&gt;end: 结束</span><br><span class=\"line\">op=&gt;operation: 我的操作</span><br><span class=\"line\">cond=&gt;condition: 确认？</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href=\"http://adrai.github.io/flowchart.js/\" target=\"_blank\" rel=\"noopener\">这儿</a>.</li>\n</ul>\n<h2 id=\"导出与导入\">导出与导入</h2>\n<h3 id=\"导出\">导出</h3>\n<p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p>\n<h3 id=\"导入\">导入</h3>\n<p>如果你想加载一篇你写过的.md文件或者.html文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，\n继续你的创作。</p>\n<p>&lt;details&gt;\n&lt;summary&gt;展开查看&lt;/summary&gt;\n&lt;pre&gt;&lt;code&gt;\nSystem.out.println(&quot;Hello to see U!&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/details&gt;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>@<a href=\"%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98\">TOC</a></p>\n<h1>欢迎使用Markdown编辑器</h1>\n<p>链接: <a href=\"https://mp.csdn.net/mdeditor?not_checkout=1#Markdown_2\" target=\"_blank\" rel=\"noopener\">markdown说明</a>.\n你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p>\n<h2>新的改变</h2>\n<p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p>\n<ol>\n<li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li>\n<li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li>\n<li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li>\n<li>全新的 <strong>KaTeX数学公式</strong> 语法；</li>\n<li>增加了支持<strong>甘特图的mermaid语法[^1]</strong> 功能；</li>\n<li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li>\n<li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li>\n<li>增加了 <strong>检查列表</strong> 功能。\n[^1]: <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">mermaid语法说明</a></li>\n</ol>\n<h2>功能快捷键</h2>\n<p>撤销：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Z&lt;/kbd&gt;\n重做：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Y&lt;/kbd&gt;\n加粗：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;B&lt;/kbd&gt;\n斜体：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;I&lt;/kbd&gt;\n标题：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;H&lt;/kbd&gt;\n无序列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;U&lt;/kbd&gt;\n有序列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;O&lt;/kbd&gt;\n检查列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt;\n插入代码：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;K&lt;/kbd&gt;\n插入链接：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;L&lt;/kbd&gt;\n插入图片：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;G&lt;/kbd&gt;</p>\n<h2>合理的创建标题，有助于目录的生成</h2>\n<p>直接输入1次&lt;kbd&gt;#&lt;/kbd&gt;，并按下&lt;kbd&gt;space&lt;/kbd&gt;后，将生成1级标题。\n输入2次&lt;kbd&gt;#&lt;/kbd&gt;，并按下&lt;kbd&gt;space&lt;/kbd&gt;后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>\n<h2>如何改变文本的样式</h2>\n<p><em>强调文本</em> <em>强调文本</em></p>\n<p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n<p>==标记文本==</p>\n<p><s>删除文本</s></p>\n<blockquote>\n<p>引用文本</p>\n</blockquote>\n<p>H~2~O is是液体。</p>\n<p>2^10^ 运算结果是 1024.</p>\n<h2>插入链接与图片</h2>\n<p>链接: <a href=\"https://mp.csdn.net\" target=\"_blank\" rel=\"noopener\">link</a>.</p>\n<p>图片: <img src=\"https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg\" alt=\"Alt\"></p>\n<p>带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg =30x30)</p>\n<p>居中的图片: <img src=\"https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center\" alt=\"Alt\"></p>\n<p>居中并且带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center =30x30)</p>\n<p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p>\n<h2>如何插入一段漂亮的代码片</h2>\n<p>去<a href=\"https://mp.csdn.net/configure\" target=\"_blank\" rel=\"noopener\">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;</span><br></pre></td></tr></table></figure></p>\n<h2>生成一个适合你的列表</h2>\n<ul>\n<li>项目\n<ul>\n<li>项目\n<ul>\n<li>项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>项目1</li>\n<li>项目2</li>\n<li>项目3</li>\n</ol>\n<ul>\n<li>[ ] 计划任务</li>\n<li>[x] 完成任务</li>\n</ul>\n<h2>创建一个表格</h2>\n<p>一个简单的表格是这么创建的：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>电脑</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>手机</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>导管</td>\n<td>$1</td>\n</tr>\n</tbody>\n</table>\n<h3>设定内容居中、居左、居右</h3>\n<p>使用<code>:---------:</code>居中\n使用<code>:----------</code>居左\n使用<code>----------:</code>居右</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一列</th>\n<th style=\"text-align:right\">第二列</th>\n<th style=\"text-align:left\">第三列</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第一列文本居中</td>\n<td style=\"text-align:right\">第二列文本居右</td>\n<td style=\"text-align:left\">第三列文本居左</td>\n</tr>\n</tbody>\n</table>\n<h3>SmartyPants</h3>\n<p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：</p>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>ASCII</th>\n<th>HTML</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Single backticks</td>\n<td><code>'Isn't this fun?'</code></td>\n<td>'Isn't this fun?'</td>\n</tr>\n<tr>\n<td>Quotes</td>\n<td><code>&quot;Isn't this fun?&quot;</code></td>\n<td>&quot;Isn't this fun?&quot;</td>\n</tr>\n<tr>\n<td>Dashes</td>\n<td><code>-- is en-dash, --- is em-dash</code></td>\n<td>-- is en-dash, --- is em-dash</td>\n</tr>\n</tbody>\n</table>\n<h2>创建一个自定义列表</h2>\n<p>Markdown\n:  Text-to-HTML conversion tool</p>\n<p>Authors\n:  John\n:  Luke</p>\n<h2>如何创建一个注脚</h2>\n<p>一个具有注脚的文本。<a href=\"%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A\">^2</a></p>\n<h2>注释也是必不可少的</h2>\n<p>Markdown将文本转换为 HTML。</p>\n<p>*[HTML]:   超文本标记语言</p>\n<h2>KaTeX数学公式</h2>\n<p>您可以使用渲染LaTeX数学表达式 <a href=\"https://khan.github.io/KaTeX/\" target=\"_blank\" rel=\"noopener\">KaTeX</a>:</p>\n<p>Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分</p>\n<p>$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.\n$$</p>\n<blockquote>\n<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n</blockquote>\n<h2>新的甘特图功能，丰富你的文章</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">        dateFormat  YYYY-MM-DD</span><br><span class=\"line\">        title Adding GANTT diagram functionality to mermaid</span><br><span class=\"line\">        section 现有任务</span><br><span class=\"line\">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class=\"line\">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class=\"line\">        计划一               :         des3, after des2, 5d</span><br><span class=\"line\">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>关于 <strong>甘特图</strong> 语法，参考 <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">这儿</a>,</li>\n</ul>\n<h2>UML 图表</h2>\n<p>可以使用UML图表进行渲染。 <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">Mermaid</a>. 例如下面产生的一个序列图：:</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span><br><span class=\"line\">李四--&gt;&gt;王五: 你最近怎么样，王五？</span><br><span class=\"line\">李四--x 张三: 我很好，谢谢!</span><br><span class=\"line\">李四-x 王五: 我很好，谢谢!</span><br><span class=\"line\">Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span><br><span class=\"line\"></span><br><span class=\"line\">李四--&gt;&gt;张三: 打量着王五...</span><br><span class=\"line\">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure></p>\n<p>这将产生一个流程图。:</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class=\"line\">A --&gt; C(圆角长方形)</span><br><span class=\"line\">B --&gt; D&#123;菱形&#125;</span><br><span class=\"line\">C --&gt; D</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>关于 <strong>Mermaid</strong> 语法，参考 <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">这儿</a>,</li>\n</ul>\n<h2>FLowchart流程图</h2>\n<p>我们依旧会支持flowchart的流程图：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flowchat</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">e=&gt;end: 结束</span><br><span class=\"line\">op=&gt;operation: 我的操作</span><br><span class=\"line\">cond=&gt;condition: 确认？</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href=\"http://adrai.github.io/flowchart.js/\" target=\"_blank\" rel=\"noopener\">这儿</a>.</li>\n</ul>\n<h2>导出与导入</h2>\n<h3>导出</h3>\n<p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p>\n<h3>导入</h3>\n<p>如果你想加载一篇你写过的.md文件或者.html文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，\n继续你的创作。</p>\n<p>&lt;details&gt;\n&lt;summary&gt;展开查看&lt;/summary&gt;\n&lt;pre&gt;&lt;code&gt;\nSystem.out.println(&quot;Hello to see U!&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/details&gt;</p>\n"},{"title":"springboot集成swagger2(增加全局token)","catalog":true,"date":"2018-11-19T07:59:57.000Z","subtitle":"swagger","header-img":"/blog/img/article_header/article_header.png","_content":"# 一.依赖\n```javascript\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.8.0</version>\n</dependency>\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>2.8.0</version>\n</dependency>\n```\n# 二.配置\n## yml\n```javascript\nswagger.enable: true #swagger是否生效，生产环境记得禁用\n```\n## swagger config\n```javascript\n@Configuration\n@ConditionalOnProperty(prefix = \"swagger\", value = {\"enable\"}, havingValue = \"true\")\n@EnableSwagger2\npublic class Swagger2Config {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.xinji.directpaymentclient.web.controller\"))\n                .paths(PathSelectors.any())\n                .build()\n                .securitySchemes(securitySchemes())\n                .securityContexts(securityContexts())\n                ;\n    }\n\n    private ApiInfo apiInfo() {\n        Contact contact = new Contact(\"技术部\", \"\", \"\");\n        return new ApiInfoBuilder()\n                .title(\"我的博客接口文档\")\n                .description(\"我的博客接口文档\")\n                .version(\"1.0\")\n                .contact(contact)\n                .build();\n    }\n\n    private List<ApiKey> securitySchemes() {\n        List<ApiKey> arrayList = new ArrayList<>();\n        arrayList.add(new ApiKey(\"Authorization\", \"token\", \"header\"));\n        return arrayList;\n    }\n\n    private List<SecurityContext> securityContexts() {\n        List<SecurityContext> arrayList = new ArrayList<>();\n        arrayList.add(SecurityContext.builder()\n                .securityReferences(defaultAuth())\n                .build());\n        return arrayList;\n    }\n\n    private List<SecurityReference> defaultAuth() {\n        AuthorizationScope authorizationScope = new AuthorizationScope(\"global\", \"accessEverything\");\n        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];\n        authorizationScopes[0] = authorizationScope;\n        List<SecurityReference> arrayList = new ArrayList<>();\n        arrayList.add(new SecurityReference(\"Authorization\", authorizationScopes));\n        return arrayList;\n    }\n```\n## 拦截器或filter给swagger页面放行\n# 三.可能出现的问题及解决方案\n## 问题\nswagger页面404或者拦截器进入/error路径\n## 解决方案\n自定义静态资源映射目录，addResoureHandler指的是对外暴露的访问路径，addResourceLocations指的是文件放置的目录\n```javascript\n@Configuration\npublic class WebConfig implements WebMvcConfigurer{\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"swagger-ui.html\")\n                .addResourceLocations(\"classpath:/META-INF/resources/\");\n                registry.addResourceHandler(\"/webjars/**\")\n                .addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n    }\n```\n**特别注意：**\n如果你的项目中使用了 extends WebMvcConfigurationSupport，swagger自动配置失效，必然会出现以上情况。只需要在你的项目中继承WebMvcConfigurationSupport的子类中加上：\n```javascript\n   @Override\n    protected void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"swagger-ui.html\")\n                .addResourceLocations(\"classpath:/META-INF/resources/\");\n        registry.addResourceHandler(\"/webjars/**\")\n                .addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n        super.addResourceHandlers(registry);\n    }\n```\n","source":"_posts/springboot集成swagger2-增加全局token.md","raw":"---\ntitle: springboot集成swagger2(增加全局token)\ncatalog: true\ndate: 2018-11-19 15:59:57\nsubtitle: swagger\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n# 一.依赖\n```javascript\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.8.0</version>\n</dependency>\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>2.8.0</version>\n</dependency>\n```\n# 二.配置\n## yml\n```javascript\nswagger.enable: true #swagger是否生效，生产环境记得禁用\n```\n## swagger config\n```javascript\n@Configuration\n@ConditionalOnProperty(prefix = \"swagger\", value = {\"enable\"}, havingValue = \"true\")\n@EnableSwagger2\npublic class Swagger2Config {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.xinji.directpaymentclient.web.controller\"))\n                .paths(PathSelectors.any())\n                .build()\n                .securitySchemes(securitySchemes())\n                .securityContexts(securityContexts())\n                ;\n    }\n\n    private ApiInfo apiInfo() {\n        Contact contact = new Contact(\"技术部\", \"\", \"\");\n        return new ApiInfoBuilder()\n                .title(\"我的博客接口文档\")\n                .description(\"我的博客接口文档\")\n                .version(\"1.0\")\n                .contact(contact)\n                .build();\n    }\n\n    private List<ApiKey> securitySchemes() {\n        List<ApiKey> arrayList = new ArrayList<>();\n        arrayList.add(new ApiKey(\"Authorization\", \"token\", \"header\"));\n        return arrayList;\n    }\n\n    private List<SecurityContext> securityContexts() {\n        List<SecurityContext> arrayList = new ArrayList<>();\n        arrayList.add(SecurityContext.builder()\n                .securityReferences(defaultAuth())\n                .build());\n        return arrayList;\n    }\n\n    private List<SecurityReference> defaultAuth() {\n        AuthorizationScope authorizationScope = new AuthorizationScope(\"global\", \"accessEverything\");\n        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];\n        authorizationScopes[0] = authorizationScope;\n        List<SecurityReference> arrayList = new ArrayList<>();\n        arrayList.add(new SecurityReference(\"Authorization\", authorizationScopes));\n        return arrayList;\n    }\n```\n## 拦截器或filter给swagger页面放行\n# 三.可能出现的问题及解决方案\n## 问题\nswagger页面404或者拦截器进入/error路径\n## 解决方案\n自定义静态资源映射目录，addResoureHandler指的是对外暴露的访问路径，addResourceLocations指的是文件放置的目录\n```javascript\n@Configuration\npublic class WebConfig implements WebMvcConfigurer{\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"swagger-ui.html\")\n                .addResourceLocations(\"classpath:/META-INF/resources/\");\n                registry.addResourceHandler(\"/webjars/**\")\n                .addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n    }\n```\n**特别注意：**\n如果你的项目中使用了 extends WebMvcConfigurationSupport，swagger自动配置失效，必然会出现以上情况。只需要在你的项目中继承WebMvcConfigurationSupport的子类中加上：\n```javascript\n   @Override\n    protected void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"swagger-ui.html\")\n                .addResourceLocations(\"classpath:/META-INF/resources/\");\n        registry.addResourceHandler(\"/webjars/**\")\n                .addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n        super.addResourceHandlers(registry);\n    }\n```\n","slug":"springboot集成swagger2-增加全局token","published":1,"updated":"2020-11-05T06:58:09.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xma000q98v5cuo4iwma","content":"<h1 id=\"一依赖\">一.依赖</h1>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;<span class=\"regexp\">/groupId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;artifactId&gt;springfox-swagger2&lt;/</span>artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.8</span><span class=\"number\">.0</span>&lt;<span class=\"regexp\">/version&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;<span class=\"regexp\">/groupId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;artifactId&gt;springfox-swagger-ui&lt;/</span>artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.8</span><span class=\"number\">.0</span>&lt;<span class=\"regexp\">/version&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二配置\">二.配置</h1>\n<h2 id=\"yml\">yml</h2>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swagger.enable: true #swagger是否生效，生产环境记得禁用</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"swagger-config\">swagger config</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@ConditionalOnProperty(prefix = <span class=\"string\">\"swagger\"</span>, value = &#123;<span class=\"string\">\"enable\"</span>&#125;, havingValue = <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">@EnableSwagger2</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger2Config</span> </span>&#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Docket createRestApi() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">\"com.xinji.directpaymentclient.web.controller\"</span>))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">                .securitySchemes(securitySchemes())</span><br><span class=\"line\">                .securityContexts(securityContexts())</span><br><span class=\"line\">                ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ApiInfo apiInfo() &#123;</span><br><span class=\"line\">        Contact contact = <span class=\"keyword\">new</span> Contact(<span class=\"string\">\"技术部\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                .title(<span class=\"string\">\"我的博客接口文档\"</span>)</span><br><span class=\"line\">                .description(<span class=\"string\">\"我的博客接口文档\"</span>)</span><br><span class=\"line\">                .version(<span class=\"string\">\"1.0\"</span>)</span><br><span class=\"line\">                .contact(contact)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;ApiKey&gt; securitySchemes() &#123;</span><br><span class=\"line\">        List&lt;ApiKey&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        arrayList.add(<span class=\"keyword\">new</span> ApiKey(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"token\"</span>, <span class=\"string\">\"header\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;SecurityContext&gt; securityContexts() &#123;</span><br><span class=\"line\">        List&lt;SecurityContext&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        arrayList.add(SecurityContext.builder()</span><br><span class=\"line\">                .securityReferences(defaultAuth())</span><br><span class=\"line\">                .build());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;SecurityReference&gt; defaultAuth() &#123;</span><br><span class=\"line\">        AuthorizationScope authorizationScope = <span class=\"keyword\">new</span> AuthorizationScope(<span class=\"string\">\"global\"</span>, <span class=\"string\">\"accessEverything\"</span>);</span><br><span class=\"line\">        AuthorizationScope[] authorizationScopes = <span class=\"keyword\">new</span> AuthorizationScope[<span class=\"number\">1</span>];</span><br><span class=\"line\">        authorizationScopes[<span class=\"number\">0</span>] = authorizationScope;</span><br><span class=\"line\">        List&lt;SecurityReference&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        arrayList.add(<span class=\"keyword\">new</span> SecurityReference(<span class=\"string\">\"Authorization\"</span>, authorizationScopes));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"拦截器或filter给swagger页面放行\">拦截器或filter给swagger页面放行</h2>\n<h1 id=\"三可能出现的问题及解决方案\">三.可能出现的问题及解决方案</h1>\n<h2 id=\"问题\">问题</h2>\n<p>swagger页面404或者拦截器进入/error路径</p>\n<h2 id=\"解决方案\">解决方案</h2>\n<p>自定义静态资源映射目录，addResoureHandler指的是对外暴露的访问路径，addResourceLocations指的是文件放置的目录\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"title\">implements</span> <span class=\"title\">WebMvcConfigurer</span></span>&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">\"swagger-ui.html\"</span>)</span><br><span class=\"line\">                .addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/\"</span>);</span><br><span class=\"line\">                registry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>)</span><br><span class=\"line\">                .addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>特别注意：</strong>\n如果你的项目中使用了 extends WebMvcConfigurationSupport，swagger自动配置失效，必然会出现以上情况。只需要在你的项目中继承WebMvcConfigurationSupport的子类中加上：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\"> protected <span class=\"keyword\">void</span> addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class=\"line\">     registry.addResourceHandler(<span class=\"string\">\"swagger-ui.html\"</span>)</span><br><span class=\"line\">             .addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/\"</span>);</span><br><span class=\"line\">     registry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>)</span><br><span class=\"line\">             .addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>);</span><br><span class=\"line\">     <span class=\"keyword\">super</span>.addResourceHandlers(registry);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>一.依赖</h1>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;<span class=\"regexp\">/groupId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;artifactId&gt;springfox-swagger2&lt;/</span>artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.8</span><span class=\"number\">.0</span>&lt;<span class=\"regexp\">/version&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;<span class=\"regexp\">/groupId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;artifactId&gt;springfox-swagger-ui&lt;/</span>artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.8</span><span class=\"number\">.0</span>&lt;<span class=\"regexp\">/version&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h1>二.配置</h1>\n<h2>yml</h2>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swagger.enable: true #swagger是否生效，生产环境记得禁用</span><br></pre></td></tr></table></figure></p>\n<h2>swagger config</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@ConditionalOnProperty(prefix = <span class=\"string\">\"swagger\"</span>, value = &#123;<span class=\"string\">\"enable\"</span>&#125;, havingValue = <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">@EnableSwagger2</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger2Config</span> </span>&#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Docket createRestApi() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">\"com.xinji.directpaymentclient.web.controller\"</span>))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">                .securitySchemes(securitySchemes())</span><br><span class=\"line\">                .securityContexts(securityContexts())</span><br><span class=\"line\">                ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ApiInfo apiInfo() &#123;</span><br><span class=\"line\">        Contact contact = <span class=\"keyword\">new</span> Contact(<span class=\"string\">\"技术部\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                .title(<span class=\"string\">\"我的博客接口文档\"</span>)</span><br><span class=\"line\">                .description(<span class=\"string\">\"我的博客接口文档\"</span>)</span><br><span class=\"line\">                .version(<span class=\"string\">\"1.0\"</span>)</span><br><span class=\"line\">                .contact(contact)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;ApiKey&gt; securitySchemes() &#123;</span><br><span class=\"line\">        List&lt;ApiKey&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        arrayList.add(<span class=\"keyword\">new</span> ApiKey(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"token\"</span>, <span class=\"string\">\"header\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;SecurityContext&gt; securityContexts() &#123;</span><br><span class=\"line\">        List&lt;SecurityContext&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        arrayList.add(SecurityContext.builder()</span><br><span class=\"line\">                .securityReferences(defaultAuth())</span><br><span class=\"line\">                .build());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;SecurityReference&gt; defaultAuth() &#123;</span><br><span class=\"line\">        AuthorizationScope authorizationScope = <span class=\"keyword\">new</span> AuthorizationScope(<span class=\"string\">\"global\"</span>, <span class=\"string\">\"accessEverything\"</span>);</span><br><span class=\"line\">        AuthorizationScope[] authorizationScopes = <span class=\"keyword\">new</span> AuthorizationScope[<span class=\"number\">1</span>];</span><br><span class=\"line\">        authorizationScopes[<span class=\"number\">0</span>] = authorizationScope;</span><br><span class=\"line\">        List&lt;SecurityReference&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        arrayList.add(<span class=\"keyword\">new</span> SecurityReference(<span class=\"string\">\"Authorization\"</span>, authorizationScopes));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2>拦截器或filter给swagger页面放行</h2>\n<h1>三.可能出现的问题及解决方案</h1>\n<h2>问题</h2>\n<p>swagger页面404或者拦截器进入/error路径</p>\n<h2>解决方案</h2>\n<p>自定义静态资源映射目录，addResoureHandler指的是对外暴露的访问路径，addResourceLocations指的是文件放置的目录\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"title\">implements</span> <span class=\"title\">WebMvcConfigurer</span></span>&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">\"swagger-ui.html\"</span>)</span><br><span class=\"line\">                .addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/\"</span>);</span><br><span class=\"line\">                registry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>)</span><br><span class=\"line\">                .addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>特别注意：</strong>\n如果你的项目中使用了 extends WebMvcConfigurationSupport，swagger自动配置失效，必然会出现以上情况。只需要在你的项目中继承WebMvcConfigurationSupport的子类中加上：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\"> protected <span class=\"keyword\">void</span> addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class=\"line\">     registry.addResourceHandler(<span class=\"string\">\"swagger-ui.html\"</span>)</span><br><span class=\"line\">             .addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/\"</span>);</span><br><span class=\"line\">     registry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>)</span><br><span class=\"line\">             .addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>);</span><br><span class=\"line\">     <span class=\"keyword\">super</span>.addResourceHandlers(registry);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"二叉树的遍历","catalog":true,"date":"2019-05-12T15:00:58.000Z","subtitle":"二叉树的遍历","header-img":"/blog/img/article_header/article_header.png","_content":"\n## 1.前序遍历\n前序遍历首先访问根节点，然后遍历左子树，最后遍历右子树。\n![在这里插入图片描述](/blog/img/all/2x1.jpg)\n```javascript\n​\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    List<Integer> dataList = new ArrayList<>();\n    public List<Integer> preorderTraversal(TreeNode root) {\n        if(root!=null){\n            dataList.add(root.val);\n            preorderTraversal(root.left);\n            preorderTraversal(root.right);\n        }\n        return dataList; \n    }\n}\n\n​\n\n```\n\n## 2.中序遍历\n中序遍历是先遍历左子树，然后访问根节点，然后遍历右子树\n![在这里插入图片描述](/blog/img/all/2x2.jpg)\n```javascript\n​\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    List<Integer> dataList = new ArrayList<>();\n    public List<Integer> inorderTraversal(TreeNode root) {\n        if(root!=null){\n            inorderTraversal(root.left); \n            dataList.add(root.val); \n            inorderTraversal(root.right);\n        }\n        return dataList;\n        \n    }\n}\n```\n​\n\n## 3.后序遍历\n后序遍历是先遍历左子树，然后遍历右子树，最后访问树的根节点。\n![在这里插入图片描述](/blog/img/all/2x3.jpg)\n```javascript\n​\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    List<Integer> dataList = new ArrayList<>();\n    public List<Integer> postorderTraversal(TreeNode root) {\n        if(root!=null){\n            postorderTraversal(root.left); \n            postorderTraversal(root.right);\n            dataList.add(root.val); \n        }\n        return dataList;\n    }\n}\n```\n​\n\n","source":"_posts/二叉树的遍历.md","raw":"---\ntitle: 二叉树的遍历\ncatalog: true\ndate: 2019-05-12 23:00:58\nsubtitle: \"二叉树的遍历\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n\n## 1.前序遍历\n前序遍历首先访问根节点，然后遍历左子树，最后遍历右子树。\n![在这里插入图片描述](/blog/img/all/2x1.jpg)\n```javascript\n​\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    List<Integer> dataList = new ArrayList<>();\n    public List<Integer> preorderTraversal(TreeNode root) {\n        if(root!=null){\n            dataList.add(root.val);\n            preorderTraversal(root.left);\n            preorderTraversal(root.right);\n        }\n        return dataList; \n    }\n}\n\n​\n\n```\n\n## 2.中序遍历\n中序遍历是先遍历左子树，然后访问根节点，然后遍历右子树\n![在这里插入图片描述](/blog/img/all/2x2.jpg)\n```javascript\n​\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    List<Integer> dataList = new ArrayList<>();\n    public List<Integer> inorderTraversal(TreeNode root) {\n        if(root!=null){\n            inorderTraversal(root.left); \n            dataList.add(root.val); \n            inorderTraversal(root.right);\n        }\n        return dataList;\n        \n    }\n}\n```\n​\n\n## 3.后序遍历\n后序遍历是先遍历左子树，然后遍历右子树，最后访问树的根节点。\n![在这里插入图片描述](/blog/img/all/2x3.jpg)\n```javascript\n​\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    List<Integer> dataList = new ArrayList<>();\n    public List<Integer> postorderTraversal(TreeNode root) {\n        if(root!=null){\n            postorderTraversal(root.left); \n            postorderTraversal(root.right);\n            dataList.add(root.val); \n        }\n        return dataList;\n    }\n}\n```\n​\n\n","slug":"二叉树的遍历","published":1,"updated":"2020-11-05T06:58:09.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmc000t98v5mpyca5ef","content":"<h2 id=\"1前序遍历\">1.前序遍历</h2>\n<p>前序遍历首先访问根节点，然后遍历左子树，最后遍历右子树。\n<img src=\"/blog/img/all/2x1.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            dataList.add(root.val);</span><br><span class=\"line\">            preorderTraversal(root.left);</span><br><span class=\"line\">            preorderTraversal(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataList; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2中序遍历\">2.中序遍历</h2>\n<p>中序遍历是先遍历左子树，然后访问根节点，然后遍历右子树\n<img src=\"/blog/img/all/2x2.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            inorderTraversal(root.left); </span><br><span class=\"line\">            dataList.add(root.val); </span><br><span class=\"line\">            inorderTraversal(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>​</p>\n<h2 id=\"3后序遍历\">3.后序遍历</h2>\n<p>后序遍历是先遍历左子树，然后遍历右子树，最后访问树的根节点。\n<img src=\"/blog/img/all/2x3.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            postorderTraversal(root.left); </span><br><span class=\"line\">            postorderTraversal(root.right);</span><br><span class=\"line\">            dataList.add(root.val); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>​</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>1.前序遍历</h2>\n<p>前序遍历首先访问根节点，然后遍历左子树，最后遍历右子树。\n<img src=\"/blog/img/all/2x1.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            dataList.add(root.val);</span><br><span class=\"line\">            preorderTraversal(root.left);</span><br><span class=\"line\">            preorderTraversal(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataList; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<h2>2.中序遍历</h2>\n<p>中序遍历是先遍历左子树，然后访问根节点，然后遍历右子树\n<img src=\"/blog/img/all/2x2.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            inorderTraversal(root.left); </span><br><span class=\"line\">            dataList.add(root.val); </span><br><span class=\"line\">            inorderTraversal(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>​</p>\n<h2>3.后序遍历</h2>\n<p>后序遍历是先遍历左子树，然后遍历右子树，最后访问树的根节点。\n<img src=\"/blog/img/all/2x3.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            postorderTraversal(root.left); </span><br><span class=\"line\">            postorderTraversal(root.right);</span><br><span class=\"line\">            dataList.add(root.val); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>​</p>\n"},{"title":"五声音阶","catalog":true,"date":"2018-09-04T16:20:12.000Z","subtitle":"五声音阶","header-img":"/blog/img/article_header/article_header.png","_content":"###### 一.什么是五声音阶\n```javascript\n通常我们认识的音乐，由七个音符组成，按固定音名称为“C、D、E、F、G、A、B”，\n在简谱中记为“1、2、3、4、5、6、7”，\n用唱名则说成是“do、re、mi、fa、sol、la、si”，这就是七声音阶。\n在七声音阶的五大二度音中增加五个半音，就成了12音阶，\n而中国传统的民族音乐中，使用更多的却是五声音阶。\n虽然只用了五个音符，但有着独特的魅力。\n五声音阶又分为大调五声音阶和小调五声音阶。\n\n```\n\n###### 二.大调五声音阶\n```javascript\n小调五声音阶与大调五声音阶的关系和自然大小调的关系是一样的,都是以大调主音往下小三度推出小调的主音,如下表所示。\n```\n![在这里插入图片描述](/blog/img/guitar/5shengyinjie/d_1.png)\n```javascript\n大调五声音阶是按照大二、大二、小三、大二、小三度的音程推算方式上行叠加的。\n无论从哪个音开始,如果你遵循这个公式来推算,都会得到一个大调五声音阶。\n下面是12个调的大调五声音阶组成音：\n```\n![在这里插入图片描述](/blog/img/guitar/5shengyinjie/d_2.png)\n###### 三.小调五声音阶\n```javascript\n小调五声音阶与大调五声音阶的关系和自然大小调的关系是一样的,\n都是以大调主音往下小三度推出小调的主音,如下表所示。\n\n```\n![在这里插入图片描述](/blog/img/guitar/5shengyinjie/x_1.png)\n```javascript\n小调五声音阶是按照,小三,大二,大二,小三,大二度的音程推算方式上行叠加的。\n无论从哪个音开始,如果你遵循这个公式来推算,你都会得到一个小调五声音阶。\n下表是12个调的小调五声音阶组成音。\n\n```\n![在这里插入图片描述](/blog/img/guitar/5shengyinjie/x_2.png)\n\n","source":"_posts/五声音阶.md","raw":"---\ntitle: 五声音阶\ncatalog: true\ndate: 2018-09-05 00:20:12\nsubtitle: \"五声音阶\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- guitar\n---\n###### 一.什么是五声音阶\n```javascript\n通常我们认识的音乐，由七个音符组成，按固定音名称为“C、D、E、F、G、A、B”，\n在简谱中记为“1、2、3、4、5、6、7”，\n用唱名则说成是“do、re、mi、fa、sol、la、si”，这就是七声音阶。\n在七声音阶的五大二度音中增加五个半音，就成了12音阶，\n而中国传统的民族音乐中，使用更多的却是五声音阶。\n虽然只用了五个音符，但有着独特的魅力。\n五声音阶又分为大调五声音阶和小调五声音阶。\n\n```\n\n###### 二.大调五声音阶\n```javascript\n小调五声音阶与大调五声音阶的关系和自然大小调的关系是一样的,都是以大调主音往下小三度推出小调的主音,如下表所示。\n```\n![在这里插入图片描述](/blog/img/guitar/5shengyinjie/d_1.png)\n```javascript\n大调五声音阶是按照大二、大二、小三、大二、小三度的音程推算方式上行叠加的。\n无论从哪个音开始,如果你遵循这个公式来推算,都会得到一个大调五声音阶。\n下面是12个调的大调五声音阶组成音：\n```\n![在这里插入图片描述](/blog/img/guitar/5shengyinjie/d_2.png)\n###### 三.小调五声音阶\n```javascript\n小调五声音阶与大调五声音阶的关系和自然大小调的关系是一样的,\n都是以大调主音往下小三度推出小调的主音,如下表所示。\n\n```\n![在这里插入图片描述](/blog/img/guitar/5shengyinjie/x_1.png)\n```javascript\n小调五声音阶是按照,小三,大二,大二,小三,大二度的音程推算方式上行叠加的。\n无论从哪个音开始,如果你遵循这个公式来推算,你都会得到一个小调五声音阶。\n下表是12个调的小调五声音阶组成音。\n\n```\n![在这里插入图片描述](/blog/img/guitar/5shengyinjie/x_2.png)\n\n","slug":"五声音阶","published":1,"updated":"2020-11-05T06:58:09.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmd000v98v54gwlio3n","content":"<h6 id=\"一什么是五声音阶\">一.什么是五声音阶</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通常我们认识的音乐，由七个音符组成，按固定音名称为“C、D、E、F、G、A、B”，</span><br><span class=\"line\">在简谱中记为“<span class=\"number\">1</span>、<span class=\"number\">2</span>、<span class=\"number\">3</span>、<span class=\"number\">4</span>、<span class=\"number\">5</span>、<span class=\"number\">6</span>、<span class=\"number\">7</span>”，</span><br><span class=\"line\">用唱名则说成是“<span class=\"keyword\">do</span>、re、mi、fa、sol、la、si”，这就是七声音阶。</span><br><span class=\"line\">在七声音阶的五大二度音中增加五个半音，就成了<span class=\"number\">12</span>音阶，</span><br><span class=\"line\">而中国传统的民族音乐中，使用更多的却是五声音阶。</span><br><span class=\"line\">虽然只用了五个音符，但有着独特的魅力。</span><br><span class=\"line\">五声音阶又分为大调五声音阶和小调五声音阶。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"二大调五声音阶\">二.大调五声音阶</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小调五声音阶与大调五声音阶的关系和自然大小调的关系是一样的,都是以大调主音往下小三度推出小调的主音,如下表所示。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/5shengyinjie/d_1.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大调五声音阶是按照大二、大二、小三、大二、小三度的音程推算方式上行叠加的。</span><br><span class=\"line\">无论从哪个音开始,如果你遵循这个公式来推算,都会得到一个大调五声音阶。</span><br><span class=\"line\">下面是<span class=\"number\">12</span>个调的大调五声音阶组成音：</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/5shengyinjie/d_2.png\" alt=\"在这里插入图片描述\"></p>\n<h6 id=\"三小调五声音阶\">三.小调五声音阶</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小调五声音阶与大调五声音阶的关系和自然大小调的关系是一样的,</span><br><span class=\"line\">都是以大调主音往下小三度推出小调的主音,如下表所示。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/5shengyinjie/x_1.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小调五声音阶是按照,小三,大二,大二,小三,大二度的音程推算方式上行叠加的。</span><br><span class=\"line\">无论从哪个音开始,如果你遵循这个公式来推算,你都会得到一个小调五声音阶。</span><br><span class=\"line\">下表是<span class=\"number\">12</span>个调的小调五声音阶组成音。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/5shengyinjie/x_2.png\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h6>一.什么是五声音阶</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通常我们认识的音乐，由七个音符组成，按固定音名称为“C、D、E、F、G、A、B”，</span><br><span class=\"line\">在简谱中记为“<span class=\"number\">1</span>、<span class=\"number\">2</span>、<span class=\"number\">3</span>、<span class=\"number\">4</span>、<span class=\"number\">5</span>、<span class=\"number\">6</span>、<span class=\"number\">7</span>”，</span><br><span class=\"line\">用唱名则说成是“<span class=\"keyword\">do</span>、re、mi、fa、sol、la、si”，这就是七声音阶。</span><br><span class=\"line\">在七声音阶的五大二度音中增加五个半音，就成了<span class=\"number\">12</span>音阶，</span><br><span class=\"line\">而中国传统的民族音乐中，使用更多的却是五声音阶。</span><br><span class=\"line\">虽然只用了五个音符，但有着独特的魅力。</span><br><span class=\"line\">五声音阶又分为大调五声音阶和小调五声音阶。</span><br></pre></td></tr></table></figure></p>\n<h6>二.大调五声音阶</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小调五声音阶与大调五声音阶的关系和自然大小调的关系是一样的,都是以大调主音往下小三度推出小调的主音,如下表所示。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/5shengyinjie/d_1.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大调五声音阶是按照大二、大二、小三、大二、小三度的音程推算方式上行叠加的。</span><br><span class=\"line\">无论从哪个音开始,如果你遵循这个公式来推算,都会得到一个大调五声音阶。</span><br><span class=\"line\">下面是<span class=\"number\">12</span>个调的大调五声音阶组成音：</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/5shengyinjie/d_2.png\" alt=\"在这里插入图片描述\"></p>\n<h6>三.小调五声音阶</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小调五声音阶与大调五声音阶的关系和自然大小调的关系是一样的,</span><br><span class=\"line\">都是以大调主音往下小三度推出小调的主音,如下表所示。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/5shengyinjie/x_1.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小调五声音阶是按照,小三,大二,大二,小三,大二度的音程推算方式上行叠加的。</span><br><span class=\"line\">无论从哪个音开始,如果你遵循这个公式来推算,你都会得到一个小调五声音阶。</span><br><span class=\"line\">下表是<span class=\"number\">12</span>个调的小调五声音阶组成音。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/5shengyinjie/x_2.png\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"分布式事务seata(一)概述","catalog":true,"date":"2020-12-04T01:22:51.000Z","subtitle":"seata","header-img":"/blog/img/header_img/404.png","_content":"## 分布式事务seata(一)概述\n### 一.seata是什么？\n    Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。\n\tSeata 提供了 AT、TCC、SAGA 和 XA 事务模式，打造一站式的分布式解决方案。\n\n### 二.分布式事务模型图\n![在这里插入图片描述](/blog/img/seata/seata1.png)\n\n    TC (Transaction Coordinator) - 事务协调者(seata-server)\n    维护全局和分支事务的状态，驱动全局事务提交或回滚。\n    \n    TM (Transaction Manager) - 事务管理器(全局事务管理)\n    定义全局事务的范围：开始全局事务、提交或回滚全局事务。\n    \n    RM (Resource Manager) - 资源管理器（本地/分支事务管理）\n    管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。\n\n### 三.分布式事务解决方案\n#### 1.AT模式\n    AT模式对业务无入侵，开发无感知，适用于不希望对业务进行改造的场景，会产生脏写。\n![在这里插入图片描述](/blog/img/seata/seata2.png)\n\n#### 2.TCC模式\n    TCC 模式需要自定义实现try,confirm,rollback逻辑,把自定义的分支事务纳入到全局事务的管理中，\n\t对业务侵入大，但效率高。适用于核心系统等对性能有很高要求的场景。\n![在这里插入图片描述](/blog/img/seata/seata3.png)\n\n#### 3.saga模式\n    长事务解决方案，适用于业务流程长且需要保证事务最终一致性的业务系统\n\t（第一阶段就操作DB，会存在脏读问题）\n#### 4.XA模式\n    分布式强一致性的解决方案，但性能低而使用较少。\n\n\n\n\n","source":"_posts/分布式事务seata-一-概述.md","raw":"---\ntitle: 分布式事务seata(一)概述\ncatalog: true\ndate: 2020-12-04 09:22:51\nsubtitle: seata\nheader-img: \"/blog/img/header_img/404.png\"\ntags:\n- seata\n---\n## 分布式事务seata(一)概述\n### 一.seata是什么？\n    Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。\n\tSeata 提供了 AT、TCC、SAGA 和 XA 事务模式，打造一站式的分布式解决方案。\n\n### 二.分布式事务模型图\n![在这里插入图片描述](/blog/img/seata/seata1.png)\n\n    TC (Transaction Coordinator) - 事务协调者(seata-server)\n    维护全局和分支事务的状态，驱动全局事务提交或回滚。\n    \n    TM (Transaction Manager) - 事务管理器(全局事务管理)\n    定义全局事务的范围：开始全局事务、提交或回滚全局事务。\n    \n    RM (Resource Manager) - 资源管理器（本地/分支事务管理）\n    管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。\n\n### 三.分布式事务解决方案\n#### 1.AT模式\n    AT模式对业务无入侵，开发无感知，适用于不希望对业务进行改造的场景，会产生脏写。\n![在这里插入图片描述](/blog/img/seata/seata2.png)\n\n#### 2.TCC模式\n    TCC 模式需要自定义实现try,confirm,rollback逻辑,把自定义的分支事务纳入到全局事务的管理中，\n\t对业务侵入大，但效率高。适用于核心系统等对性能有很高要求的场景。\n![在这里插入图片描述](/blog/img/seata/seata3.png)\n\n#### 3.saga模式\n    长事务解决方案，适用于业务流程长且需要保证事务最终一致性的业务系统\n\t（第一阶段就操作DB，会存在脏读问题）\n#### 4.XA模式\n    分布式强一致性的解决方案，但性能低而使用较少。\n\n\n\n\n","slug":"分布式事务seata-一-概述","published":1,"updated":"2020-12-07T01:42:43.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmf000x98v53yrwtayk","content":"<h2 id=\"分布式事务seata一概述\">分布式事务seata(一)概述</h2>\n<h3 id=\"一seata是什么\">一.seata是什么？</h3>\n<pre><code>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。\nSeata 提供了 AT、TCC、SAGA 和 XA 事务模式，打造一站式的分布式解决方案。\n</code></pre>\n<h3 id=\"二分布式事务模型图\">二.分布式事务模型图</h3>\n<p><img src=\"/blog/img/seata/seata1.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>TC (Transaction Coordinator) - 事务协调者(seata-server)\n维护全局和分支事务的状态，驱动全局事务提交或回滚。\n\nTM (Transaction Manager) - 事务管理器(全局事务管理)\n定义全局事务的范围：开始全局事务、提交或回滚全局事务。\n\nRM (Resource Manager) - 资源管理器（本地/分支事务管理）\n管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。\n</code></pre>\n<h3 id=\"三分布式事务解决方案\">三.分布式事务解决方案</h3>\n<h4 id=\"1at模式\">1.AT模式</h4>\n<pre><code>AT模式对业务无入侵，开发无感知，适用于不希望对业务进行改造的场景，会产生脏写。\n</code></pre>\n<p><img src=\"/blog/img/seata/seata2.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"2tcc模式\">2.TCC模式</h4>\n<pre><code>TCC 模式需要自定义实现try,confirm,rollback逻辑,把自定义的分支事务纳入到全局事务的管理中，\n对业务侵入大，但效率高。适用于核心系统等对性能有很高要求的场景。\n</code></pre>\n<p><img src=\"/blog/img/seata/seata3.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"3saga模式\">3.saga模式</h4>\n<pre><code>长事务解决方案，适用于业务流程长且需要保证事务最终一致性的业务系统\n（第一阶段就操作DB，会存在脏读问题）\n</code></pre>\n<h4 id=\"4xa模式\">4.XA模式</h4>\n<pre><code>分布式强一致性的解决方案，但性能低而使用较少。\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2>分布式事务seata(一)概述</h2>\n<h3>一.seata是什么？</h3>\n<pre><code>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。\nSeata 提供了 AT、TCC、SAGA 和 XA 事务模式，打造一站式的分布式解决方案。\n</code></pre>\n<h3>二.分布式事务模型图</h3>\n<p><img src=\"/blog/img/seata/seata1.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>TC (Transaction Coordinator) - 事务协调者(seata-server)\n维护全局和分支事务的状态，驱动全局事务提交或回滚。\n\nTM (Transaction Manager) - 事务管理器(全局事务管理)\n定义全局事务的范围：开始全局事务、提交或回滚全局事务。\n\nRM (Resource Manager) - 资源管理器（本地/分支事务管理）\n管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。\n</code></pre>\n<h3>三.分布式事务解决方案</h3>\n<h4>1.AT模式</h4>\n<pre><code>AT模式对业务无入侵，开发无感知，适用于不希望对业务进行改造的场景，会产生脏写。\n</code></pre>\n<p><img src=\"/blog/img/seata/seata2.png\" alt=\"在这里插入图片描述\"></p>\n<h4>2.TCC模式</h4>\n<pre><code>TCC 模式需要自定义实现try,confirm,rollback逻辑,把自定义的分支事务纳入到全局事务的管理中，\n对业务侵入大，但效率高。适用于核心系统等对性能有很高要求的场景。\n</code></pre>\n<p><img src=\"/blog/img/seata/seata3.png\" alt=\"在这里插入图片描述\"></p>\n<h4>3.saga模式</h4>\n<pre><code>长事务解决方案，适用于业务流程长且需要保证事务最终一致性的业务系统\n（第一阶段就操作DB，会存在脏读问题）\n</code></pre>\n<h4>4.XA模式</h4>\n<pre><code>分布式强一致性的解决方案，但性能低而使用较少。\n</code></pre>\n"},{"title":"单点登录原理","catalog":true,"date":"2018-10-09T02:06:11.000Z","subtitle":"单点登录原理","header-img":"/blog/img/article_header/article_header.png","_content":"![在这里插入图片描述](/blog/img/all/sso.PNG)\n","source":"_posts/单点登录原理.md","raw":"---\ntitle: 单点登录原理\ncatalog: true\ndate: 2018-10-09 10:06:11\nsubtitle: \"单点登录原理\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n![在这里插入图片描述](/blog/img/all/sso.PNG)\n","slug":"单点登录原理","published":1,"updated":"2020-11-05T06:58:09.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmg000z98v566m0i208","content":"<p><img src=\"/blog/img/all/sso.PNG\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/blog/img/all/sso.PNG\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"吉他C大调和弦总结","catalog":true,"date":"2018-08-20T16:08:59.000Z","subtitle":"吉他C大调和弦总结","header-img":"/blog/img/article_header/article_header.png","_content":"## 一.C调常用和弦指法图\n###### C和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/c.png)\n```javascript\nC和弦是由C、E、G三个音叠置构成的大三和弦，是C大调中的I级主和弦。上图为常见的四种C和弦图表现形式。其中前三种指法一样，\n第四种有小指按6弦3品，在学习的过程中由于简化指法所以我们没有按6弦3品。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nC和弦的按法：\n简化指法时：食指按2弦1品、中指按4弦2品、无名指按5弦3品\n不简化指法时：食指按2弦1品、中指按4弦2品、无名指按6弦3品、小指按5弦3品\n```\n###### Dm和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/dm.png)\n```javascript\nDm和弦是由D、F、A三个音叠置构成的小三和弦，是C大调中的II级和弦。以上为常见的三种Dm和弦图。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nDm和弦按法：\n食指按1弦1品、中指按3弦2品、无名指按2弦3品\n```\n###### Em和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/em.png)\n```javascript\nEm和弦是由E、G、B三音叠置构成的小三和弦，是C大调中的III级和弦。以上为常见的三种Em和弦图。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nEm和弦的按法：\n中指按5弦2品，无名指按4弦2品。\n\n```\n###### F和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/f.png)\n```javascript\nF和弦是由F、A、C三音叠置构成的大三和弦，是C大调中的IV级下属和弦。上图中前三种是常见的F和弦图，\n第四种是简化了指法的F和弦图（不需要弹5、6弦时可以用简化的指法）。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\nF和弦是大横按和弦需要食指横按吉他六根弦，所以相对于其他C调常用和弦而言比较的难按。\n所以F和弦需要多花时间去练习。\n\nF和弦的按法：\n食指横按1弦-6弦1品、中指按3弦2品、无名指按4弦3品、小指按5弦3品\n简化指法时（如上图4）：食指小横按1弦-2弦1品、中指按3弦2品、无名指按4弦3品\n```\n###### G和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/g.png)\n```javascript\nG和弦是由G、B、D三音叠置构成的大三和弦，是C大调中的V级属和弦。以上为常见的三种G和弦图。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nG和弦的按法：\n按法1：食指按5弦2品、中指按6弦3品、无名指按1弦3品（如上图1指法图）\n按法2：中指按5弦2品、无名指按6弦3品、小指按1弦3品（如上图3指法图）\n以上两种按法都可以，至于用哪个按法好些可能因人而异，同时在实际弹奏中需要考虑转换至下一个和弦时哪种按法方便。\n```\n###### Am和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/am.png)\n```javascript\nAm和弦是由A、C、E三音叠置构成的小三和弦，是C大调中的VI级和弦。以上为常见的Am和弦图。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nAm和弦的按法：\n食指按2弦1品、中指按3弦2品、无名指按4弦2品\n\n```\n###### G7和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/g7.png)\n```javascript\nG7和弦是以大调中属音G为根音，由G、B、D、F四音叠置构成的七和弦，是C大调中的V级属七和弦。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nG7和弦的按法：\n食指按1弦1品、中指按5弦2品、无名指按6弦3品\n```\n## 二.什么是C大调\n```javascript\n首调唱名法：\n任何一个大调音阶，其第一个音到第八个音的依次间隔应该和C大调相同。我们唱起来应该感觉音程距离相同。\n只是音高有所不同。 无论什么大调，都依照C大调各音阶的唱名，将第一个音唱成Do,第二个音唱成Re...这种唱法称为“首调唱名法”。\nC大调（C Major），音乐术语，是一个于C音开始的音乐的自然大调，组成的音有C，D，E，F，G，A，B。\n是一个没有升号和降号的调。\nC大调特点：\nC大调是一个平稳，中庸的白色调性，如同山谷般的宁静和晴朗，较一般大调更为宁静、庄严。\nC大调经常被音乐家看成是回归自然、追求理性或展望未来。\n\n```\n## 三.吉他指板C大调音阶图\n![在这里插入图片描述](/blog/img/guitar/C/picture/c_list.png)\n\n","source":"_posts/吉他C大调和弦总结.md","raw":"---\ntitle: 吉他C大调和弦总结\ncatalog: true\ndate: 2018-08-21 00:08:59\nsubtitle: \"吉他C大调和弦总结\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- guitar\n---\n## 一.C调常用和弦指法图\n###### C和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/c.png)\n```javascript\nC和弦是由C、E、G三个音叠置构成的大三和弦，是C大调中的I级主和弦。上图为常见的四种C和弦图表现形式。其中前三种指法一样，\n第四种有小指按6弦3品，在学习的过程中由于简化指法所以我们没有按6弦3品。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nC和弦的按法：\n简化指法时：食指按2弦1品、中指按4弦2品、无名指按5弦3品\n不简化指法时：食指按2弦1品、中指按4弦2品、无名指按6弦3品、小指按5弦3品\n```\n###### Dm和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/dm.png)\n```javascript\nDm和弦是由D、F、A三个音叠置构成的小三和弦，是C大调中的II级和弦。以上为常见的三种Dm和弦图。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nDm和弦按法：\n食指按1弦1品、中指按3弦2品、无名指按2弦3品\n```\n###### Em和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/em.png)\n```javascript\nEm和弦是由E、G、B三音叠置构成的小三和弦，是C大调中的III级和弦。以上为常见的三种Em和弦图。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nEm和弦的按法：\n中指按5弦2品，无名指按4弦2品。\n\n```\n###### F和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/f.png)\n```javascript\nF和弦是由F、A、C三音叠置构成的大三和弦，是C大调中的IV级下属和弦。上图中前三种是常见的F和弦图，\n第四种是简化了指法的F和弦图（不需要弹5、6弦时可以用简化的指法）。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\nF和弦是大横按和弦需要食指横按吉他六根弦，所以相对于其他C调常用和弦而言比较的难按。\n所以F和弦需要多花时间去练习。\n\nF和弦的按法：\n食指横按1弦-6弦1品、中指按3弦2品、无名指按4弦3品、小指按5弦3品\n简化指法时（如上图4）：食指小横按1弦-2弦1品、中指按3弦2品、无名指按4弦3品\n```\n###### G和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/g.png)\n```javascript\nG和弦是由G、B、D三音叠置构成的大三和弦，是C大调中的V级属和弦。以上为常见的三种G和弦图。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nG和弦的按法：\n按法1：食指按5弦2品、中指按6弦3品、无名指按1弦3品（如上图1指法图）\n按法2：中指按5弦2品、无名指按6弦3品、小指按1弦3品（如上图3指法图）\n以上两种按法都可以，至于用哪个按法好些可能因人而异，同时在实际弹奏中需要考虑转换至下一个和弦时哪种按法方便。\n```\n###### Am和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/am.png)\n```javascript\nAm和弦是由A、C、E三音叠置构成的小三和弦，是C大调中的VI级和弦。以上为常见的Am和弦图。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nAm和弦的按法：\n食指按2弦1品、中指按3弦2品、无名指按4弦2品\n\n```\n###### G7和弦\n![在这里插入图片描述](/blog/img/guitar/C/picture/g7.png)\n```javascript\nG7和弦是以大调中属音G为根音，由G、B、D、F四音叠置构成的七和弦，是C大调中的V级属七和弦。\n和弦图中的数字1代表食指、2代表中指、3代表无名指、4代表小指，如果和弦图中有数字5或者字母T则代表大拇指。\n\nG7和弦的按法：\n食指按1弦1品、中指按5弦2品、无名指按6弦3品\n```\n## 二.什么是C大调\n```javascript\n首调唱名法：\n任何一个大调音阶，其第一个音到第八个音的依次间隔应该和C大调相同。我们唱起来应该感觉音程距离相同。\n只是音高有所不同。 无论什么大调，都依照C大调各音阶的唱名，将第一个音唱成Do,第二个音唱成Re...这种唱法称为“首调唱名法”。\nC大调（C Major），音乐术语，是一个于C音开始的音乐的自然大调，组成的音有C，D，E，F，G，A，B。\n是一个没有升号和降号的调。\nC大调特点：\nC大调是一个平稳，中庸的白色调性，如同山谷般的宁静和晴朗，较一般大调更为宁静、庄严。\nC大调经常被音乐家看成是回归自然、追求理性或展望未来。\n\n```\n## 三.吉他指板C大调音阶图\n![在这里插入图片描述](/blog/img/guitar/C/picture/c_list.png)\n\n","slug":"吉他C大调和弦总结","published":1,"updated":"2020-11-05T06:58:09.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmi001298v5ls8l86cn","content":"<h2 id=\"一c调常用和弦指法图\">一.C调常用和弦指法图</h2>\n<h6 id=\"c和弦\">C和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/c.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C和弦是由C、E、G三个音叠置构成的大三和弦，是C大调中的I级主和弦。上图为常见的四种C和弦图表现形式。其中前三种指法一样，</span><br><span class=\"line\">第四种有小指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品，在学习的过程中由于简化指法所以我们没有按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">C和弦的按法：</span><br><span class=\"line\">简化指法时：食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\">不简化指法时：食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、小指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"dm和弦\">Dm和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/dm.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dm和弦是由D、F、A三个音叠置构成的小三和弦，是C大调中的II级和弦。以上为常见的三种Dm和弦图。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">Dm和弦按法：</span><br><span class=\"line\">食指按<span class=\"number\">1</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"em和弦\">Em和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/em.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Em和弦是由E、G、B三音叠置构成的小三和弦，是C大调中的III级和弦。以上为常见的三种Em和弦图。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">Em和弦的按法：</span><br><span class=\"line\">中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品，无名指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"f和弦\">F和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/f.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F和弦是由F、A、C三音叠置构成的大三和弦，是C大调中的IV级下属和弦。上图中前三种是常见的F和弦图，</span><br><span class=\"line\">第四种是简化了指法的F和弦图（不需要弹<span class=\"number\">5</span>、<span class=\"number\">6</span>弦时可以用简化的指法）。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\">F和弦是大横按和弦需要食指横按吉他六根弦，所以相对于其他C调常用和弦而言比较的难按。</span><br><span class=\"line\">所以F和弦需要多花时间去练习。</span><br><span class=\"line\"></span><br><span class=\"line\">F和弦的按法：</span><br><span class=\"line\">食指横按<span class=\"number\">1</span>弦<span class=\"number\">-6</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">4</span>弦<span class=\"number\">3</span>品、小指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\">简化指法时（如上图<span class=\"number\">4</span>）：食指小横按<span class=\"number\">1</span>弦<span class=\"number\">-2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">4</span>弦<span class=\"number\">3</span>品</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"g和弦\">G和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/g.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G和弦是由G、B、D三音叠置构成的大三和弦，是C大调中的V级属和弦。以上为常见的三种G和弦图。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">G和弦的按法：</span><br><span class=\"line\">按法<span class=\"number\">1</span>：食指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、无名指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品（如上图<span class=\"number\">1</span>指法图）</span><br><span class=\"line\">按法<span class=\"number\">2</span>：中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、小指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品（如上图<span class=\"number\">3</span>指法图）</span><br><span class=\"line\">以上两种按法都可以，至于用哪个按法好些可能因人而异，同时在实际弹奏中需要考虑转换至下一个和弦时哪种按法方便。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"am和弦\">Am和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/am.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Am和弦是由A、C、E三音叠置构成的小三和弦，是C大调中的VI级和弦。以上为常见的Am和弦图。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">Am和弦的按法：</span><br><span class=\"line\">食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"g7和弦\">G7和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/g7.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G7和弦是以大调中属音G为根音，由G、B、D、F四音叠置构成的七和弦，是C大调中的V级属七和弦。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">G7和弦的按法：</span><br><span class=\"line\">食指按<span class=\"number\">1</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二什么是c大调\">二.什么是C大调</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首调唱名法：</span><br><span class=\"line\">任何一个大调音阶，其第一个音到第八个音的依次间隔应该和C大调相同。我们唱起来应该感觉音程距离相同。</span><br><span class=\"line\">只是音高有所不同。 无论什么大调，都依照C大调各音阶的唱名，将第一个音唱成Do,第二个音唱成Re...这种唱法称为“首调唱名法”。</span><br><span class=\"line\">C大调（C Major），音乐术语，是一个于C音开始的音乐的自然大调，组成的音有C，D，E，F，G，A，B。</span><br><span class=\"line\">是一个没有升号和降号的调。</span><br><span class=\"line\">C大调特点：</span><br><span class=\"line\">C大调是一个平稳，中庸的白色调性，如同山谷般的宁静和晴朗，较一般大调更为宁静、庄严。</span><br><span class=\"line\">C大调经常被音乐家看成是回归自然、追求理性或展望未来。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三吉他指板c大调音阶图\">三.吉他指板C大调音阶图</h2>\n<p><img src=\"/blog/img/guitar/C/picture/c_list.png\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>一.C调常用和弦指法图</h2>\n<h6>C和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/c.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C和弦是由C、E、G三个音叠置构成的大三和弦，是C大调中的I级主和弦。上图为常见的四种C和弦图表现形式。其中前三种指法一样，</span><br><span class=\"line\">第四种有小指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品，在学习的过程中由于简化指法所以我们没有按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">C和弦的按法：</span><br><span class=\"line\">简化指法时：食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\">不简化指法时：食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、小指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品</span><br></pre></td></tr></table></figure></p>\n<h6>Dm和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/dm.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dm和弦是由D、F、A三个音叠置构成的小三和弦，是C大调中的II级和弦。以上为常见的三种Dm和弦图。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">Dm和弦按法：</span><br><span class=\"line\">食指按<span class=\"number\">1</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品</span><br></pre></td></tr></table></figure></p>\n<h6>Em和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/em.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Em和弦是由E、G、B三音叠置构成的小三和弦，是C大调中的III级和弦。以上为常见的三种Em和弦图。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">Em和弦的按法：</span><br><span class=\"line\">中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品，无名指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品。</span><br></pre></td></tr></table></figure></p>\n<h6>F和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/f.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F和弦是由F、A、C三音叠置构成的大三和弦，是C大调中的IV级下属和弦。上图中前三种是常见的F和弦图，</span><br><span class=\"line\">第四种是简化了指法的F和弦图（不需要弹<span class=\"number\">5</span>、<span class=\"number\">6</span>弦时可以用简化的指法）。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\">F和弦是大横按和弦需要食指横按吉他六根弦，所以相对于其他C调常用和弦而言比较的难按。</span><br><span class=\"line\">所以F和弦需要多花时间去练习。</span><br><span class=\"line\"></span><br><span class=\"line\">F和弦的按法：</span><br><span class=\"line\">食指横按<span class=\"number\">1</span>弦<span class=\"number\">-6</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">4</span>弦<span class=\"number\">3</span>品、小指按<span class=\"number\">5</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\">简化指法时（如上图<span class=\"number\">4</span>）：食指小横按<span class=\"number\">1</span>弦<span class=\"number\">-2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">4</span>弦<span class=\"number\">3</span>品</span><br></pre></td></tr></table></figure></p>\n<h6>G和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/g.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G和弦是由G、B、D三音叠置构成的大三和弦，是C大调中的V级属和弦。以上为常见的三种G和弦图。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">G和弦的按法：</span><br><span class=\"line\">按法<span class=\"number\">1</span>：食指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、无名指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品（如上图<span class=\"number\">1</span>指法图）</span><br><span class=\"line\">按法<span class=\"number\">2</span>：中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、小指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品（如上图<span class=\"number\">3</span>指法图）</span><br><span class=\"line\">以上两种按法都可以，至于用哪个按法好些可能因人而异，同时在实际弹奏中需要考虑转换至下一个和弦时哪种按法方便。</span><br></pre></td></tr></table></figure></p>\n<h6>Am和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/am.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Am和弦是由A、C、E三音叠置构成的小三和弦，是C大调中的VI级和弦。以上为常见的Am和弦图。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">Am和弦的按法：</span><br><span class=\"line\">食指按<span class=\"number\">2</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品</span><br></pre></td></tr></table></figure></p>\n<h6>G7和弦</h6>\n<p><img src=\"/blog/img/guitar/C/picture/g7.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G7和弦是以大调中属音G为根音，由G、B、D、F四音叠置构成的七和弦，是C大调中的V级属七和弦。</span><br><span class=\"line\">和弦图中的数字<span class=\"number\">1</span>代表食指、<span class=\"number\">2</span>代表中指、<span class=\"number\">3</span>代表无名指、<span class=\"number\">4</span>代表小指，如果和弦图中有数字<span class=\"number\">5</span>或者字母T则代表大拇指。</span><br><span class=\"line\"></span><br><span class=\"line\">G7和弦的按法：</span><br><span class=\"line\">食指按<span class=\"number\">1</span>弦<span class=\"number\">1</span>品、中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品</span><br></pre></td></tr></table></figure></p>\n<h2>二.什么是C大调</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首调唱名法：</span><br><span class=\"line\">任何一个大调音阶，其第一个音到第八个音的依次间隔应该和C大调相同。我们唱起来应该感觉音程距离相同。</span><br><span class=\"line\">只是音高有所不同。 无论什么大调，都依照C大调各音阶的唱名，将第一个音唱成Do,第二个音唱成Re...这种唱法称为“首调唱名法”。</span><br><span class=\"line\">C大调（C Major），音乐术语，是一个于C音开始的音乐的自然大调，组成的音有C，D，E，F，G，A，B。</span><br><span class=\"line\">是一个没有升号和降号的调。</span><br><span class=\"line\">C大调特点：</span><br><span class=\"line\">C大调是一个平稳，中庸的白色调性，如同山谷般的宁静和晴朗，较一般大调更为宁静、庄严。</span><br><span class=\"line\">C大调经常被音乐家看成是回归自然、追求理性或展望未来。</span><br></pre></td></tr></table></figure></p>\n<h2>三.吉他指板C大调音阶图</h2>\n<p><img src=\"/blog/img/guitar/C/picture/c_list.png\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"吉他D大调和弦总结","catalog":true,"date":"2018-08-19T14:44:34.000Z","subtitle":"吉他D大调和弦总结","header-img":"/blog/img/article_header/article_header.png","_content":"## 一 .D调常用和弦指法图常用和弦指法图大全\n#####       Em和弦\n![avatar](/blog/img/guitar/D/picture/em.png)\n```javascript\nEm和弦的按法：2—中指按5弦2品、3—无名指按4弦2品。按弦指法仅供参考，Em和弦属于比较容易掌握的和弦\n在实际弹奏中大家可以按照自己的习惯去按，主要是方便下一个和弦的转换，因为在吉他弹奏中和弦转换是弹好吉他的必要条件。\n```\n#####    A7和弦\n![avatar](/blog/img/guitar/D/picture/a7.png)\n```javascript\nA7和弦按法\nA7和弦比较容易按，中指按4弦2品、无名指按2弦2品，换一种按法食指按4弦2品、中指按2弦2品，\n至于在实际弹奏中怎么按一般只要哪种按法方便下一个和弦转换就可以。\n```\n######  Bm和弦\n![avatar](/blog/img/guitar/D/picture/bm.png)\n```javascript\nBm和弦按法\n6弦为和弦外音，一般弹奏中不要弹奏。食指横按2品、中指按2弦3品、无名指按3弦4品、小指按4弦4品。\nBm和弦也是大横按和弦不过F和弦稍微要容易点。\n```\n\n######  A和弦\n![avatar](/blog/img/guitar/D/picture/a.png)\n```javascript\nA和弦按法\n6弦为和弦外音，食指按4弦2品、中指按3弦2品、无名指按2弦2品。\nA和弦可能对于手指比较粗的朋友不是那么好按，不过反复练习即可找到适合的按法。\n```\n###### #Fm和弦\n![avatar](/blog/img/guitar/D/picture/fm.png)\n```javascript\n#Fm和弦按法\n食指横按2品、中指按4弦4品\nGuitr pro中的按法即上图1：食指横按1、2、3弦2品、拇指按6弦2品然后无名指按4弦4品。上图1中T表示大拇指，一般我们用第一种按法好。\n```\n###### D和弦\n![avatar](/blog/img/guitar/D/picture/d.png)\n```javascript\nD和弦中5弦、6弦为和弦外音在一般弹奏中如果没有用到和弦外音5、6弦是不要弹的。\nD和弦按法：\n食指按3弦2品、中指按1弦2品、无名指按2弦3品。\n图1中的按法是食指横按1、3弦2品、中指按2弦3品，这种按法的和弦图一般是在Guitr pro中。\n```\n###### G和弦\n![avatar](/blog/img/guitar/D/picture/g.png)\n```javascript\nG和弦为C、D调常用和弦，以上三个G和弦和弦图，图1、3左手按弦指法稍有差别。\nG和弦按法：\n1、1—食指按5弦2品、2—中指按6弦3品、3—无名指按1弦3品\n2、2—中指按5弦2品、3—无名指按6弦3品、4—小指按1弦3品\n两种按法都可以，只要方便下一个和弦的转换即可。\n```\n\n## 二.D大调是怎么形成的\n![avatar](/blog/img/guitar/D/picture/whatIsD.png)\n```javascript\n自然大调音阶由七个音符组成，在唱名中分别是Do、Re、Mi、Fa、Sol、La、Si（1234567）。\n最简单的C大调音名是这样排列的，C D E F G A B C，1=C，以C为主音，按照“全全半全全全半”的关系排列形成的。\nE-F和B-C之间是半音，D大调就以D为主音1=D，以D为第一个音排列，D E #F G A B #C D，\n看到有两个音符是有升号的，要满足大调式“全全半全全全半”的规律排列必需要使用升号。看上图\n\n```\n## 三.吉他指板D大调音阶图\n![avatar](/blog/img/guitar/D/picture/d_list.png)\n","source":"_posts/吉他D大调和弦总结.md","raw":"---\ntitle: 吉他D大调和弦总结\ncatalog: true\ndate: 2018-08-19 22:44:34\nsubtitle: \"吉他D大调和弦总结\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- guitar\n---\n## 一 .D调常用和弦指法图常用和弦指法图大全\n#####       Em和弦\n![avatar](/blog/img/guitar/D/picture/em.png)\n```javascript\nEm和弦的按法：2—中指按5弦2品、3—无名指按4弦2品。按弦指法仅供参考，Em和弦属于比较容易掌握的和弦\n在实际弹奏中大家可以按照自己的习惯去按，主要是方便下一个和弦的转换，因为在吉他弹奏中和弦转换是弹好吉他的必要条件。\n```\n#####    A7和弦\n![avatar](/blog/img/guitar/D/picture/a7.png)\n```javascript\nA7和弦按法\nA7和弦比较容易按，中指按4弦2品、无名指按2弦2品，换一种按法食指按4弦2品、中指按2弦2品，\n至于在实际弹奏中怎么按一般只要哪种按法方便下一个和弦转换就可以。\n```\n######  Bm和弦\n![avatar](/blog/img/guitar/D/picture/bm.png)\n```javascript\nBm和弦按法\n6弦为和弦外音，一般弹奏中不要弹奏。食指横按2品、中指按2弦3品、无名指按3弦4品、小指按4弦4品。\nBm和弦也是大横按和弦不过F和弦稍微要容易点。\n```\n\n######  A和弦\n![avatar](/blog/img/guitar/D/picture/a.png)\n```javascript\nA和弦按法\n6弦为和弦外音，食指按4弦2品、中指按3弦2品、无名指按2弦2品。\nA和弦可能对于手指比较粗的朋友不是那么好按，不过反复练习即可找到适合的按法。\n```\n###### #Fm和弦\n![avatar](/blog/img/guitar/D/picture/fm.png)\n```javascript\n#Fm和弦按法\n食指横按2品、中指按4弦4品\nGuitr pro中的按法即上图1：食指横按1、2、3弦2品、拇指按6弦2品然后无名指按4弦4品。上图1中T表示大拇指，一般我们用第一种按法好。\n```\n###### D和弦\n![avatar](/blog/img/guitar/D/picture/d.png)\n```javascript\nD和弦中5弦、6弦为和弦外音在一般弹奏中如果没有用到和弦外音5、6弦是不要弹的。\nD和弦按法：\n食指按3弦2品、中指按1弦2品、无名指按2弦3品。\n图1中的按法是食指横按1、3弦2品、中指按2弦3品，这种按法的和弦图一般是在Guitr pro中。\n```\n###### G和弦\n![avatar](/blog/img/guitar/D/picture/g.png)\n```javascript\nG和弦为C、D调常用和弦，以上三个G和弦和弦图，图1、3左手按弦指法稍有差别。\nG和弦按法：\n1、1—食指按5弦2品、2—中指按6弦3品、3—无名指按1弦3品\n2、2—中指按5弦2品、3—无名指按6弦3品、4—小指按1弦3品\n两种按法都可以，只要方便下一个和弦的转换即可。\n```\n\n## 二.D大调是怎么形成的\n![avatar](/blog/img/guitar/D/picture/whatIsD.png)\n```javascript\n自然大调音阶由七个音符组成，在唱名中分别是Do、Re、Mi、Fa、Sol、La、Si（1234567）。\n最简单的C大调音名是这样排列的，C D E F G A B C，1=C，以C为主音，按照“全全半全全全半”的关系排列形成的。\nE-F和B-C之间是半音，D大调就以D为主音1=D，以D为第一个音排列，D E #F G A B #C D，\n看到有两个音符是有升号的，要满足大调式“全全半全全全半”的规律排列必需要使用升号。看上图\n\n```\n## 三.吉他指板D大调音阶图\n![avatar](/blog/img/guitar/D/picture/d_list.png)\n","slug":"吉他D大调和弦总结","published":1,"updated":"2020-11-05T06:58:09.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmj001498v550kno04w","content":"<h2 id=\"一-d调常用和弦指法图常用和弦指法图大全\">一 .D调常用和弦指法图常用和弦指法图大全</h2>\n<h5 id=\"em和弦\">Em和弦</h5>\n<p><img src=\"/blog/img/guitar/D/picture/em.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Em和弦的按法：<span class=\"number\">2</span>—中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品。按弦指法仅供参考，Em和弦属于比较容易掌握的和弦</span><br><span class=\"line\">在实际弹奏中大家可以按照自己的习惯去按，主要是方便下一个和弦的转换，因为在吉他弹奏中和弦转换是弹好吉他的必要条件。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"a7和弦\">A7和弦</h5>\n<p><img src=\"/blog/img/guitar/D/picture/a7.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A7和弦按法</span><br><span class=\"line\">A7和弦比较容易按，中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">2</span>品，换一种按法食指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">2</span>品，</span><br><span class=\"line\">至于在实际弹奏中怎么按一般只要哪种按法方便下一个和弦转换就可以。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"bm和弦\">Bm和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/bm.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bm和弦按法</span><br><span class=\"line\"><span class=\"number\">6</span>弦为和弦外音，一般弹奏中不要弹奏。食指横按<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品、无名指按<span class=\"number\">3</span>弦<span class=\"number\">4</span>品、小指按<span class=\"number\">4</span>弦<span class=\"number\">4</span>品。</span><br><span class=\"line\">Bm和弦也是大横按和弦不过F和弦稍微要容易点。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"a和弦\">A和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/a.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A和弦按法</span><br><span class=\"line\"><span class=\"number\">6</span>弦为和弦外音，食指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">2</span>品。</span><br><span class=\"line\">A和弦可能对于手指比较粗的朋友不是那么好按，不过反复练习即可找到适合的按法。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"fm和弦\">#Fm和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/fm.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Fm和弦按法</span><br><span class=\"line\">食指横按<span class=\"number\">2</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">4</span>品</span><br><span class=\"line\">Guitr pro中的按法即上图<span class=\"number\">1</span>：食指横按<span class=\"number\">1</span>、<span class=\"number\">2</span>、<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、拇指按<span class=\"number\">6</span>弦<span class=\"number\">2</span>品然后无名指按<span class=\"number\">4</span>弦<span class=\"number\">4</span>品。上图<span class=\"number\">1</span>中T表示大拇指，一般我们用第一种按法好。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"d和弦\">D和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/d.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D和弦中<span class=\"number\">5</span>弦、<span class=\"number\">6</span>弦为和弦外音在一般弹奏中如果没有用到和弦外音<span class=\"number\">5</span>、<span class=\"number\">6</span>弦是不要弹的。</span><br><span class=\"line\">D和弦按法：</span><br><span class=\"line\">食指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">1</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">图<span class=\"number\">1</span>中的按法是食指横按<span class=\"number\">1</span>、<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品，这种按法的和弦图一般是在Guitr pro中。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"g和弦\">G和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/g.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G和弦为C、D调常用和弦，以上三个G和弦和弦图，图<span class=\"number\">1</span>、<span class=\"number\">3</span>左手按弦指法稍有差别。</span><br><span class=\"line\">G和弦按法：</span><br><span class=\"line\"><span class=\"number\">1</span>、<span class=\"number\">1</span>—食指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">2</span>—中指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\"><span class=\"number\">2</span>、<span class=\"number\">2</span>—中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、<span class=\"number\">4</span>—小指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\">两种按法都可以，只要方便下一个和弦的转换即可。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二d大调是怎么形成的\">二.D大调是怎么形成的</h2>\n<p><img src=\"/blog/img/guitar/D/picture/whatIsD.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自然大调音阶由七个音符组成，在唱名中分别是Do、Re、Mi、Fa、Sol、La、Si（<span class=\"number\">1234567</span>）。</span><br><span class=\"line\">最简单的C大调音名是这样排列的，C D E F G A B C，<span class=\"number\">1</span>=C，以C为主音，按照“全全半全全全半”的关系排列形成的。</span><br><span class=\"line\">E-F和B-C之间是半音，D大调就以D为主音1=D，以D为第一个音排列，D E #F G A B #C D，</span><br><span class=\"line\">看到有两个音符是有升号的，要满足大调式“全全半全全全半”的规律排列必需要使用升号。看上图</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三吉他指板d大调音阶图\">三.吉他指板D大调音阶图</h2>\n<p><img src=\"/blog/img/guitar/D/picture/d_list.png\" alt=\"avatar\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>一 .D调常用和弦指法图常用和弦指法图大全</h2>\n<h5>Em和弦</h5>\n<p><img src=\"/blog/img/guitar/D/picture/em.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Em和弦的按法：<span class=\"number\">2</span>—中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品。按弦指法仅供参考，Em和弦属于比较容易掌握的和弦</span><br><span class=\"line\">在实际弹奏中大家可以按照自己的习惯去按，主要是方便下一个和弦的转换，因为在吉他弹奏中和弦转换是弹好吉他的必要条件。</span><br></pre></td></tr></table></figure></p>\n<h5>A7和弦</h5>\n<p><img src=\"/blog/img/guitar/D/picture/a7.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A7和弦按法</span><br><span class=\"line\">A7和弦比较容易按，中指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">2</span>品，换一种按法食指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">2</span>品，</span><br><span class=\"line\">至于在实际弹奏中怎么按一般只要哪种按法方便下一个和弦转换就可以。</span><br></pre></td></tr></table></figure></p>\n<h6>Bm和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/bm.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bm和弦按法</span><br><span class=\"line\"><span class=\"number\">6</span>弦为和弦外音，一般弹奏中不要弹奏。食指横按<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品、无名指按<span class=\"number\">3</span>弦<span class=\"number\">4</span>品、小指按<span class=\"number\">4</span>弦<span class=\"number\">4</span>品。</span><br><span class=\"line\">Bm和弦也是大横按和弦不过F和弦稍微要容易点。</span><br></pre></td></tr></table></figure></p>\n<h6>A和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/a.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A和弦按法</span><br><span class=\"line\"><span class=\"number\">6</span>弦为和弦外音，食指按<span class=\"number\">4</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">2</span>品。</span><br><span class=\"line\">A和弦可能对于手指比较粗的朋友不是那么好按，不过反复练习即可找到适合的按法。</span><br></pre></td></tr></table></figure></p>\n<h6>#Fm和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/fm.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Fm和弦按法</span><br><span class=\"line\">食指横按<span class=\"number\">2</span>品、中指按<span class=\"number\">4</span>弦<span class=\"number\">4</span>品</span><br><span class=\"line\">Guitr pro中的按法即上图<span class=\"number\">1</span>：食指横按<span class=\"number\">1</span>、<span class=\"number\">2</span>、<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、拇指按<span class=\"number\">6</span>弦<span class=\"number\">2</span>品然后无名指按<span class=\"number\">4</span>弦<span class=\"number\">4</span>品。上图<span class=\"number\">1</span>中T表示大拇指，一般我们用第一种按法好。</span><br></pre></td></tr></table></figure></p>\n<h6>D和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/d.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D和弦中<span class=\"number\">5</span>弦、<span class=\"number\">6</span>弦为和弦外音在一般弹奏中如果没有用到和弦外音<span class=\"number\">5</span>、<span class=\"number\">6</span>弦是不要弹的。</span><br><span class=\"line\">D和弦按法：</span><br><span class=\"line\">食指按<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">1</span>弦<span class=\"number\">2</span>品、无名指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品。</span><br><span class=\"line\">图<span class=\"number\">1</span>中的按法是食指横按<span class=\"number\">1</span>、<span class=\"number\">3</span>弦<span class=\"number\">2</span>品、中指按<span class=\"number\">2</span>弦<span class=\"number\">3</span>品，这种按法的和弦图一般是在Guitr pro中。</span><br></pre></td></tr></table></figure></p>\n<h6>G和弦</h6>\n<p><img src=\"/blog/img/guitar/D/picture/g.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G和弦为C、D调常用和弦，以上三个G和弦和弦图，图<span class=\"number\">1</span>、<span class=\"number\">3</span>左手按弦指法稍有差别。</span><br><span class=\"line\">G和弦按法：</span><br><span class=\"line\"><span class=\"number\">1</span>、<span class=\"number\">1</span>—食指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">2</span>—中指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\"><span class=\"number\">2</span>、<span class=\"number\">2</span>—中指按<span class=\"number\">5</span>弦<span class=\"number\">2</span>品、<span class=\"number\">3</span>—无名指按<span class=\"number\">6</span>弦<span class=\"number\">3</span>品、<span class=\"number\">4</span>—小指按<span class=\"number\">1</span>弦<span class=\"number\">3</span>品</span><br><span class=\"line\">两种按法都可以，只要方便下一个和弦的转换即可。</span><br></pre></td></tr></table></figure></p>\n<h2>二.D大调是怎么形成的</h2>\n<p><img src=\"/blog/img/guitar/D/picture/whatIsD.png\" alt=\"avatar\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自然大调音阶由七个音符组成，在唱名中分别是Do、Re、Mi、Fa、Sol、La、Si（<span class=\"number\">1234567</span>）。</span><br><span class=\"line\">最简单的C大调音名是这样排列的，C D E F G A B C，<span class=\"number\">1</span>=C，以C为主音，按照“全全半全全全半”的关系排列形成的。</span><br><span class=\"line\">E-F和B-C之间是半音，D大调就以D为主音1=D，以D为第一个音排列，D E #F G A B #C D，</span><br><span class=\"line\">看到有两个音符是有升号的，要满足大调式“全全半全全全半”的规律排列必需要使用升号。看上图</span><br></pre></td></tr></table></figure></p>\n<h2>三.吉他指板D大调音阶图</h2>\n<p><img src=\"/blog/img/guitar/D/picture/d_list.png\" alt=\"avatar\"></p>\n"},{"title":"吉他大横按的学习技巧总结","catalog":true,"date":"2018-08-27T16:20:58.000Z","subtitle":"吉他大横按的学习技巧总结","header-img":"/blog/img/article_header/article_header.png","_content":"## 一.什么是大横按？\n```javascript\n\n封闭和弦（Barre Chords）是吉他的专有名词，并非真的有这种和弦。\n封闭和弦是吉他初学者的最大障碍，因为封闭和弦是1根手指要「同时封住」6条弦，会有一定的难度 。\n小横按就是食指或者中指或者无名指按住2-5根弦的和弦，\n而大横按就是要「同时封住」6条弦，大横按是和弦里面最难的和弦。\n大横按和小横按不一样。小横按主要靠前部的肌肉就够了。大横按为了按的结实要靠前，和左侧的肌肉共同力量。\n```\n##  二.大横按练习技巧\n###### 夹住琴颈\n![在这里插入图片描述](/blog/img/guitar/hengan/qinjing_1.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/qinjing_2.jpg)\n```javascript\n封闭和弦是以食指跟大拇指”夹住“琴颈的手感，而非开放和弦是”握住“琴颈。\n\n```\n###### 食指位置\n![在这里插入图片描述](/blog/img/guitar/hengan/sizhi_1.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/sizhi_2.jpg)\n```javascript\n试试”食指伸直“用食指稍微靠近虎口”约呈45度“的那一面来压弦。\n\n```\n###### 大拇指位置\n```javascript\n大拇指放在食指“正后方”，可以上下左右的微调，多尝试不同的角度，找出最适合你的位置，压好以后就要记住手感。\n```\n###### 中指、小指位置\n```javascript\n中指大略垂直，无名指、小指要立起来，不要去碰触到其他弦。\n```\n###### 每根手指要尽量靠近琴衍\n![在这里插入图片描述](/blog/img/guitar/hengan/qinyan_1.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/qinyan_2.jpg)\n```javascript\n不管压什么和弦，手指尽量靠近琴衍\n```\n###### 手指叠罗汉\n![在这里插入图片描述](/blog/img/guitar/hengan/dlh_1.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/dlh_2.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/dlh_3.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/dlh_4.jpg)\n```javascript\n采用手指叠罗汉的方式，加强压弦的力道，等手指慢慢适应后，一根一根放开，直到练到单靠食指可以完全封紧。\n手指全按、放开小指、放开无名指与小指剩下食指压弦。\n```\n###### 从第3~5格开始练\n```javascript\n如果弦距设定没有做好，第1格会最难压，可以先从从第3~5格开始练，比较不会有挫折感。\n```\n\n###### 食指最后压\n![在这里插入图片描述](/blog/img/guitar/hengan/sizhi_3.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/sizhi_4.jpg)\n```javascript\n这样就可以知道没有压到的弦还剩下几根，心理压力比较不会这么大。例如：F，食指只要把注意力集中在没压到的1、2、6弦就好。\n```\n###### 吉他竖起来压弦\n```javascript\n这可以让手指用最自然的姿势去压弦，等到练熟，在转回正常弹吉他姿势\n```\n###### 每一格都试试看\n![在这里插入图片描述](/blog/img/guitar/hengan/ss.jpg)\n```javascript\n慢慢适应封闭和弦之后，可以从第1格开始，练到第10格，在从第10格，练到第1格，每一格都试试看，每一个音都清楚扎实。去回算一趟，每天习个几趟，手酸就要休息，不要硬撑。\n```\n\n###### 开放与封闭之间的转换\n```javascript\n开放和弦－＞封闭和弦的转换，也要OK才行喔，不能只练封闭和弦\n\n封闭和弦－＞封闭和弦的转换，有遇到的话，一样要练熟\n```\n","source":"_posts/吉他大横按的学习技巧总结.md","raw":"---\ntitle: 吉他大横按的学习技巧总结\ncatalog: true\ndate: 2018-08-28 00:20:58\nsubtitle: \"吉他大横按的学习技巧总结\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- guitar\n---\n## 一.什么是大横按？\n```javascript\n\n封闭和弦（Barre Chords）是吉他的专有名词，并非真的有这种和弦。\n封闭和弦是吉他初学者的最大障碍，因为封闭和弦是1根手指要「同时封住」6条弦，会有一定的难度 。\n小横按就是食指或者中指或者无名指按住2-5根弦的和弦，\n而大横按就是要「同时封住」6条弦，大横按是和弦里面最难的和弦。\n大横按和小横按不一样。小横按主要靠前部的肌肉就够了。大横按为了按的结实要靠前，和左侧的肌肉共同力量。\n```\n##  二.大横按练习技巧\n###### 夹住琴颈\n![在这里插入图片描述](/blog/img/guitar/hengan/qinjing_1.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/qinjing_2.jpg)\n```javascript\n封闭和弦是以食指跟大拇指”夹住“琴颈的手感，而非开放和弦是”握住“琴颈。\n\n```\n###### 食指位置\n![在这里插入图片描述](/blog/img/guitar/hengan/sizhi_1.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/sizhi_2.jpg)\n```javascript\n试试”食指伸直“用食指稍微靠近虎口”约呈45度“的那一面来压弦。\n\n```\n###### 大拇指位置\n```javascript\n大拇指放在食指“正后方”，可以上下左右的微调，多尝试不同的角度，找出最适合你的位置，压好以后就要记住手感。\n```\n###### 中指、小指位置\n```javascript\n中指大略垂直，无名指、小指要立起来，不要去碰触到其他弦。\n```\n###### 每根手指要尽量靠近琴衍\n![在这里插入图片描述](/blog/img/guitar/hengan/qinyan_1.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/qinyan_2.jpg)\n```javascript\n不管压什么和弦，手指尽量靠近琴衍\n```\n###### 手指叠罗汉\n![在这里插入图片描述](/blog/img/guitar/hengan/dlh_1.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/dlh_2.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/dlh_3.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/dlh_4.jpg)\n```javascript\n采用手指叠罗汉的方式，加强压弦的力道，等手指慢慢适应后，一根一根放开，直到练到单靠食指可以完全封紧。\n手指全按、放开小指、放开无名指与小指剩下食指压弦。\n```\n###### 从第3~5格开始练\n```javascript\n如果弦距设定没有做好，第1格会最难压，可以先从从第3~5格开始练，比较不会有挫折感。\n```\n\n###### 食指最后压\n![在这里插入图片描述](/blog/img/guitar/hengan/sizhi_3.jpg)\n![在这里插入图片描述](/blog/img/guitar/hengan/sizhi_4.jpg)\n```javascript\n这样就可以知道没有压到的弦还剩下几根，心理压力比较不会这么大。例如：F，食指只要把注意力集中在没压到的1、2、6弦就好。\n```\n###### 吉他竖起来压弦\n```javascript\n这可以让手指用最自然的姿势去压弦，等到练熟，在转回正常弹吉他姿势\n```\n###### 每一格都试试看\n![在这里插入图片描述](/blog/img/guitar/hengan/ss.jpg)\n```javascript\n慢慢适应封闭和弦之后，可以从第1格开始，练到第10格，在从第10格，练到第1格，每一格都试试看，每一个音都清楚扎实。去回算一趟，每天习个几趟，手酸就要休息，不要硬撑。\n```\n\n###### 开放与封闭之间的转换\n```javascript\n开放和弦－＞封闭和弦的转换，也要OK才行喔，不能只练封闭和弦\n\n封闭和弦－＞封闭和弦的转换，有遇到的话，一样要练熟\n```\n","slug":"吉他大横按的学习技巧总结","published":1,"updated":"2020-11-05T06:58:09.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmk001698v5cabj2xo4","content":"<h2 id=\"一什么是大横按\">一.什么是大横按？</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">封闭和弦（Barre Chords）是吉他的专有名词，并非真的有这种和弦。</span><br><span class=\"line\">封闭和弦是吉他初学者的最大障碍，因为封闭和弦是<span class=\"number\">1</span>根手指要「同时封住」<span class=\"number\">6</span>条弦，会有一定的难度 。</span><br><span class=\"line\">小横按就是食指或者中指或者无名指按住<span class=\"number\">2</span><span class=\"number\">-5</span>根弦的和弦，</span><br><span class=\"line\">而大横按就是要「同时封住」<span class=\"number\">6</span>条弦，大横按是和弦里面最难的和弦。</span><br><span class=\"line\">大横按和小横按不一样。小横按主要靠前部的肌肉就够了。大横按为了按的结实要靠前，和左侧的肌肉共同力量。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二大横按练习技巧\">二.大横按练习技巧</h2>\n<h6 id=\"夹住琴颈\">夹住琴颈</h6>\n<p><img src=\"/blog/img/guitar/hengan/qinjing_1.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/qinjing_2.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">封闭和弦是以食指跟大拇指”夹住“琴颈的手感，而非开放和弦是”握住“琴颈。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"食指位置\">食指位置</h6>\n<p><img src=\"/blog/img/guitar/hengan/sizhi_1.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/sizhi_2.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">试试”食指伸直“用食指稍微靠近虎口”约呈<span class=\"number\">45</span>度“的那一面来压弦。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"大拇指位置\">大拇指位置</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大拇指放在食指“正后方”，可以上下左右的微调，多尝试不同的角度，找出最适合你的位置，压好以后就要记住手感。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"中指-小指位置\">中指、小指位置</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中指大略垂直，无名指、小指要立起来，不要去碰触到其他弦。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"每根手指要尽量靠近琴衍\">每根手指要尽量靠近琴衍</h6>\n<p><img src=\"/blog/img/guitar/hengan/qinyan_1.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/qinyan_2.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不管压什么和弦，手指尽量靠近琴衍</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"手指叠罗汉\">手指叠罗汉</h6>\n<p><img src=\"/blog/img/guitar/hengan/dlh_1.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/dlh_2.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/dlh_3.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/dlh_4.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">采用手指叠罗汉的方式，加强压弦的力道，等手指慢慢适应后，一根一根放开，直到练到单靠食指可以完全封紧。</span><br><span class=\"line\">手指全按、放开小指、放开无名指与小指剩下食指压弦。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"从第3~5格开始练\">从第3~5格开始练</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果弦距设定没有做好，第<span class=\"number\">1</span>格会最难压，可以先从从第<span class=\"number\">3</span>~<span class=\"number\">5</span>格开始练，比较不会有挫折感。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"食指最后压\">食指最后压</h6>\n<p><img src=\"/blog/img/guitar/hengan/sizhi_3.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/sizhi_4.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这样就可以知道没有压到的弦还剩下几根，心理压力比较不会这么大。例如：F，食指只要把注意力集中在没压到的<span class=\"number\">1</span>、<span class=\"number\">2</span>、<span class=\"number\">6</span>弦就好。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"吉他竖起来压弦\">吉他竖起来压弦</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这可以让手指用最自然的姿势去压弦，等到练熟，在转回正常弹吉他姿势</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"每一格都试试看\">每一格都试试看</h6>\n<p><img src=\"/blog/img/guitar/hengan/ss.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">慢慢适应封闭和弦之后，可以从第<span class=\"number\">1</span>格开始，练到第<span class=\"number\">10</span>格，在从第<span class=\"number\">10</span>格，练到第<span class=\"number\">1</span>格，每一格都试试看，每一个音都清楚扎实。去回算一趟，每天习个几趟，手酸就要休息，不要硬撑。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"开放与封闭之间的转换\">开放与封闭之间的转换</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开放和弦－＞封闭和弦的转换，也要OK才行喔，不能只练封闭和弦</span><br><span class=\"line\"></span><br><span class=\"line\">封闭和弦－＞封闭和弦的转换，有遇到的话，一样要练熟</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>一.什么是大横按？</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">封闭和弦（Barre Chords）是吉他的专有名词，并非真的有这种和弦。</span><br><span class=\"line\">封闭和弦是吉他初学者的最大障碍，因为封闭和弦是<span class=\"number\">1</span>根手指要「同时封住」<span class=\"number\">6</span>条弦，会有一定的难度 。</span><br><span class=\"line\">小横按就是食指或者中指或者无名指按住<span class=\"number\">2</span><span class=\"number\">-5</span>根弦的和弦，</span><br><span class=\"line\">而大横按就是要「同时封住」<span class=\"number\">6</span>条弦，大横按是和弦里面最难的和弦。</span><br><span class=\"line\">大横按和小横按不一样。小横按主要靠前部的肌肉就够了。大横按为了按的结实要靠前，和左侧的肌肉共同力量。</span><br></pre></td></tr></table></figure></p>\n<h2>二.大横按练习技巧</h2>\n<h6>夹住琴颈</h6>\n<p><img src=\"/blog/img/guitar/hengan/qinjing_1.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/qinjing_2.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">封闭和弦是以食指跟大拇指”夹住“琴颈的手感，而非开放和弦是”握住“琴颈。</span><br></pre></td></tr></table></figure></p>\n<h6>食指位置</h6>\n<p><img src=\"/blog/img/guitar/hengan/sizhi_1.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/sizhi_2.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">试试”食指伸直“用食指稍微靠近虎口”约呈<span class=\"number\">45</span>度“的那一面来压弦。</span><br></pre></td></tr></table></figure></p>\n<h6>大拇指位置</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大拇指放在食指“正后方”，可以上下左右的微调，多尝试不同的角度，找出最适合你的位置，压好以后就要记住手感。</span><br></pre></td></tr></table></figure></p>\n<h6>中指、小指位置</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中指大略垂直，无名指、小指要立起来，不要去碰触到其他弦。</span><br></pre></td></tr></table></figure></p>\n<h6>每根手指要尽量靠近琴衍</h6>\n<p><img src=\"/blog/img/guitar/hengan/qinyan_1.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/qinyan_2.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不管压什么和弦，手指尽量靠近琴衍</span><br></pre></td></tr></table></figure></p>\n<h6>手指叠罗汉</h6>\n<p><img src=\"/blog/img/guitar/hengan/dlh_1.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/dlh_2.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/dlh_3.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/dlh_4.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">采用手指叠罗汉的方式，加强压弦的力道，等手指慢慢适应后，一根一根放开，直到练到单靠食指可以完全封紧。</span><br><span class=\"line\">手指全按、放开小指、放开无名指与小指剩下食指压弦。</span><br></pre></td></tr></table></figure></p>\n<h6>从第3~5格开始练</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果弦距设定没有做好，第<span class=\"number\">1</span>格会最难压，可以先从从第<span class=\"number\">3</span>~<span class=\"number\">5</span>格开始练，比较不会有挫折感。</span><br></pre></td></tr></table></figure></p>\n<h6>食指最后压</h6>\n<p><img src=\"/blog/img/guitar/hengan/sizhi_3.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/hengan/sizhi_4.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这样就可以知道没有压到的弦还剩下几根，心理压力比较不会这么大。例如：F，食指只要把注意力集中在没压到的<span class=\"number\">1</span>、<span class=\"number\">2</span>、<span class=\"number\">6</span>弦就好。</span><br></pre></td></tr></table></figure></p>\n<h6>吉他竖起来压弦</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这可以让手指用最自然的姿势去压弦，等到练熟，在转回正常弹吉他姿势</span><br></pre></td></tr></table></figure></p>\n<h6>每一格都试试看</h6>\n<p><img src=\"/blog/img/guitar/hengan/ss.jpg\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">慢慢适应封闭和弦之后，可以从第<span class=\"number\">1</span>格开始，练到第<span class=\"number\">10</span>格，在从第<span class=\"number\">10</span>格，练到第<span class=\"number\">1</span>格，每一格都试试看，每一个音都清楚扎实。去回算一趟，每天习个几趟，手酸就要休息，不要硬撑。</span><br></pre></td></tr></table></figure></p>\n<h6>开放与封闭之间的转换</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开放和弦－＞封闭和弦的转换，也要OK才行喔，不能只练封闭和弦</span><br><span class=\"line\"></span><br><span class=\"line\">封闭和弦－＞封闭和弦的转换，有遇到的话，一样要练熟</span><br></pre></td></tr></table></figure></p>\n"},{"title":"用Sentinel做限流、熔断和降级","catalog":true,"date":"2020-12-11T01:43:54.000Z","subtitle":"sentinel","header-img":"/blog/img/header_img/404.png","_content":"## 用Sentinel做限流、熔断和降级\n### 一.配置\n`1.maven依赖`\n**springboot版本：2.2.6.RELEASE**\n\n    <dependency>\n       <groupId>com.alibaba.cloud</groupId>\n       <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n       <version>2.2.3.RELEASE</version>\n    </dependency>\n\n`2.yaml配置`\n```json\nspring:\n  cloud:\n    sentinel:\n      transport:\n        dashboard: localhost:8080\n      eager: false\n```\n### 二.使用\n```json\n@RequestMapping(\"test\")\n@RestController\npublic class TestController {\n    @SentinelResource(value = \"test\")\n    @GetMapping(\"demo\")\n    public Result test(String id) {\n  \t System.out.println(\"Sentinel........\");\n       return ResultUtil.success();\n    }\n}\n```\n### 三.启动Sentinel-dashboard\n\n    https://github.com/alibaba/Sentinel/releases，下载sentinel-dashboard-1.8.0.jar,\n    输入命令java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 \n\t-Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar启动sentinel-dashboard控制台。\n\t启动项目，打开浏览器输入localhost:8080即可看到Sentinel控制台，如下图。\n    \n![在这里插入图片描述](/blog/img/sentinel/sentinel1.png)\n\n### 四.sentinel规则\n`1.流控规则`\n![在这里插入图片描述](/blog/img/sentinel/sentinel2.png)\n\n    通过流控规则可以用来来指定允许该资源通过的请求次数，\n    点击簇点链路中资源名的流控按钮，可增加限流规则。\n    如上图，QPS单机阈值设置成1表示：单机应用每秒访问量不许超过1个，\n\t若请求1秒内访问量超过1，超出的请求会被阻塞跑错，如下图：\n\n![在这里插入图片描述](/blog/img/sentinel/sentinel3.png)\n\n`2.降级`\n\n![在这里插入图片描述](/blog/img/sentinel/sentinel4.png)\n```\n- 慢调用比例 (SLOW_REQUEST_RATIO)：选择以慢调用比例作为阈值，\n\t需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。\n\t当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例\n\t大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态\n\t（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，\n\t若大于设置的慢调用 RT 则会再次被熔断。\n- 异常比例 (ERROR_RATIO)：当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，\n\t并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入\n\t探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，\n\t否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。\n- 异常数 (ERROR_COUNT)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。\n\t经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成\n\t（没有错误）则结束熔断，否则会再次被熔断。\n```\n**若请求被熔断，后端会抛错，如下图**\n![在这里插入图片描述](/blog/img/sentinel/sentinel5.png)\n\n`3.热点参数限流`\n```json\n使用热点参数限流功能，需要引入以下依赖：\n  <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-parameter-flow-control</artifactId>\n            <version>1.8.0</version>\n  </dependency>\n```\n![在这里插入图片描述](/blog/img/sentinel/sentinel6.png)\n\n    如上图，可根据参数设置参数限流规则，参数例外项，可以针对指定的参数值单独设置限流阈值，\n\t不受前面 count 阈值的限制。仅支持基本类型和字符串类型。\n\n`4.授权规则`\n![在这里插入图片描述](/blog/img/sentinel/sentinel7.png)\n\n    授权规则很简单，即增加黑白名单限制，流控应用指请求来源origin(ip)。\n\n### 五.范例代码\n    https://gitee.com/xshCloudy/sentinel.git\n\n### 六.参考项目及资料\n    https://github.com/alibaba/Sentinel\n\thttps://github.com/alibaba/Sentinel/tree/master/sentinel-demo \n\thttps://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D\n\n\n\n\n\n","source":"_posts/用Sentinel做限流、熔断和降级.md","raw":"---\ntitle: 用Sentinel做限流、熔断和降级\ncatalog: true\ndate: 2020-12-11 09:43:54\nsubtitle: sentinel\nheader-img: \"/blog/img/header_img/404.png\"\ntags:\n- sentinel\n---\n## 用Sentinel做限流、熔断和降级\n### 一.配置\n`1.maven依赖`\n**springboot版本：2.2.6.RELEASE**\n\n    <dependency>\n       <groupId>com.alibaba.cloud</groupId>\n       <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n       <version>2.2.3.RELEASE</version>\n    </dependency>\n\n`2.yaml配置`\n```json\nspring:\n  cloud:\n    sentinel:\n      transport:\n        dashboard: localhost:8080\n      eager: false\n```\n### 二.使用\n```json\n@RequestMapping(\"test\")\n@RestController\npublic class TestController {\n    @SentinelResource(value = \"test\")\n    @GetMapping(\"demo\")\n    public Result test(String id) {\n  \t System.out.println(\"Sentinel........\");\n       return ResultUtil.success();\n    }\n}\n```\n### 三.启动Sentinel-dashboard\n\n    https://github.com/alibaba/Sentinel/releases，下载sentinel-dashboard-1.8.0.jar,\n    输入命令java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 \n\t-Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar启动sentinel-dashboard控制台。\n\t启动项目，打开浏览器输入localhost:8080即可看到Sentinel控制台，如下图。\n    \n![在这里插入图片描述](/blog/img/sentinel/sentinel1.png)\n\n### 四.sentinel规则\n`1.流控规则`\n![在这里插入图片描述](/blog/img/sentinel/sentinel2.png)\n\n    通过流控规则可以用来来指定允许该资源通过的请求次数，\n    点击簇点链路中资源名的流控按钮，可增加限流规则。\n    如上图，QPS单机阈值设置成1表示：单机应用每秒访问量不许超过1个，\n\t若请求1秒内访问量超过1，超出的请求会被阻塞跑错，如下图：\n\n![在这里插入图片描述](/blog/img/sentinel/sentinel3.png)\n\n`2.降级`\n\n![在这里插入图片描述](/blog/img/sentinel/sentinel4.png)\n```\n- 慢调用比例 (SLOW_REQUEST_RATIO)：选择以慢调用比例作为阈值，\n\t需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。\n\t当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例\n\t大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态\n\t（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，\n\t若大于设置的慢调用 RT 则会再次被熔断。\n- 异常比例 (ERROR_RATIO)：当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，\n\t并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入\n\t探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，\n\t否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。\n- 异常数 (ERROR_COUNT)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。\n\t经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成\n\t（没有错误）则结束熔断，否则会再次被熔断。\n```\n**若请求被熔断，后端会抛错，如下图**\n![在这里插入图片描述](/blog/img/sentinel/sentinel5.png)\n\n`3.热点参数限流`\n```json\n使用热点参数限流功能，需要引入以下依赖：\n  <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-parameter-flow-control</artifactId>\n            <version>1.8.0</version>\n  </dependency>\n```\n![在这里插入图片描述](/blog/img/sentinel/sentinel6.png)\n\n    如上图，可根据参数设置参数限流规则，参数例外项，可以针对指定的参数值单独设置限流阈值，\n\t不受前面 count 阈值的限制。仅支持基本类型和字符串类型。\n\n`4.授权规则`\n![在这里插入图片描述](/blog/img/sentinel/sentinel7.png)\n\n    授权规则很简单，即增加黑白名单限制，流控应用指请求来源origin(ip)。\n\n### 五.范例代码\n    https://gitee.com/xshCloudy/sentinel.git\n\n### 六.参考项目及资料\n    https://github.com/alibaba/Sentinel\n\thttps://github.com/alibaba/Sentinel/tree/master/sentinel-demo \n\thttps://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D\n\n\n\n\n\n","slug":"用Sentinel做限流、熔断和降级","published":1,"updated":"2020-12-11T05:38:31.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmm001898v5jgxmnbv0","content":"<h2 id=\"用sentinel做限流-熔断和降级\">用Sentinel做限流、熔断和降级</h2>\n<h3 id=\"一配置\">一.配置</h3>\n<p><code>1.maven依赖</code>\n<strong>springboot版本：2.2.6.RELEASE</strong></p>\n<pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n   &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;\n   &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p><code>2.yaml配置</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    sentinel:</span><br><span class=\"line\">      transport:</span><br><span class=\"line\">        dashboard: localhost:8080</span><br><span class=\"line\">      eager: false</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二使用\">二.使用</h3>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(\"test\")</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    @SentinelResource(value = \"test\")</span><br><span class=\"line\">    @GetMapping(\"demo\")</span><br><span class=\"line\">    public Result test(String id) &#123;</span><br><span class=\"line\">  \t System.out.println(\"Sentinel........\");</span><br><span class=\"line\">       return ResultUtil.success();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三启动sentinel-dashboard\">三.启动Sentinel-dashboard</h3>\n<pre><code>https://github.com/alibaba/Sentinel/releases，下载sentinel-dashboard-1.8.0.jar,\n输入命令java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 \n-Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar启动sentinel-dashboard控制台。\n启动项目，打开浏览器输入localhost:8080即可看到Sentinel控制台，如下图。\n</code></pre>\n<p><img src=\"/blog/img/sentinel/sentinel1.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"四sentinel规则\">四.sentinel规则</h3>\n<p><code>1.流控规则</code>\n<img src=\"/blog/img/sentinel/sentinel2.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>通过流控规则可以用来来指定允许该资源通过的请求次数，\n点击簇点链路中资源名的流控按钮，可增加限流规则。\n如上图，QPS单机阈值设置成1表示：单机应用每秒访问量不许超过1个，\n若请求1秒内访问量超过1，超出的请求会被阻塞跑错，如下图：\n</code></pre>\n<p><img src=\"/blog/img/sentinel/sentinel3.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>2.降级</code></p>\n<p><img src=\"/blog/img/sentinel/sentinel4.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 慢调用比例 (SLOW_REQUEST_RATIO)：选择以慢调用比例作为阈值，</span><br><span class=\"line\">\t需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。</span><br><span class=\"line\">\t当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例</span><br><span class=\"line\">\t大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态</span><br><span class=\"line\">\t（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，</span><br><span class=\"line\">\t若大于设置的慢调用 RT 则会再次被熔断。</span><br><span class=\"line\">- 异常比例 (ERROR_RATIO)：当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，</span><br><span class=\"line\">\t并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入</span><br><span class=\"line\">\t探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，</span><br><span class=\"line\">\t否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</span><br><span class=\"line\">- 异常数 (ERROR_COUNT)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。</span><br><span class=\"line\">\t经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成</span><br><span class=\"line\">\t（没有错误）则结束熔断，否则会再次被熔断。</span><br></pre></td></tr></table></figure></p>\n<p><strong>若请求被熔断，后端会抛错，如下图</strong>\n<img src=\"/blog/img/sentinel/sentinel5.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>3.热点参数限流</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用热点参数限流功能，需要引入以下依赖：</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;sentinel-parameter-flow-control&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.8.0&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/sentinel/sentinel6.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>如上图，可根据参数设置参数限流规则，参数例外项，可以针对指定的参数值单独设置限流阈值，\n不受前面 count 阈值的限制。仅支持基本类型和字符串类型。\n</code></pre>\n<p><code>4.授权规则</code>\n<img src=\"/blog/img/sentinel/sentinel7.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>授权规则很简单，即增加黑白名单限制，流控应用指请求来源origin(ip)。\n</code></pre>\n<h3 id=\"五范例代码\">五.范例代码</h3>\n<pre><code>https://gitee.com/xshCloudy/sentinel.git\n</code></pre>\n<h3 id=\"六参考项目及资料\">六.参考项目及资料</h3>\n<pre><code>https://github.com/alibaba/Sentinel\nhttps://github.com/alibaba/Sentinel/tree/master/sentinel-demo \nhttps://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2>用Sentinel做限流、熔断和降级</h2>\n<h3>一.配置</h3>\n<p><code>1.maven依赖</code>\n<strong>springboot版本：2.2.6.RELEASE</strong></p>\n<pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n   &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;\n   &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p><code>2.yaml配置</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    sentinel:</span><br><span class=\"line\">      transport:</span><br><span class=\"line\">        dashboard: localhost:8080</span><br><span class=\"line\">      eager: false</span><br></pre></td></tr></table></figure></p>\n<h3>二.使用</h3>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(\"test\")</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    @SentinelResource(value = \"test\")</span><br><span class=\"line\">    @GetMapping(\"demo\")</span><br><span class=\"line\">    public Result test(String id) &#123;</span><br><span class=\"line\">  \t System.out.println(\"Sentinel........\");</span><br><span class=\"line\">       return ResultUtil.success();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3>三.启动Sentinel-dashboard</h3>\n<pre><code>https://github.com/alibaba/Sentinel/releases，下载sentinel-dashboard-1.8.0.jar,\n输入命令java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 \n-Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar启动sentinel-dashboard控制台。\n启动项目，打开浏览器输入localhost:8080即可看到Sentinel控制台，如下图。\n</code></pre>\n<p><img src=\"/blog/img/sentinel/sentinel1.png\" alt=\"在这里插入图片描述\"></p>\n<h3>四.sentinel规则</h3>\n<p><code>1.流控规则</code>\n<img src=\"/blog/img/sentinel/sentinel2.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>通过流控规则可以用来来指定允许该资源通过的请求次数，\n点击簇点链路中资源名的流控按钮，可增加限流规则。\n如上图，QPS单机阈值设置成1表示：单机应用每秒访问量不许超过1个，\n若请求1秒内访问量超过1，超出的请求会被阻塞跑错，如下图：\n</code></pre>\n<p><img src=\"/blog/img/sentinel/sentinel3.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>2.降级</code></p>\n<p><img src=\"/blog/img/sentinel/sentinel4.png\" alt=\"在这里插入图片描述\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 慢调用比例 (SLOW_REQUEST_RATIO)：选择以慢调用比例作为阈值，</span><br><span class=\"line\">\t需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。</span><br><span class=\"line\">\t当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例</span><br><span class=\"line\">\t大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态</span><br><span class=\"line\">\t（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，</span><br><span class=\"line\">\t若大于设置的慢调用 RT 则会再次被熔断。</span><br><span class=\"line\">- 异常比例 (ERROR_RATIO)：当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，</span><br><span class=\"line\">\t并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入</span><br><span class=\"line\">\t探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，</span><br><span class=\"line\">\t否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</span><br><span class=\"line\">- 异常数 (ERROR_COUNT)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。</span><br><span class=\"line\">\t经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成</span><br><span class=\"line\">\t（没有错误）则结束熔断，否则会再次被熔断。</span><br></pre></td></tr></table></figure></p>\n<p><strong>若请求被熔断，后端会抛错，如下图</strong>\n<img src=\"/blog/img/sentinel/sentinel5.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>3.热点参数限流</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用热点参数限流功能，需要引入以下依赖：</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;sentinel-parameter-flow-control&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.8.0&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/sentinel/sentinel6.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>如上图，可根据参数设置参数限流规则，参数例外项，可以针对指定的参数值单独设置限流阈值，\n不受前面 count 阈值的限制。仅支持基本类型和字符串类型。\n</code></pre>\n<p><code>4.授权规则</code>\n<img src=\"/blog/img/sentinel/sentinel7.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>授权规则很简单，即增加黑白名单限制，流控应用指请求来源origin(ip)。\n</code></pre>\n<h3>五.范例代码</h3>\n<pre><code>https://gitee.com/xshCloudy/sentinel.git\n</code></pre>\n<h3>六.参考项目及资料</h3>\n<pre><code>https://github.com/alibaba/Sentinel\nhttps://github.com/alibaba/Sentinel/tree/master/sentinel-demo \nhttps://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D\n</code></pre>\n"},{"title":"如何用注解实现Redis分布式锁","catalog":true,"date":"2019-06-28T07:16:55.000Z","subtitle":"redis分布式锁","header-img":"/blog/img/article_header/article_header.png","_content":"## 一.maven依赖\nspringboot版本2.0.6，redis版本2.0.11\n```javascript\n\t\t<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n## 二.redis命令 setnx\n\n```javascript\npublic class RedisHelper {\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    @PostConstruct\n    public void init() {\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer<Object> objectJackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        redisTemplate.setValueSerializer(objectJackson2JsonRedisSerializer);\n        redisTemplate.setHashValueSerializer(objectJackson2JsonRedisSerializer);\n    }\n    /**\n     * 分布式锁\n     */\n    public Boolean setnx(Object key, Object value, Long expireTime, TimeUnit timeUnit) {\n        if (key == null) {\n            return false;\n        }\n        return this.setIfAbsent(key, value, expireTime, timeUnit);\n    }\n\n    private Boolean setIfAbsent(Object key, Object value, long timeout, TimeUnit unit) {\n        byte[] rawKey = this.rawKey(key);\n        byte[] rawValue = this.rawValue(value);\n        Expiration expiration = Expiration.from(timeout, unit);\n        return (Boolean) redisTemplate.execute((connection) -> {\n            return connection.set(rawKey, rawValue, expiration, RedisStringCommands.SetOption.ifAbsent());\n        }, true);\n    }\n\n    private byte[] rawKey(Object key) {\n        return key instanceof byte[] ? (byte[]) ((byte[]) key) : this.keySerializer().serialize(key);\n    }\n\n    private byte[] rawValue(Object value) {\n        return value instanceof byte[] ? (byte[]) ((byte[]) value) : this.valueSerializer().serialize(value);\n    }\n\n    private RedisSerializer valueSerializer() {\n        return redisTemplate.getValueSerializer();\n    }\n\n    private RedisSerializer keySerializer() {\n        return redisTemplate.getKeySerializer();\n    }\n    /**\n     * 删除对应的value\n     *\n     * @param key\n     */\n    public boolean remove(String key) {\n        if (key == null) {\n            return false;\n        }\n        return redisTemplate.delete(key);\n    }\n\n}\n```\n>特别注意：如果你的redis是2.1以上，setIfAbsent增加了设置过期时间。可以替换成下面的写法。\n```javascript\n public Boolean setnx(String key, Object value, Long expireTime,TimeUnit timeUnit) {\n        ValueOperations<String, Object> operations = redisTemplate.opsForValue();\n        return operations.setIfAbsent(key,value,expireTime, timeUnit);\n    }\n```\n## 三.注解写法\n### 1.注解@DistributeLock（支持spel表达式）\n```javascript\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface DistributeLock {\n    String key();\n    long timeout() default 10;\n    TimeUnit timeUnit() default TimeUnit.SECONDS;\n}\n\n```\n### 2.注解解释器\n```javascript\n\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/6/27\n **/\n@Aspect\n@Component\n@Order(1)\n@Slf4j\npublic class DistributeLockAspect {\n    @Autowired\n    private RedisHelper redisHelper;\n    private static final ParameterNameDiscoverer DISCOVERER = new LocalVariableTableParameterNameDiscoverer();\n\n    @Around(\"@annotation(distributeLock)\")\n    public Object doAround(ProceedingJoinPoint joinPoint, DistributeLock distributeLock) throws Throwable{\n        Object[] args = joinPoint.getArgs();\n        StandardEvaluationContext standardEvaluationContext = new StandardEvaluationContext(args);\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Method method = joinPoint.getTarget().getClass().getMethod(methodSignature.getName(), methodSignature.getParameterTypes());\n        String[] parametersName = DISCOVERER.getParameterNames(method);\n        if (args.length > 0) {\n            for (int i = 0; i < args.length; i++) {\n                standardEvaluationContext.setVariable(parametersName[i], args[i]);\n            }\n        }\n        String key = distributeLock.key();\n\t\tif (key.contains(\"#\")) {\n            key = generateKey(key, standardEvaluationContext);\n        }\n        if(StringUtils.isNoneBlank(distributeLock.prefix())){\n            key = distributeLock.prefix() + \"::\" + key;\n        }\n        long timeout = distributeLock.timeout();\n        TimeUnit timeUnit = distributeLock.timeUnit();\n     \tif (lock(key, timeout, timeUnit)) {\n            log.info(\"分布式锁加锁成功key:{},timeout:{}\", key, timeout);\n            try {\n                return joinPoint.proceed();\n            } catch (Throwable throwable) {\n                throw new SystemException(\"DistributeLockAspect.doAround error\", throwable);\n            } finally {\n                unLock(key);\n            }\n        }\n        return null;\n    }\n\n    private static String generateKey(String key, StandardEvaluationContext standardEvaluationContext) {\n        ExpressionParser parser = new SpelExpressionParser();\n        Expression exp = parser.parseExpression(key);\n        return exp.getValue(standardEvaluationContext, String.class);\n    }\n\n    private void unLock(String key) {\n        boolean remove = redisHelper.remove(key);\n        if (!remove) {\n            log.error(\"释放分布式锁失败，key={}，已自动超时\", key);\n        }\n    }\n\n    private Boolean lock(String key, Long timeout, TimeUnit timeUnit) {\n        String value = UUID.randomUUID().toString();\n        return redisHelper.setnx(key, value, timeout, timeUnit);\n    }\n\n}\n```\n### 3.使用方式\n```javascript\n@Service\npublic class TestService {\n    @DistributeLock(key = \"#code+#phoneNo\", timeout = 1800)\n    public void sys(String code, String phoneNo) {\n        System.out.println(\"今天天氣不錯哦！\");\n    }\n}\n```\n## 四.遗留问题\n>redis超时时间是自己控制的，业务的实际执行时间并不能准确确定，redission续期可解决该问题。\n\n\n\n","source":"_posts/用注解实现Redis分布式锁.md","raw":"---\ntitle: 如何用注解实现Redis分布式锁\ncatalog: true\ndate: 2019-06-28 15:16:55\nsubtitle: \"redis分布式锁\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n## 一.maven依赖\nspringboot版本2.0.6，redis版本2.0.11\n```javascript\n\t\t<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n## 二.redis命令 setnx\n\n```javascript\npublic class RedisHelper {\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    @PostConstruct\n    public void init() {\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer<Object> objectJackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        redisTemplate.setValueSerializer(objectJackson2JsonRedisSerializer);\n        redisTemplate.setHashValueSerializer(objectJackson2JsonRedisSerializer);\n    }\n    /**\n     * 分布式锁\n     */\n    public Boolean setnx(Object key, Object value, Long expireTime, TimeUnit timeUnit) {\n        if (key == null) {\n            return false;\n        }\n        return this.setIfAbsent(key, value, expireTime, timeUnit);\n    }\n\n    private Boolean setIfAbsent(Object key, Object value, long timeout, TimeUnit unit) {\n        byte[] rawKey = this.rawKey(key);\n        byte[] rawValue = this.rawValue(value);\n        Expiration expiration = Expiration.from(timeout, unit);\n        return (Boolean) redisTemplate.execute((connection) -> {\n            return connection.set(rawKey, rawValue, expiration, RedisStringCommands.SetOption.ifAbsent());\n        }, true);\n    }\n\n    private byte[] rawKey(Object key) {\n        return key instanceof byte[] ? (byte[]) ((byte[]) key) : this.keySerializer().serialize(key);\n    }\n\n    private byte[] rawValue(Object value) {\n        return value instanceof byte[] ? (byte[]) ((byte[]) value) : this.valueSerializer().serialize(value);\n    }\n\n    private RedisSerializer valueSerializer() {\n        return redisTemplate.getValueSerializer();\n    }\n\n    private RedisSerializer keySerializer() {\n        return redisTemplate.getKeySerializer();\n    }\n    /**\n     * 删除对应的value\n     *\n     * @param key\n     */\n    public boolean remove(String key) {\n        if (key == null) {\n            return false;\n        }\n        return redisTemplate.delete(key);\n    }\n\n}\n```\n>特别注意：如果你的redis是2.1以上，setIfAbsent增加了设置过期时间。可以替换成下面的写法。\n```javascript\n public Boolean setnx(String key, Object value, Long expireTime,TimeUnit timeUnit) {\n        ValueOperations<String, Object> operations = redisTemplate.opsForValue();\n        return operations.setIfAbsent(key,value,expireTime, timeUnit);\n    }\n```\n## 三.注解写法\n### 1.注解@DistributeLock（支持spel表达式）\n```javascript\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface DistributeLock {\n    String key();\n    long timeout() default 10;\n    TimeUnit timeUnit() default TimeUnit.SECONDS;\n}\n\n```\n### 2.注解解释器\n```javascript\n\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/6/27\n **/\n@Aspect\n@Component\n@Order(1)\n@Slf4j\npublic class DistributeLockAspect {\n    @Autowired\n    private RedisHelper redisHelper;\n    private static final ParameterNameDiscoverer DISCOVERER = new LocalVariableTableParameterNameDiscoverer();\n\n    @Around(\"@annotation(distributeLock)\")\n    public Object doAround(ProceedingJoinPoint joinPoint, DistributeLock distributeLock) throws Throwable{\n        Object[] args = joinPoint.getArgs();\n        StandardEvaluationContext standardEvaluationContext = new StandardEvaluationContext(args);\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Method method = joinPoint.getTarget().getClass().getMethod(methodSignature.getName(), methodSignature.getParameterTypes());\n        String[] parametersName = DISCOVERER.getParameterNames(method);\n        if (args.length > 0) {\n            for (int i = 0; i < args.length; i++) {\n                standardEvaluationContext.setVariable(parametersName[i], args[i]);\n            }\n        }\n        String key = distributeLock.key();\n\t\tif (key.contains(\"#\")) {\n            key = generateKey(key, standardEvaluationContext);\n        }\n        if(StringUtils.isNoneBlank(distributeLock.prefix())){\n            key = distributeLock.prefix() + \"::\" + key;\n        }\n        long timeout = distributeLock.timeout();\n        TimeUnit timeUnit = distributeLock.timeUnit();\n     \tif (lock(key, timeout, timeUnit)) {\n            log.info(\"分布式锁加锁成功key:{},timeout:{}\", key, timeout);\n            try {\n                return joinPoint.proceed();\n            } catch (Throwable throwable) {\n                throw new SystemException(\"DistributeLockAspect.doAround error\", throwable);\n            } finally {\n                unLock(key);\n            }\n        }\n        return null;\n    }\n\n    private static String generateKey(String key, StandardEvaluationContext standardEvaluationContext) {\n        ExpressionParser parser = new SpelExpressionParser();\n        Expression exp = parser.parseExpression(key);\n        return exp.getValue(standardEvaluationContext, String.class);\n    }\n\n    private void unLock(String key) {\n        boolean remove = redisHelper.remove(key);\n        if (!remove) {\n            log.error(\"释放分布式锁失败，key={}，已自动超时\", key);\n        }\n    }\n\n    private Boolean lock(String key, Long timeout, TimeUnit timeUnit) {\n        String value = UUID.randomUUID().toString();\n        return redisHelper.setnx(key, value, timeout, timeUnit);\n    }\n\n}\n```\n### 3.使用方式\n```javascript\n@Service\npublic class TestService {\n    @DistributeLock(key = \"#code+#phoneNo\", timeout = 1800)\n    public void sys(String code, String phoneNo) {\n        System.out.println(\"今天天氣不錯哦！\");\n    }\n}\n```\n## 四.遗留问题\n>redis超时时间是自己控制的，业务的实际执行时间并不能准确确定，redission续期可解决该问题。\n\n\n\n","slug":"用注解实现Redis分布式锁","published":1,"updated":"2020-11-05T06:58:09.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmn001a98v5x8yredue","content":"<h2 id=\"一maven依赖\">一.maven依赖</h2>\n<p>springboot版本2.0.6，redis版本2.0.11\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.boot&lt;<span class=\"regexp\">/groupId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/</span>artifactId&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/dependency&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二redis命令-setnx\">二.redis命令 setnx</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisHelper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> init() &#123;</span><br><span class=\"line\">        StringRedisSerializer stringRedisSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;<span class=\"built_in\">Object</span>&gt; objectJackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer&lt;&gt;(<span class=\"built_in\">Object</span>.class);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分布式锁</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    public <span class=\"built_in\">Boolean</span> setnx(<span class=\"built_in\">Object</span> key, <span class=\"built_in\">Object</span> value, Long expireTime, TimeUnit timeUnit) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.setIfAbsent(key, value, expireTime, timeUnit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"built_in\">Boolean</span> setIfAbsent(<span class=\"built_in\">Object</span> key, <span class=\"built_in\">Object</span> value, long timeout, TimeUnit unit) &#123;</span><br><span class=\"line\">        byte[] rawKey = <span class=\"keyword\">this</span>.rawKey(key);</span><br><span class=\"line\">        byte[] rawValue = <span class=\"keyword\">this</span>.rawValue(value);</span><br><span class=\"line\">        Expiration expiration = Expiration.from(timeout, unit);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">Boolean</span>) redisTemplate.execute((connection) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> connection.set(rawKey, rawValue, expiration, RedisStringCommands.SetOption.ifAbsent());</span><br><span class=\"line\">        &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private byte[] rawKey(<span class=\"built_in\">Object</span> key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">instanceof</span> byte[] ? (byte[]) ((byte[]) key) : <span class=\"keyword\">this</span>.keySerializer().serialize(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private byte[] rawValue(<span class=\"built_in\">Object</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value <span class=\"keyword\">instanceof</span> byte[] ? (byte[]) ((byte[]) value) : <span class=\"keyword\">this</span>.valueSerializer().serialize(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RedisSerializer valueSerializer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getValueSerializer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RedisSerializer keySerializer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getKeySerializer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除对应的value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    public boolean remove(<span class=\"built_in\">String</span> key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.delete(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>特别注意：如果你的redis是2.1以上，setIfAbsent增加了设置过期时间。可以替换成下面的写法。\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"built_in\">Boolean</span> setnx(<span class=\"built_in\">String</span> key, <span class=\"built_in\">Object</span> value, Long expireTime,TimeUnit timeUnit) &#123;</span><br><span class=\"line\">       ValueOperations&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> operations.setIfAbsent(key,value,expireTime, timeUnit);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"三注解写法\">三.注解写法</h2>\n<h3 id=\"1注解distributelock支持spel表达式\">1.注解@DistributeLock（支持spel表达式）</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">public @interface DistributeLock &#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> key();</span><br><span class=\"line\">    long timeout() <span class=\"keyword\">default</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    TimeUnit timeUnit() <span class=\"keyword\">default</span> TimeUnit.SECONDS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2注解解释器\">2.注解解释器</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @version 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author shenghao.xiao</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date 2019/6/27</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\">@Aspect</span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Order(<span class=\"number\">1</span>)</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistributeLockAspect</span> </span>&#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private RedisHelper redisHelper;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> final ParameterNameDiscoverer DISCOVERER = <span class=\"keyword\">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Around(<span class=\"string\">\"@annotation(distributeLock)\"</span>)</span><br><span class=\"line\">    public <span class=\"built_in\">Object</span> doAround(ProceedingJoinPoint joinPoint, DistributeLock distributeLock) throws Throwable&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>[] args = joinPoint.getArgs();</span><br><span class=\"line\">        StandardEvaluationContext standardEvaluationContext = <span class=\"keyword\">new</span> StandardEvaluationContext(args);</span><br><span class=\"line\">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        Method method = joinPoint.getTarget().getClass().getMethod(methodSignature.getName(), methodSignature.getParameterTypes());</span><br><span class=\"line\">        <span class=\"built_in\">String</span>[] parametersName = DISCOVERER.getParameterNames(method);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">                standardEvaluationContext.setVariable(parametersName[i], args[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> key = distributeLock.key();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key.contains(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">            key = generateKey(key, standardEvaluationContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isNoneBlank(distributeLock.prefix()))&#123;</span><br><span class=\"line\">            key = distributeLock.prefix() + <span class=\"string\">\"::\"</span> + key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long timeout = distributeLock.timeout();</span><br><span class=\"line\">        TimeUnit timeUnit = distributeLock.timeUnit();</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span> (lock(key, timeout, timeUnit)) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">\"分布式锁加锁成功key:&#123;&#125;,timeout:&#123;&#125;\"</span>, key, timeout);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> joinPoint.proceed();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SystemException(<span class=\"string\">\"DistributeLockAspect.doAround error\"</span>, throwable);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                unLock(key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> generateKey(<span class=\"built_in\">String</span> key, StandardEvaluationContext standardEvaluationContext) &#123;</span><br><span class=\"line\">        ExpressionParser parser = <span class=\"keyword\">new</span> SpelExpressionParser();</span><br><span class=\"line\">        Expression exp = parser.parseExpression(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> exp.getValue(standardEvaluationContext, <span class=\"built_in\">String</span>.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"keyword\">void</span> unLock(<span class=\"built_in\">String</span> key) &#123;</span><br><span class=\"line\">        boolean remove = redisHelper.remove(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!remove) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"释放分布式锁失败，key=&#123;&#125;，已自动超时\"</span>, key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"built_in\">Boolean</span> lock(<span class=\"built_in\">String</span> key, Long timeout, TimeUnit timeUnit) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> value = UUID.randomUUID().toString();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisHelper.setnx(key, value, timeout, timeUnit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3使用方式\">3.使用方式</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    @DistributeLock(key = <span class=\"string\">\"#code+#phoneNo\"</span>, timeout = <span class=\"number\">1800</span>)</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> sys(<span class=\"built_in\">String</span> code, <span class=\"built_in\">String</span> phoneNo) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"今天天氣不錯哦！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四遗留问题\">四.遗留问题</h2>\n<blockquote>\n<p>redis超时时间是自己控制的，业务的实际执行时间并不能准确确定，redission续期可解决该问题。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2>一.maven依赖</h2>\n<p>springboot版本2.0.6，redis版本2.0.11\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.boot&lt;<span class=\"regexp\">/groupId&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/</span>artifactId&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/dependency&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2>二.redis命令 setnx</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisHelper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> init() &#123;</span><br><span class=\"line\">        StringRedisSerializer stringRedisSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;<span class=\"built_in\">Object</span>&gt; objectJackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer&lt;&gt;(<span class=\"built_in\">Object</span>.class);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分布式锁</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    public <span class=\"built_in\">Boolean</span> setnx(<span class=\"built_in\">Object</span> key, <span class=\"built_in\">Object</span> value, Long expireTime, TimeUnit timeUnit) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.setIfAbsent(key, value, expireTime, timeUnit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"built_in\">Boolean</span> setIfAbsent(<span class=\"built_in\">Object</span> key, <span class=\"built_in\">Object</span> value, long timeout, TimeUnit unit) &#123;</span><br><span class=\"line\">        byte[] rawKey = <span class=\"keyword\">this</span>.rawKey(key);</span><br><span class=\"line\">        byte[] rawValue = <span class=\"keyword\">this</span>.rawValue(value);</span><br><span class=\"line\">        Expiration expiration = Expiration.from(timeout, unit);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">Boolean</span>) redisTemplate.execute((connection) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> connection.set(rawKey, rawValue, expiration, RedisStringCommands.SetOption.ifAbsent());</span><br><span class=\"line\">        &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private byte[] rawKey(<span class=\"built_in\">Object</span> key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">instanceof</span> byte[] ? (byte[]) ((byte[]) key) : <span class=\"keyword\">this</span>.keySerializer().serialize(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private byte[] rawValue(<span class=\"built_in\">Object</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value <span class=\"keyword\">instanceof</span> byte[] ? (byte[]) ((byte[]) value) : <span class=\"keyword\">this</span>.valueSerializer().serialize(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RedisSerializer valueSerializer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getValueSerializer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RedisSerializer keySerializer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getKeySerializer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除对应的value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    public boolean remove(<span class=\"built_in\">String</span> key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.delete(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>特别注意：如果你的redis是2.1以上，setIfAbsent增加了设置过期时间。可以替换成下面的写法。\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"built_in\">Boolean</span> setnx(<span class=\"built_in\">String</span> key, <span class=\"built_in\">Object</span> value, Long expireTime,TimeUnit timeUnit) &#123;</span><br><span class=\"line\">       ValueOperations&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> operations.setIfAbsent(key,value,expireTime, timeUnit);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2>三.注解写法</h2>\n<h3>1.注解@DistributeLock（支持spel表达式）</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">public @interface DistributeLock &#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> key();</span><br><span class=\"line\">    long timeout() <span class=\"keyword\">default</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    TimeUnit timeUnit() <span class=\"keyword\">default</span> TimeUnit.SECONDS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3>2.注解解释器</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @version 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author shenghao.xiao</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date 2019/6/27</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\">@Aspect</span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Order(<span class=\"number\">1</span>)</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistributeLockAspect</span> </span>&#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private RedisHelper redisHelper;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> final ParameterNameDiscoverer DISCOVERER = <span class=\"keyword\">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Around(<span class=\"string\">\"@annotation(distributeLock)\"</span>)</span><br><span class=\"line\">    public <span class=\"built_in\">Object</span> doAround(ProceedingJoinPoint joinPoint, DistributeLock distributeLock) throws Throwable&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>[] args = joinPoint.getArgs();</span><br><span class=\"line\">        StandardEvaluationContext standardEvaluationContext = <span class=\"keyword\">new</span> StandardEvaluationContext(args);</span><br><span class=\"line\">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        Method method = joinPoint.getTarget().getClass().getMethod(methodSignature.getName(), methodSignature.getParameterTypes());</span><br><span class=\"line\">        <span class=\"built_in\">String</span>[] parametersName = DISCOVERER.getParameterNames(method);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">                standardEvaluationContext.setVariable(parametersName[i], args[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> key = distributeLock.key();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key.contains(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">            key = generateKey(key, standardEvaluationContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isNoneBlank(distributeLock.prefix()))&#123;</span><br><span class=\"line\">            key = distributeLock.prefix() + <span class=\"string\">\"::\"</span> + key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long timeout = distributeLock.timeout();</span><br><span class=\"line\">        TimeUnit timeUnit = distributeLock.timeUnit();</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span> (lock(key, timeout, timeUnit)) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">\"分布式锁加锁成功key:&#123;&#125;,timeout:&#123;&#125;\"</span>, key, timeout);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> joinPoint.proceed();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SystemException(<span class=\"string\">\"DistributeLockAspect.doAround error\"</span>, throwable);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                unLock(key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> generateKey(<span class=\"built_in\">String</span> key, StandardEvaluationContext standardEvaluationContext) &#123;</span><br><span class=\"line\">        ExpressionParser parser = <span class=\"keyword\">new</span> SpelExpressionParser();</span><br><span class=\"line\">        Expression exp = parser.parseExpression(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> exp.getValue(standardEvaluationContext, <span class=\"built_in\">String</span>.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"keyword\">void</span> unLock(<span class=\"built_in\">String</span> key) &#123;</span><br><span class=\"line\">        boolean remove = redisHelper.remove(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!remove) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"释放分布式锁失败，key=&#123;&#125;，已自动超时\"</span>, key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"built_in\">Boolean</span> lock(<span class=\"built_in\">String</span> key, Long timeout, TimeUnit timeUnit) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> value = UUID.randomUUID().toString();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisHelper.setnx(key, value, timeout, timeUnit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3>3.使用方式</h3>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    @DistributeLock(key = <span class=\"string\">\"#code+#phoneNo\"</span>, timeout = <span class=\"number\">1800</span>)</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> sys(<span class=\"built_in\">String</span> code, <span class=\"built_in\">String</span> phoneNo) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"今天天氣不錯哦！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2>四.遗留问题</h2>\n<blockquote>\n<p>redis超时时间是自己控制的，业务的实际执行时间并不能准确确定，redission续期可解决该问题。</p>\n</blockquote>\n"},{"title":"用设计模式如何优雅解决if过多问题？","catalog":true,"date":"2019-12-12T14:45:28.000Z","subtitle":"设计模式","header-img":"/blog/img/article_header/article_header.png","_content":"\n\n\n# 用设计模式如何优雅解决if过多问题？\n\n平时写代码是不是经常有if判断过多，每个if里面也有大量对应的逻辑，造成代码臃肿难看呢。\n我们怎么用设计模式来优雅的解决这种问题呢？\n\n\n## 话不多说直接上代码\n\n```\npublic enum BehaviorEnum{\n    DELETE_FORM,\n    CREATE_FORM;\n}\n```\n\n```\npublic interface ProcessHandler {\n    String primaryKey();\n    void process(String param);\n}\n```\n\n\n```\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/2/28\n **/\n@Component\npublic class CreateFormHandler implements ProcessHandler {\n @Override\n    public String primaryKey() {\n        return BehaviorEnum.CREATE_FORM.name();\n    }\n    //这里就是if对应的逻辑处理\n  @Override\n    public void process(String param) {\n    System.out.println(param);\n    }\n}\n```\n\n\n```\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/2/28\n **/\n@Component\npublic class DeleteFormHandler implements ProcessHandler {\n @Override\n    public String primaryKey() {\n        return BehaviorEnum.DELETE_FORM.name();\n    }\n  @Override\n    public void process(String param) {\n    System.out.println(param);\n    }\n}\n```\n\n\n```\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/2/28\n **/\n@Component\npublic class ProcessHandlerFactory {\n    private static final Map<String, ProcessHandler> HANDLER_MAP = new HashMap<>();\n\n    @Autowired\n    private List<ProcessHandler> handlers;\n\n    @PostConstruct\n    public void init(){\n        for (ProcessHandler handler : handlers){\n            HANDLER_MAP.put(handler.primaryKey(), handler);\n        }\n    }\n\n    public ProcessHandler getHandler(BehaviorEnum behaviorEnum){\n        return HANDLER_MAP.get(behaviorEnum.name());\n    }\n}\n```\n## 使用\n```\npublic class NoticeTest extends BaseTest {\n@Autowired\n    private ProcessHandlerFactory processHandlerFactory;\n  @Test\n    public void test1() {\n        processHandlerFactory.getHandler(BehaviorEnum .DELETE_FORM.name())\n            .process(\"DELETE_FORM\");\n    }\n      @Test\n    public void test2() {\n        processHandlerFactory.getHandler(BehaviorEnum .CREATE_FORM.name())\n            .process(\"CREATE_FORM\");\n    }\n}\n```\n\n\n```javascript\n上述代码其实就是利用工厂模式，将多个if的逻辑拆成单个，\n只需要根据相应的枚举用工厂类processHandlerFactory判断走哪个对应的if逻辑即可。\n非常的实用！！！\n\n```\n\n","source":"_posts/设计模式如何优雅解决if过多问题.md","raw":"---\ntitle: 用设计模式如何优雅解决if过多问题？\ncatalog: true\ndate: 2019-12-12 22:45:28\nsubtitle: \"设计模式\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n\n\n\n# 用设计模式如何优雅解决if过多问题？\n\n平时写代码是不是经常有if判断过多，每个if里面也有大量对应的逻辑，造成代码臃肿难看呢。\n我们怎么用设计模式来优雅的解决这种问题呢？\n\n\n## 话不多说直接上代码\n\n```\npublic enum BehaviorEnum{\n    DELETE_FORM,\n    CREATE_FORM;\n}\n```\n\n```\npublic interface ProcessHandler {\n    String primaryKey();\n    void process(String param);\n}\n```\n\n\n```\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/2/28\n **/\n@Component\npublic class CreateFormHandler implements ProcessHandler {\n @Override\n    public String primaryKey() {\n        return BehaviorEnum.CREATE_FORM.name();\n    }\n    //这里就是if对应的逻辑处理\n  @Override\n    public void process(String param) {\n    System.out.println(param);\n    }\n}\n```\n\n\n```\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/2/28\n **/\n@Component\npublic class DeleteFormHandler implements ProcessHandler {\n @Override\n    public String primaryKey() {\n        return BehaviorEnum.DELETE_FORM.name();\n    }\n  @Override\n    public void process(String param) {\n    System.out.println(param);\n    }\n}\n```\n\n\n```\n/**\n * @version 1.0\n * @Author shenghao.xiao\n * @Date 2019/2/28\n **/\n@Component\npublic class ProcessHandlerFactory {\n    private static final Map<String, ProcessHandler> HANDLER_MAP = new HashMap<>();\n\n    @Autowired\n    private List<ProcessHandler> handlers;\n\n    @PostConstruct\n    public void init(){\n        for (ProcessHandler handler : handlers){\n            HANDLER_MAP.put(handler.primaryKey(), handler);\n        }\n    }\n\n    public ProcessHandler getHandler(BehaviorEnum behaviorEnum){\n        return HANDLER_MAP.get(behaviorEnum.name());\n    }\n}\n```\n## 使用\n```\npublic class NoticeTest extends BaseTest {\n@Autowired\n    private ProcessHandlerFactory processHandlerFactory;\n  @Test\n    public void test1() {\n        processHandlerFactory.getHandler(BehaviorEnum .DELETE_FORM.name())\n            .process(\"DELETE_FORM\");\n    }\n      @Test\n    public void test2() {\n        processHandlerFactory.getHandler(BehaviorEnum .CREATE_FORM.name())\n            .process(\"CREATE_FORM\");\n    }\n}\n```\n\n\n```javascript\n上述代码其实就是利用工厂模式，将多个if的逻辑拆成单个，\n只需要根据相应的枚举用工厂类processHandlerFactory判断走哪个对应的if逻辑即可。\n非常的实用！！！\n\n```\n\n","slug":"设计模式如何优雅解决if过多问题","published":1,"updated":"2020-11-05T06:58:09.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmp001d98v5ibl1qztv","content":"<h1 id=\"用设计模式如何优雅解决if过多问题\">用设计模式如何优雅解决if过多问题？</h1>\n<p>平时写代码是不是经常有if判断过多，每个if里面也有大量对应的逻辑，造成代码臃肿难看呢。\n我们怎么用设计模式来优雅的解决这种问题呢？</p>\n<h2 id=\"话不多说直接上代码\">话不多说直接上代码</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum BehaviorEnum&#123;</span><br><span class=\"line\">    DELETE_FORM,</span><br><span class=\"line\">    CREATE_FORM;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ProcessHandler &#123;</span><br><span class=\"line\">    String primaryKey();</span><br><span class=\"line\">    void process(String param);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Author shenghao.xiao</span><br><span class=\"line\"> * @Date 2019/2/28</span><br><span class=\"line\"> **/</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class CreateFormHandler implements ProcessHandler &#123;</span><br><span class=\"line\"> @Override</span><br><span class=\"line\">    public String primaryKey() &#123;</span><br><span class=\"line\">        return BehaviorEnum.CREATE_FORM.name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //这里就是if对应的逻辑处理</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">    public void process(String param) &#123;</span><br><span class=\"line\">    System.out.println(param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Author shenghao.xiao</span><br><span class=\"line\"> * @Date 2019/2/28</span><br><span class=\"line\"> **/</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class DeleteFormHandler implements ProcessHandler &#123;</span><br><span class=\"line\"> @Override</span><br><span class=\"line\">    public String primaryKey() &#123;</span><br><span class=\"line\">        return BehaviorEnum.DELETE_FORM.name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">    public void process(String param) &#123;</span><br><span class=\"line\">    System.out.println(param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Author shenghao.xiao</span><br><span class=\"line\"> * @Date 2019/2/28</span><br><span class=\"line\"> **/</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ProcessHandlerFactory &#123;</span><br><span class=\"line\">    private static final Map&lt;String, ProcessHandler&gt; HANDLER_MAP = new HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private List&lt;ProcessHandler&gt; handlers;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void init()&#123;</span><br><span class=\"line\">        for (ProcessHandler handler : handlers)&#123;</span><br><span class=\"line\">            HANDLER_MAP.put(handler.primaryKey(), handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ProcessHandler getHandler(BehaviorEnum behaviorEnum)&#123;</span><br><span class=\"line\">        return HANDLER_MAP.get(behaviorEnum.name());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用\">使用</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoticeTest extends BaseTest &#123;</span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">    private ProcessHandlerFactory processHandlerFactory;</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">    public void test1() &#123;</span><br><span class=\"line\">        processHandlerFactory.getHandler(BehaviorEnum .DELETE_FORM.name())</span><br><span class=\"line\">            .process(&quot;DELETE_FORM&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      @Test</span><br><span class=\"line\">    public void test2() &#123;</span><br><span class=\"line\">        processHandlerFactory.getHandler(BehaviorEnum .CREATE_FORM.name())</span><br><span class=\"line\">            .process(&quot;CREATE_FORM&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上述代码其实就是利用工厂模式，将多个<span class=\"keyword\">if</span>的逻辑拆成单个，</span><br><span class=\"line\">只需要根据相应的枚举用工厂类processHandlerFactory判断走哪个对应的<span class=\"keyword\">if</span>逻辑即可。</span><br><span class=\"line\">非常的实用！！！</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>用设计模式如何优雅解决if过多问题？</h1>\n<p>平时写代码是不是经常有if判断过多，每个if里面也有大量对应的逻辑，造成代码臃肿难看呢。\n我们怎么用设计模式来优雅的解决这种问题呢？</p>\n<h2>话不多说直接上代码</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum BehaviorEnum&#123;</span><br><span class=\"line\">    DELETE_FORM,</span><br><span class=\"line\">    CREATE_FORM;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ProcessHandler &#123;</span><br><span class=\"line\">    String primaryKey();</span><br><span class=\"line\">    void process(String param);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Author shenghao.xiao</span><br><span class=\"line\"> * @Date 2019/2/28</span><br><span class=\"line\"> **/</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class CreateFormHandler implements ProcessHandler &#123;</span><br><span class=\"line\"> @Override</span><br><span class=\"line\">    public String primaryKey() &#123;</span><br><span class=\"line\">        return BehaviorEnum.CREATE_FORM.name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //这里就是if对应的逻辑处理</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">    public void process(String param) &#123;</span><br><span class=\"line\">    System.out.println(param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Author shenghao.xiao</span><br><span class=\"line\"> * @Date 2019/2/28</span><br><span class=\"line\"> **/</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class DeleteFormHandler implements ProcessHandler &#123;</span><br><span class=\"line\"> @Override</span><br><span class=\"line\">    public String primaryKey() &#123;</span><br><span class=\"line\">        return BehaviorEnum.DELETE_FORM.name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">    public void process(String param) &#123;</span><br><span class=\"line\">    System.out.println(param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @Author shenghao.xiao</span><br><span class=\"line\"> * @Date 2019/2/28</span><br><span class=\"line\"> **/</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ProcessHandlerFactory &#123;</span><br><span class=\"line\">    private static final Map&lt;String, ProcessHandler&gt; HANDLER_MAP = new HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private List&lt;ProcessHandler&gt; handlers;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void init()&#123;</span><br><span class=\"line\">        for (ProcessHandler handler : handlers)&#123;</span><br><span class=\"line\">            HANDLER_MAP.put(handler.primaryKey(), handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ProcessHandler getHandler(BehaviorEnum behaviorEnum)&#123;</span><br><span class=\"line\">        return HANDLER_MAP.get(behaviorEnum.name());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2>使用</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoticeTest extends BaseTest &#123;</span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">    private ProcessHandlerFactory processHandlerFactory;</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">    public void test1() &#123;</span><br><span class=\"line\">        processHandlerFactory.getHandler(BehaviorEnum .DELETE_FORM.name())</span><br><span class=\"line\">            .process(&quot;DELETE_FORM&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      @Test</span><br><span class=\"line\">    public void test2() &#123;</span><br><span class=\"line\">        processHandlerFactory.getHandler(BehaviorEnum .CREATE_FORM.name())</span><br><span class=\"line\">            .process(&quot;CREATE_FORM&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上述代码其实就是利用工厂模式，将多个<span class=\"keyword\">if</span>的逻辑拆成单个，</span><br><span class=\"line\">只需要根据相应的枚举用工厂类processHandlerFactory判断走哪个对应的<span class=\"keyword\">if</span>逻辑即可。</span><br><span class=\"line\">非常的实用！！！</span><br></pre></td></tr></table></figure></p>\n"},{"title":"音阶理论总结","catalog":true,"date":"2018-09-02T16:56:37.000Z","subtitle":"音阶理论总结","header-img":"/blog/img/article_header/article_header.png","_content":"## 一.大调音阶\n###### 1.音阶的基本概念\n```javascript\n一组高低不同的音符，依照规律，阶梯状地排列起来，\n或以全音、半音以及其他音程顺次排列的一串音称之为音阶。\n\n在音乐中，有很多音阶，有的音阶有固定的名字，而有的并没有，每种音阶都有它存在的意义。\n流行音乐中大部分的歌曲都是使用的自然大调音阶，\n我们经常听到的国内流行歌曲大部分也是用自然大调音阶创作出来的，所以我们首先来掌握大调音阶。\n\n```\n\n\n![在这里插入图片描述](/blog/img/guitar/yinjie/yinjie_1.jpg)\n###### 2.自然大调音阶\n```javascript\n自然大调音阶我们也简称为大调音阶，大调音阶通常是学习音乐与演奏乐器时首先接触的音阶类型，\n也是运用得最多的音阶。大调音阶是你将要学习其他调式和音阶的基础，\n所以我们必须在乐器上能熟练的演奏各大调的音阶。\n\n大调音阶是按照“全全半全全全半”的音程推算方式上行叠加的，“全”代表全音（大二度），\n“半”代表半音（小二度）。\n\n```\n![在这里插入图片描述](/blog/img/guitar/yinjie/yinjie_2.jpg)\n\n\n```javascript\n无论从哪个音开始，如果你遵循这个公式来推算，你都会得到一个大调音阶，音乐中有12个音，\n所以说就能构成12种音高不同的自然大调。音阶是音乐中的重点内容，\n音阶的学习是每一位音乐爱好者需要长期坚持和思考的内容。\n记忆每个音阶的每个组成音是我们必须要突破的，熟记下表每个调的组成音，\n并能用首调和固定调的方式唱出来。\n\n\n```\n\n![在这里插入图片描述](/blog/img/guitar/yinjie/yinjie_3.jpg)\n![在这里插入图片描述](/blog/img/guitar/yinjie/yinjie_4.jpg)\n\n## 二.小调音阶\n```javascript\n小调是相对于大调而言的，现代音乐两种主要调式之一。小调音阶一般分自然小调，和声小调，旋律小调。\n小调音阶是按照“全半全全半全全”的音程推算方式上行叠加的，\n即 “1、 2 、 降3 、 4 、5 、降6 、降7”、 1（第2个八度），\n这就是小调的组成规则。用自然小调写出的歌听上去忧郁、唯美。\n```\n\n\n## 三.关系大小调\n```javascript\n所谓关系大小调，或称“平行大小调”，是指调号相同的一对大小调，它们互相为对方的关系大调或关系小调。\n关系大小调是指调号相同、音列关系相同、主音高度不同的两个调式（一个大调式、一个小调式）。\n构成平行大小调的两个调式的主音之间的音高关系为小三度。\n由于它们的调号是相同的，在同为自然调式时，它们的的基本音组和音列关系是相同的，只有主音音高不同。\n当已知一个大调式时，在其主音下方的小三度即为它的平行小调式的主音所在；\n同样，当已知一个小调式时，在其主音上方的小三度即为它的平行大调式的主音所在。\n也可以说一个自然大调式的Ⅵ级音就是它的平行小调的主音；\n一个自然小调式的Ⅲ级音就是它的平行大调式的主音。\n\n```\n\n","source":"_posts/音阶理论总结.md","raw":"---\ntitle: 音阶理论总结\ncatalog: true\ndate: 2018-09-03 00:56:37\nsubtitle: \"音阶理论总结\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags: guitar\n\n---\n## 一.大调音阶\n###### 1.音阶的基本概念\n```javascript\n一组高低不同的音符，依照规律，阶梯状地排列起来，\n或以全音、半音以及其他音程顺次排列的一串音称之为音阶。\n\n在音乐中，有很多音阶，有的音阶有固定的名字，而有的并没有，每种音阶都有它存在的意义。\n流行音乐中大部分的歌曲都是使用的自然大调音阶，\n我们经常听到的国内流行歌曲大部分也是用自然大调音阶创作出来的，所以我们首先来掌握大调音阶。\n\n```\n\n\n![在这里插入图片描述](/blog/img/guitar/yinjie/yinjie_1.jpg)\n###### 2.自然大调音阶\n```javascript\n自然大调音阶我们也简称为大调音阶，大调音阶通常是学习音乐与演奏乐器时首先接触的音阶类型，\n也是运用得最多的音阶。大调音阶是你将要学习其他调式和音阶的基础，\n所以我们必须在乐器上能熟练的演奏各大调的音阶。\n\n大调音阶是按照“全全半全全全半”的音程推算方式上行叠加的，“全”代表全音（大二度），\n“半”代表半音（小二度）。\n\n```\n![在这里插入图片描述](/blog/img/guitar/yinjie/yinjie_2.jpg)\n\n\n```javascript\n无论从哪个音开始，如果你遵循这个公式来推算，你都会得到一个大调音阶，音乐中有12个音，\n所以说就能构成12种音高不同的自然大调。音阶是音乐中的重点内容，\n音阶的学习是每一位音乐爱好者需要长期坚持和思考的内容。\n记忆每个音阶的每个组成音是我们必须要突破的，熟记下表每个调的组成音，\n并能用首调和固定调的方式唱出来。\n\n\n```\n\n![在这里插入图片描述](/blog/img/guitar/yinjie/yinjie_3.jpg)\n![在这里插入图片描述](/blog/img/guitar/yinjie/yinjie_4.jpg)\n\n## 二.小调音阶\n```javascript\n小调是相对于大调而言的，现代音乐两种主要调式之一。小调音阶一般分自然小调，和声小调，旋律小调。\n小调音阶是按照“全半全全半全全”的音程推算方式上行叠加的，\n即 “1、 2 、 降3 、 4 、5 、降6 、降7”、 1（第2个八度），\n这就是小调的组成规则。用自然小调写出的歌听上去忧郁、唯美。\n```\n\n\n## 三.关系大小调\n```javascript\n所谓关系大小调，或称“平行大小调”，是指调号相同的一对大小调，它们互相为对方的关系大调或关系小调。\n关系大小调是指调号相同、音列关系相同、主音高度不同的两个调式（一个大调式、一个小调式）。\n构成平行大小调的两个调式的主音之间的音高关系为小三度。\n由于它们的调号是相同的，在同为自然调式时，它们的的基本音组和音列关系是相同的，只有主音音高不同。\n当已知一个大调式时，在其主音下方的小三度即为它的平行小调式的主音所在；\n同样，当已知一个小调式时，在其主音上方的小三度即为它的平行大调式的主音所在。\n也可以说一个自然大调式的Ⅵ级音就是它的平行小调的主音；\n一个自然小调式的Ⅲ级音就是它的平行大调式的主音。\n\n```\n\n","slug":"音阶理论总结","published":1,"updated":"2020-11-05T06:58:09.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xmq001f98v5tyq5wt4i","content":"<h2 id=\"一大调音阶\">一.大调音阶</h2>\n<h6 id=\"1音阶的基本概念\">1.音阶的基本概念</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一组高低不同的音符，依照规律，阶梯状地排列起来，</span><br><span class=\"line\">或以全音、半音以及其他音程顺次排列的一串音称之为音阶。</span><br><span class=\"line\"></span><br><span class=\"line\">在音乐中，有很多音阶，有的音阶有固定的名字，而有的并没有，每种音阶都有它存在的意义。</span><br><span class=\"line\">流行音乐中大部分的歌曲都是使用的自然大调音阶，</span><br><span class=\"line\">我们经常听到的国内流行歌曲大部分也是用自然大调音阶创作出来的，所以我们首先来掌握大调音阶。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/yinjie/yinjie_1.jpg\" alt=\"在这里插入图片描述\"></p>\n<h6 id=\"2自然大调音阶\">2.自然大调音阶</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自然大调音阶我们也简称为大调音阶，大调音阶通常是学习音乐与演奏乐器时首先接触的音阶类型，</span><br><span class=\"line\">也是运用得最多的音阶。大调音阶是你将要学习其他调式和音阶的基础，</span><br><span class=\"line\">所以我们必须在乐器上能熟练的演奏各大调的音阶。</span><br><span class=\"line\"></span><br><span class=\"line\">大调音阶是按照“全全半全全全半”的音程推算方式上行叠加的，“全”代表全音（大二度），</span><br><span class=\"line\">“半”代表半音（小二度）。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/yinjie/yinjie_2.jpg\" alt=\"在这里插入图片描述\"></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无论从哪个音开始，如果你遵循这个公式来推算，你都会得到一个大调音阶，音乐中有<span class=\"number\">12</span>个音，</span><br><span class=\"line\">所以说就能构成<span class=\"number\">12</span>种音高不同的自然大调。音阶是音乐中的重点内容，</span><br><span class=\"line\">音阶的学习是每一位音乐爱好者需要长期坚持和思考的内容。</span><br><span class=\"line\">记忆每个音阶的每个组成音是我们必须要突破的，熟记下表每个调的组成音，</span><br><span class=\"line\">并能用首调和固定调的方式唱出来。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/yinjie/yinjie_3.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/yinjie/yinjie_4.jpg\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"二小调音阶\">二.小调音阶</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小调是相对于大调而言的，现代音乐两种主要调式之一。小调音阶一般分自然小调，和声小调，旋律小调。</span><br><span class=\"line\">小调音阶是按照“全半全全半全全”的音程推算方式上行叠加的，</span><br><span class=\"line\">即 “<span class=\"number\">1</span>、 <span class=\"number\">2</span> 、 降<span class=\"number\">3</span> 、 <span class=\"number\">4</span> 、<span class=\"number\">5</span> 、降<span class=\"number\">6</span> 、降<span class=\"number\">7</span>”、 <span class=\"number\">1</span>（第<span class=\"number\">2</span>个八度），</span><br><span class=\"line\">这就是小调的组成规则。用自然小调写出的歌听上去忧郁、唯美。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三关系大小调\">三.关系大小调</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所谓关系大小调，或称“平行大小调”，是指调号相同的一对大小调，它们互相为对方的关系大调或关系小调。</span><br><span class=\"line\">关系大小调是指调号相同、音列关系相同、主音高度不同的两个调式（一个大调式、一个小调式）。</span><br><span class=\"line\">构成平行大小调的两个调式的主音之间的音高关系为小三度。</span><br><span class=\"line\">由于它们的调号是相同的，在同为自然调式时，它们的的基本音组和音列关系是相同的，只有主音音高不同。</span><br><span class=\"line\">当已知一个大调式时，在其主音下方的小三度即为它的平行小调式的主音所在；</span><br><span class=\"line\">同样，当已知一个小调式时，在其主音上方的小三度即为它的平行大调式的主音所在。</span><br><span class=\"line\">也可以说一个自然大调式的Ⅵ级音就是它的平行小调的主音；</span><br><span class=\"line\">一个自然小调式的Ⅲ级音就是它的平行大调式的主音。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>一.大调音阶</h2>\n<h6>1.音阶的基本概念</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一组高低不同的音符，依照规律，阶梯状地排列起来，</span><br><span class=\"line\">或以全音、半音以及其他音程顺次排列的一串音称之为音阶。</span><br><span class=\"line\"></span><br><span class=\"line\">在音乐中，有很多音阶，有的音阶有固定的名字，而有的并没有，每种音阶都有它存在的意义。</span><br><span class=\"line\">流行音乐中大部分的歌曲都是使用的自然大调音阶，</span><br><span class=\"line\">我们经常听到的国内流行歌曲大部分也是用自然大调音阶创作出来的，所以我们首先来掌握大调音阶。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/yinjie/yinjie_1.jpg\" alt=\"在这里插入图片描述\"></p>\n<h6>2.自然大调音阶</h6>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自然大调音阶我们也简称为大调音阶，大调音阶通常是学习音乐与演奏乐器时首先接触的音阶类型，</span><br><span class=\"line\">也是运用得最多的音阶。大调音阶是你将要学习其他调式和音阶的基础，</span><br><span class=\"line\">所以我们必须在乐器上能熟练的演奏各大调的音阶。</span><br><span class=\"line\"></span><br><span class=\"line\">大调音阶是按照“全全半全全全半”的音程推算方式上行叠加的，“全”代表全音（大二度），</span><br><span class=\"line\">“半”代表半音（小二度）。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/yinjie/yinjie_2.jpg\" alt=\"在这里插入图片描述\"></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无论从哪个音开始，如果你遵循这个公式来推算，你都会得到一个大调音阶，音乐中有<span class=\"number\">12</span>个音，</span><br><span class=\"line\">所以说就能构成<span class=\"number\">12</span>种音高不同的自然大调。音阶是音乐中的重点内容，</span><br><span class=\"line\">音阶的学习是每一位音乐爱好者需要长期坚持和思考的内容。</span><br><span class=\"line\">记忆每个音阶的每个组成音是我们必须要突破的，熟记下表每个调的组成音，</span><br><span class=\"line\">并能用首调和固定调的方式唱出来。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/blog/img/guitar/yinjie/yinjie_3.jpg\" alt=\"在这里插入图片描述\">\n<img src=\"/blog/img/guitar/yinjie/yinjie_4.jpg\" alt=\"在这里插入图片描述\"></p>\n<h2>二.小调音阶</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小调是相对于大调而言的，现代音乐两种主要调式之一。小调音阶一般分自然小调，和声小调，旋律小调。</span><br><span class=\"line\">小调音阶是按照“全半全全半全全”的音程推算方式上行叠加的，</span><br><span class=\"line\">即 “<span class=\"number\">1</span>、 <span class=\"number\">2</span> 、 降<span class=\"number\">3</span> 、 <span class=\"number\">4</span> 、<span class=\"number\">5</span> 、降<span class=\"number\">6</span> 、降<span class=\"number\">7</span>”、 <span class=\"number\">1</span>（第<span class=\"number\">2</span>个八度），</span><br><span class=\"line\">这就是小调的组成规则。用自然小调写出的歌听上去忧郁、唯美。</span><br></pre></td></tr></table></figure></p>\n<h2>三.关系大小调</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所谓关系大小调，或称“平行大小调”，是指调号相同的一对大小调，它们互相为对方的关系大调或关系小调。</span><br><span class=\"line\">关系大小调是指调号相同、音列关系相同、主音高度不同的两个调式（一个大调式、一个小调式）。</span><br><span class=\"line\">构成平行大小调的两个调式的主音之间的音高关系为小三度。</span><br><span class=\"line\">由于它们的调号是相同的，在同为自然调式时，它们的的基本音组和音列关系是相同的，只有主音音高不同。</span><br><span class=\"line\">当已知一个大调式时，在其主音下方的小三度即为它的平行小调式的主音所在；</span><br><span class=\"line\">同样，当已知一个小调式时，在其主音上方的小三度即为它的平行大调式的主音所在。</span><br><span class=\"line\">也可以说一个自然大调式的Ⅵ级音就是它的平行小调的主音；</span><br><span class=\"line\">一个自然小调式的Ⅲ级音就是它的平行大调式的主音。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Stream常用场景","catalog":true,"date":"2019-09-19T08:33:05.000Z","subtitle":"Stream常用场景","header-img":"/blog/img/article_header/article_header.png","_content":"## Stream常用场景\n```\n整合stream各种不同场合的使用\n```\n#### javaBean \n```\npublic class Student implements Comparable<Student>{\n    private String name;\n    private Integer age;\n\n    public Student(Integer age, String name) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public int compareTo(Student student) {\n        return this.age - student.getAge();\n    }\n}\n\n\n```\n#### 使用场景\n```\npublic class SteamTest extends BaseTest{\n    final static List<Integer> dataList = new ArrayList<>();\n    final static List<Student> studentList = new ArrayList<>();\n    final static List<String> strList = new ArrayList<>();\n    private static final List<String> NAME_ORDER = Arrays.asList(\"jocy\", \"tony\", \"cloudy\", \"jack\");\n\n    {\n        dataList.add(1);\n        dataList.add(1);\n        dataList.add(3);\n        dataList.add(4);\n        dataList.add(2);\n\n        Student student1 = new Student(18, \"jocy\");\n        Student student2 = new Student(16, \"cloudy\");\n        Student student3 = new Student(22, \"jack\");\n        Student student4 = new Student(53, \"tony\");\n        studentList.add(student1);\n        studentList.add(student2);\n        studentList.add(student3);\n        studentList.add(student4);\n\n        strList.add(\"a\");\n        strList.add(\"b\");\n        strList.add(\"c\");\n        strList.add(\"d\");\n    }\n\n    //计数\n    @Test\n    public void test1() {\n        System.out.println(dataList.stream().count());\n    }\n\n    //去重\n    @Test\n    public void test2() {\n        dataList.stream().distinct().forEach(System.out::println);\n    }\n\n    //过滤\n    @Test\n    public void test3() {\n        dataList.stream().filter(integer -> integer > 1).forEach(System.out::println);\n    }\n\n    //过滤\n    @Test\n    public void test4() {\n        dataList.removeIf(integer -> integer <= 1);\n        dataList.forEach(System.out::println);\n    }\n\n    //合并\n    @Test\n    public void test5() {\n        Stream.concat(dataList.stream(), strList.stream()).forEach(System.out::println);\n    }\n\n    /**\n     * 数据类型转换\n     * 新生成一个Stream只包含转换生成的元素\n     */\n    @Test\n    public void test6() {\n        strList.stream().map(String::toUpperCase).forEach(System.out::println);\n    }\n\n    /**\n     * 数据类型转换\n     * flatMap方法与map方法类似，都是将原Stream中的每一个元素通过转换函数转换，不同的是，该换转函数的对象是一个Stream\n     * 不会再创建一个新的Stream，而是将原Stream的元素取代为转换的Stream\n     */\n\n    @Test\n    public void test7() {\n        strList.stream().flatMap(item -> Stream.of(item.toUpperCase())).forEach(System.out::println);\n    }\n\n    //过滤掉原Stream中的前N个元素，返回剩下的元素所组成的新Stream\n    @Test\n    public void test8() {\n        dataList.stream().skip(2).forEach(System.out::println);\n    }\n\n    /**\n     * 排序（升序）\n     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream\n     * sorterd有两种变体sorted()，sorted(Comparator)\n     */\n    @Test\n    public void test9() {\n        dataList.stream().sorted().forEach(System.out::println);\n    }\n\n    /**\n     * 排序（降序）\n     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream\n     * sorterd有两种变体sorted()，sorted(Comparator)\n     */\n    @Test\n    public void test10() {\n        dataList.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);\n    }\n\n\n    /**\n     * 排序（比较器）\n     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream\n     * sorterd有两种变体sorted()，sorted(Comparator)\n     */\n    @Test\n    public void test11() {\n        studentList.stream().sorted(Comparator.comparing(Student::getAge)).forEach(student -> System.out.println(student.getName()));\n    }\n\n    //按字符串排序\n    @Test\n    public void test111() {\n        List<Student> students = studentList.stream().sorted(Comparator.comparing(Student::getName, (x, y) -> {\n            for (String sort : NAME_ORDER) {\n                if (sort.equals(x) || sort.equals(y)) {\n                    if (x.equals(y)) {\n                        return 0;\n                    } else if (sort.equals(x)) {\n                        return -1;\n                    } else {\n                        return 1;\n                    }\n                }\n            }\n            return 0;\n        })).collect(Collectors.toList());\n    }\n\n\n    /**\n     * 最大值\n     * Stream根据比较器Comparator，进行排序(升序或者是降序)，所谓的最大值就是从新进行排序的，\n     * max就是取重新排序后的最后一个值，而min取排序后的第一个值。\n     * 不管是最大值还是最小值起决定作用的是Comparator，它决定了元素比较大小的原则\n     */\n    @Test\n    public void test12() {\n        Optional<Integer> max = dataList.stream().max((o1, o2) -> o2 - o1);\n        System.out.println(max.get());\n    }\n\n    /**\n     * 最小值\n     * Stream根据比较器Comparator，进行排序(升序或者是降序)，所谓的最大值就是从新进行排序的，\n     * max就是取重新排序后的最后一个值，而min取排序后的第一个值。\n     * 不管是最大值还是最小值起决定作用的是Comparator，它决定了元素比较大小的原则\n     */\n    @Test\n    public void test13() {\n        Optional<Integer> min = dataList.stream().min((o1, o2) -> o2 - o1);\n        System.out.println(min.get());\n    }\n\n    /**\n     * 判断Stream中的元素是否全部满足指定条件\n     */\n    @Test\n    public void test14() {\n        boolean match = dataList.stream().allMatch(integer -> integer > 2);\n        System.out.println(match);\n    }\n\n    /**\n     * 判断Stream中的元素是否有满足指定条件\n     */\n    @Test\n    public void test15() {\n        boolean match = dataList.stream().anyMatch(integer -> integer > 2);\n        System.out.println(match);\n    }\n\n    /**\n     * 此操作的行动是不确定的，其会自由的选择Stream中的任何元素\n     * 在并行操作中，在同一个Stram中多次调用，可能会不同的结果。\n     * 在串行调用时，Debug了几次，发现每次都是获取的第一个元素，个人感觉在串行调用时，应该默认的是获取第一个元素。\n     */\n    @Test\n    public void test16() {\n        Optional<Integer> any = dataList.stream().findAny();\n        System.out.println(any.get());\n    }\n\n    /**\n     * 获取第一个元素\n     */\n    @Test\n    public void test17() {\n        Optional<Integer> any = dataList.stream().findFirst();\n        System.out.println(any.get());\n    }\n\n    /**\n     * 截取前n位元素\n     */\n    @Test\n    public void test18() {\n        dataList.stream().limit(5).forEach(System.out::println);\n    }\n\n    /**\n     * 如果所有元素都不满足条件，返回true；否则，返回false.\n     */\n    @Test\n    public void test19() {\n        boolean match = dataList.stream().noneMatch(integer -> integer > 2);\n        System.out.println(match);\n    }\n\n    /**\n     * collect收集器\n     */\n    @Test\n    public void test20() {\n        String collect1 = studentList.stream().map(Student::getName).collect(Collectors.joining());\n        System.out.println(collect1);\n        String collect2 = studentList.stream().map(Student::getName).collect(Collectors.joining(\",\"));\n        System.out.println(collect2);\n        studentList.stream().map(Student::getName).collect(Collectors.toList()).forEach(System.out::println);\n        studentList.stream().map(Student::getName).collect(Collectors.toSet()).forEach(System.out::println);\n    }\n\n    /**\n     * 求和\n     */\n    @Test\n    public void test21() {\n        int sum = studentList.stream().mapToInt(Student::getAge).sum();\n        System.out.println(sum);\n    }\n\n    /**\n     * list 转map\n     */\n    @Test\n    public void test22() {\n        Map<String, List<Student>> map1 = studentList.stream().collect(Collectors.groupingBy(Student::getName));\n        Map<Integer, Set<String>> map2 = studentList.stream()\n            .collect(Collectors.groupingBy(Student::getAge, Collectors.mapping(Student::getName, Collectors.toSet())));\n        Map<Integer, Long> map3 = studentList.stream()\n            .collect(\n                Collectors.groupingBy(Student::getAge, Collectors.mapping(Student::getName, Collectors.counting())));\n        Map<Integer, Student> map4 = studentList.stream()\n            .collect(Collectors.toMap(Student::getAge, Function.identity(), (item1, item2) -> item1));\n        System.out.println(map4);\n    }\n\n}\n\n    \n```\n\n","source":"_posts/Stream常用场景.md","raw":"---\ntitle: Stream常用场景\ncatalog: true\ndate: 2019-09-19 16:33:05\nsubtitle: \"Stream常用场景\"\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n## Stream常用场景\n```\n整合stream各种不同场合的使用\n```\n#### javaBean \n```\npublic class Student implements Comparable<Student>{\n    private String name;\n    private Integer age;\n\n    public Student(Integer age, String name) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public int compareTo(Student student) {\n        return this.age - student.getAge();\n    }\n}\n\n\n```\n#### 使用场景\n```\npublic class SteamTest extends BaseTest{\n    final static List<Integer> dataList = new ArrayList<>();\n    final static List<Student> studentList = new ArrayList<>();\n    final static List<String> strList = new ArrayList<>();\n    private static final List<String> NAME_ORDER = Arrays.asList(\"jocy\", \"tony\", \"cloudy\", \"jack\");\n\n    {\n        dataList.add(1);\n        dataList.add(1);\n        dataList.add(3);\n        dataList.add(4);\n        dataList.add(2);\n\n        Student student1 = new Student(18, \"jocy\");\n        Student student2 = new Student(16, \"cloudy\");\n        Student student3 = new Student(22, \"jack\");\n        Student student4 = new Student(53, \"tony\");\n        studentList.add(student1);\n        studentList.add(student2);\n        studentList.add(student3);\n        studentList.add(student4);\n\n        strList.add(\"a\");\n        strList.add(\"b\");\n        strList.add(\"c\");\n        strList.add(\"d\");\n    }\n\n    //计数\n    @Test\n    public void test1() {\n        System.out.println(dataList.stream().count());\n    }\n\n    //去重\n    @Test\n    public void test2() {\n        dataList.stream().distinct().forEach(System.out::println);\n    }\n\n    //过滤\n    @Test\n    public void test3() {\n        dataList.stream().filter(integer -> integer > 1).forEach(System.out::println);\n    }\n\n    //过滤\n    @Test\n    public void test4() {\n        dataList.removeIf(integer -> integer <= 1);\n        dataList.forEach(System.out::println);\n    }\n\n    //合并\n    @Test\n    public void test5() {\n        Stream.concat(dataList.stream(), strList.stream()).forEach(System.out::println);\n    }\n\n    /**\n     * 数据类型转换\n     * 新生成一个Stream只包含转换生成的元素\n     */\n    @Test\n    public void test6() {\n        strList.stream().map(String::toUpperCase).forEach(System.out::println);\n    }\n\n    /**\n     * 数据类型转换\n     * flatMap方法与map方法类似，都是将原Stream中的每一个元素通过转换函数转换，不同的是，该换转函数的对象是一个Stream\n     * 不会再创建一个新的Stream，而是将原Stream的元素取代为转换的Stream\n     */\n\n    @Test\n    public void test7() {\n        strList.stream().flatMap(item -> Stream.of(item.toUpperCase())).forEach(System.out::println);\n    }\n\n    //过滤掉原Stream中的前N个元素，返回剩下的元素所组成的新Stream\n    @Test\n    public void test8() {\n        dataList.stream().skip(2).forEach(System.out::println);\n    }\n\n    /**\n     * 排序（升序）\n     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream\n     * sorterd有两种变体sorted()，sorted(Comparator)\n     */\n    @Test\n    public void test9() {\n        dataList.stream().sorted().forEach(System.out::println);\n    }\n\n    /**\n     * 排序（降序）\n     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream\n     * sorterd有两种变体sorted()，sorted(Comparator)\n     */\n    @Test\n    public void test10() {\n        dataList.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);\n    }\n\n\n    /**\n     * 排序（比较器）\n     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream\n     * sorterd有两种变体sorted()，sorted(Comparator)\n     */\n    @Test\n    public void test11() {\n        studentList.stream().sorted(Comparator.comparing(Student::getAge)).forEach(student -> System.out.println(student.getName()));\n    }\n\n    //按字符串排序\n    @Test\n    public void test111() {\n        List<Student> students = studentList.stream().sorted(Comparator.comparing(Student::getName, (x, y) -> {\n            for (String sort : NAME_ORDER) {\n                if (sort.equals(x) || sort.equals(y)) {\n                    if (x.equals(y)) {\n                        return 0;\n                    } else if (sort.equals(x)) {\n                        return -1;\n                    } else {\n                        return 1;\n                    }\n                }\n            }\n            return 0;\n        })).collect(Collectors.toList());\n    }\n\n\n    /**\n     * 最大值\n     * Stream根据比较器Comparator，进行排序(升序或者是降序)，所谓的最大值就是从新进行排序的，\n     * max就是取重新排序后的最后一个值，而min取排序后的第一个值。\n     * 不管是最大值还是最小值起决定作用的是Comparator，它决定了元素比较大小的原则\n     */\n    @Test\n    public void test12() {\n        Optional<Integer> max = dataList.stream().max((o1, o2) -> o2 - o1);\n        System.out.println(max.get());\n    }\n\n    /**\n     * 最小值\n     * Stream根据比较器Comparator，进行排序(升序或者是降序)，所谓的最大值就是从新进行排序的，\n     * max就是取重新排序后的最后一个值，而min取排序后的第一个值。\n     * 不管是最大值还是最小值起决定作用的是Comparator，它决定了元素比较大小的原则\n     */\n    @Test\n    public void test13() {\n        Optional<Integer> min = dataList.stream().min((o1, o2) -> o2 - o1);\n        System.out.println(min.get());\n    }\n\n    /**\n     * 判断Stream中的元素是否全部满足指定条件\n     */\n    @Test\n    public void test14() {\n        boolean match = dataList.stream().allMatch(integer -> integer > 2);\n        System.out.println(match);\n    }\n\n    /**\n     * 判断Stream中的元素是否有满足指定条件\n     */\n    @Test\n    public void test15() {\n        boolean match = dataList.stream().anyMatch(integer -> integer > 2);\n        System.out.println(match);\n    }\n\n    /**\n     * 此操作的行动是不确定的，其会自由的选择Stream中的任何元素\n     * 在并行操作中，在同一个Stram中多次调用，可能会不同的结果。\n     * 在串行调用时，Debug了几次，发现每次都是获取的第一个元素，个人感觉在串行调用时，应该默认的是获取第一个元素。\n     */\n    @Test\n    public void test16() {\n        Optional<Integer> any = dataList.stream().findAny();\n        System.out.println(any.get());\n    }\n\n    /**\n     * 获取第一个元素\n     */\n    @Test\n    public void test17() {\n        Optional<Integer> any = dataList.stream().findFirst();\n        System.out.println(any.get());\n    }\n\n    /**\n     * 截取前n位元素\n     */\n    @Test\n    public void test18() {\n        dataList.stream().limit(5).forEach(System.out::println);\n    }\n\n    /**\n     * 如果所有元素都不满足条件，返回true；否则，返回false.\n     */\n    @Test\n    public void test19() {\n        boolean match = dataList.stream().noneMatch(integer -> integer > 2);\n        System.out.println(match);\n    }\n\n    /**\n     * collect收集器\n     */\n    @Test\n    public void test20() {\n        String collect1 = studentList.stream().map(Student::getName).collect(Collectors.joining());\n        System.out.println(collect1);\n        String collect2 = studentList.stream().map(Student::getName).collect(Collectors.joining(\",\"));\n        System.out.println(collect2);\n        studentList.stream().map(Student::getName).collect(Collectors.toList()).forEach(System.out::println);\n        studentList.stream().map(Student::getName).collect(Collectors.toSet()).forEach(System.out::println);\n    }\n\n    /**\n     * 求和\n     */\n    @Test\n    public void test21() {\n        int sum = studentList.stream().mapToInt(Student::getAge).sum();\n        System.out.println(sum);\n    }\n\n    /**\n     * list 转map\n     */\n    @Test\n    public void test22() {\n        Map<String, List<Student>> map1 = studentList.stream().collect(Collectors.groupingBy(Student::getName));\n        Map<Integer, Set<String>> map2 = studentList.stream()\n            .collect(Collectors.groupingBy(Student::getAge, Collectors.mapping(Student::getName, Collectors.toSet())));\n        Map<Integer, Long> map3 = studentList.stream()\n            .collect(\n                Collectors.groupingBy(Student::getAge, Collectors.mapping(Student::getName, Collectors.counting())));\n        Map<Integer, Student> map4 = studentList.stream()\n            .collect(Collectors.toMap(Student::getAge, Function.identity(), (item1, item2) -> item1));\n        System.out.println(map4);\n    }\n\n}\n\n    \n```\n\n","slug":"Stream常用场景","published":1,"updated":"2020-11-05T06:58:09.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xn2001l98v59kw99yap","content":"<h2 id=\"stream常用场景\">Stream常用场景</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整合stream各种不同场合的使用</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"javabean\">javaBean</h4>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student implements Comparable&lt;Student&gt;&#123;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Student(Integer age, String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(Integer age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compareTo(Student student) &#123;</span><br><span class=\"line\">        return this.age - student.getAge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用场景\">使用场景</h4>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SteamTest extends BaseTest&#123;</span><br><span class=\"line\">    final static List&lt;Integer&gt; dataList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    final static List&lt;Student&gt; studentList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    final static List&lt;String&gt; strList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    private static final List&lt;String&gt; NAME_ORDER = Arrays.asList(&quot;jocy&quot;, &quot;tony&quot;, &quot;cloudy&quot;, &quot;jack&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dataList.add(1);</span><br><span class=\"line\">        dataList.add(1);</span><br><span class=\"line\">        dataList.add(3);</span><br><span class=\"line\">        dataList.add(4);</span><br><span class=\"line\">        dataList.add(2);</span><br><span class=\"line\"></span><br><span class=\"line\">        Student student1 = new Student(18, &quot;jocy&quot;);</span><br><span class=\"line\">        Student student2 = new Student(16, &quot;cloudy&quot;);</span><br><span class=\"line\">        Student student3 = new Student(22, &quot;jack&quot;);</span><br><span class=\"line\">        Student student4 = new Student(53, &quot;tony&quot;);</span><br><span class=\"line\">        studentList.add(student1);</span><br><span class=\"line\">        studentList.add(student2);</span><br><span class=\"line\">        studentList.add(student3);</span><br><span class=\"line\">        studentList.add(student4);</span><br><span class=\"line\"></span><br><span class=\"line\">        strList.add(&quot;a&quot;);</span><br><span class=\"line\">        strList.add(&quot;b&quot;);</span><br><span class=\"line\">        strList.add(&quot;c&quot;);</span><br><span class=\"line\">        strList.add(&quot;d&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //计数</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test1() &#123;</span><br><span class=\"line\">        System.out.println(dataList.stream().count());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //去重</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test2() &#123;</span><br><span class=\"line\">        dataList.stream().distinct().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //过滤</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test3() &#123;</span><br><span class=\"line\">        dataList.stream().filter(integer -&gt; integer &gt; 1).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //过滤</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test4() &#123;</span><br><span class=\"line\">        dataList.removeIf(integer -&gt; integer &lt;= 1);</span><br><span class=\"line\">        dataList.forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //合并</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test5() &#123;</span><br><span class=\"line\">        Stream.concat(dataList.stream(), strList.stream()).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 数据类型转换</span><br><span class=\"line\">     * 新生成一个Stream只包含转换生成的元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test6() &#123;</span><br><span class=\"line\">        strList.stream().map(String::toUpperCase).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 数据类型转换</span><br><span class=\"line\">     * flatMap方法与map方法类似，都是将原Stream中的每一个元素通过转换函数转换，不同的是，该换转函数的对象是一个Stream</span><br><span class=\"line\">     * 不会再创建一个新的Stream，而是将原Stream的元素取代为转换的Stream</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test7() &#123;</span><br><span class=\"line\">        strList.stream().flatMap(item -&gt; Stream.of(item.toUpperCase())).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //过滤掉原Stream中的前N个元素，返回剩下的元素所组成的新Stream</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test8() &#123;</span><br><span class=\"line\">        dataList.stream().skip(2).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 排序（升序）</span><br><span class=\"line\">     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream</span><br><span class=\"line\">     * sorterd有两种变体sorted()，sorted(Comparator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test9() &#123;</span><br><span class=\"line\">        dataList.stream().sorted().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 排序（降序）</span><br><span class=\"line\">     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream</span><br><span class=\"line\">     * sorterd有两种变体sorted()，sorted(Comparator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test10() &#123;</span><br><span class=\"line\">        dataList.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 排序（比较器）</span><br><span class=\"line\">     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream</span><br><span class=\"line\">     * sorterd有两种变体sorted()，sorted(Comparator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test11() &#123;</span><br><span class=\"line\">        studentList.stream().sorted(Comparator.comparing(Student::getAge)).forEach(student -&gt; System.out.println(student.getName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //按字符串排序</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test111() &#123;</span><br><span class=\"line\">        List&lt;Student&gt; students = studentList.stream().sorted(Comparator.comparing(Student::getName, (x, y) -&gt; &#123;</span><br><span class=\"line\">            for (String sort : NAME_ORDER) &#123;</span><br><span class=\"line\">                if (sort.equals(x) || sort.equals(y)) &#123;</span><br><span class=\"line\">                    if (x.equals(y)) &#123;</span><br><span class=\"line\">                        return 0;</span><br><span class=\"line\">                    &#125; else if (sort.equals(x)) &#123;</span><br><span class=\"line\">                        return -1;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        return 1;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;)).collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 最大值</span><br><span class=\"line\">     * Stream根据比较器Comparator，进行排序(升序或者是降序)，所谓的最大值就是从新进行排序的，</span><br><span class=\"line\">     * max就是取重新排序后的最后一个值，而min取排序后的第一个值。</span><br><span class=\"line\">     * 不管是最大值还是最小值起决定作用的是Comparator，它决定了元素比较大小的原则</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test12() &#123;</span><br><span class=\"line\">        Optional&lt;Integer&gt; max = dataList.stream().max((o1, o2) -&gt; o2 - o1);</span><br><span class=\"line\">        System.out.println(max.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 最小值</span><br><span class=\"line\">     * Stream根据比较器Comparator，进行排序(升序或者是降序)，所谓的最大值就是从新进行排序的，</span><br><span class=\"line\">     * max就是取重新排序后的最后一个值，而min取排序后的第一个值。</span><br><span class=\"line\">     * 不管是最大值还是最小值起决定作用的是Comparator，它决定了元素比较大小的原则</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test13() &#123;</span><br><span class=\"line\">        Optional&lt;Integer&gt; min = dataList.stream().min((o1, o2) -&gt; o2 - o1);</span><br><span class=\"line\">        System.out.println(min.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断Stream中的元素是否全部满足指定条件</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test14() &#123;</span><br><span class=\"line\">        boolean match = dataList.stream().allMatch(integer -&gt; integer &gt; 2);</span><br><span class=\"line\">        System.out.println(match);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断Stream中的元素是否有满足指定条件</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test15() &#123;</span><br><span class=\"line\">        boolean match = dataList.stream().anyMatch(integer -&gt; integer &gt; 2);</span><br><span class=\"line\">        System.out.println(match);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 此操作的行动是不确定的，其会自由的选择Stream中的任何元素</span><br><span class=\"line\">     * 在并行操作中，在同一个Stram中多次调用，可能会不同的结果。</span><br><span class=\"line\">     * 在串行调用时，Debug了几次，发现每次都是获取的第一个元素，个人感觉在串行调用时，应该默认的是获取第一个元素。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test16() &#123;</span><br><span class=\"line\">        Optional&lt;Integer&gt; any = dataList.stream().findAny();</span><br><span class=\"line\">        System.out.println(any.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取第一个元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test17() &#123;</span><br><span class=\"line\">        Optional&lt;Integer&gt; any = dataList.stream().findFirst();</span><br><span class=\"line\">        System.out.println(any.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 截取前n位元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test18() &#123;</span><br><span class=\"line\">        dataList.stream().limit(5).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 如果所有元素都不满足条件，返回true；否则，返回false.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test19() &#123;</span><br><span class=\"line\">        boolean match = dataList.stream().noneMatch(integer -&gt; integer &gt; 2);</span><br><span class=\"line\">        System.out.println(match);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * collect收集器</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test20() &#123;</span><br><span class=\"line\">        String collect1 = studentList.stream().map(Student::getName).collect(Collectors.joining());</span><br><span class=\"line\">        System.out.println(collect1);</span><br><span class=\"line\">        String collect2 = studentList.stream().map(Student::getName).collect(Collectors.joining(&quot;,&quot;));</span><br><span class=\"line\">        System.out.println(collect2);</span><br><span class=\"line\">        studentList.stream().map(Student::getName).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class=\"line\">        studentList.stream().map(Student::getName).collect(Collectors.toSet()).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求和</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test21() &#123;</span><br><span class=\"line\">        int sum = studentList.stream().mapToInt(Student::getAge).sum();</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * list 转map</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test22() &#123;</span><br><span class=\"line\">        Map&lt;String, List&lt;Student&gt;&gt; map1 = studentList.stream().collect(Collectors.groupingBy(Student::getName));</span><br><span class=\"line\">        Map&lt;Integer, Set&lt;String&gt;&gt; map2 = studentList.stream()</span><br><span class=\"line\">            .collect(Collectors.groupingBy(Student::getAge, Collectors.mapping(Student::getName, Collectors.toSet())));</span><br><span class=\"line\">        Map&lt;Integer, Long&gt; map3 = studentList.stream()</span><br><span class=\"line\">            .collect(</span><br><span class=\"line\">                Collectors.groupingBy(Student::getAge, Collectors.mapping(Student::getName, Collectors.counting())));</span><br><span class=\"line\">        Map&lt;Integer, Student&gt; map4 = studentList.stream()</span><br><span class=\"line\">            .collect(Collectors.toMap(Student::getAge, Function.identity(), (item1, item2) -&gt; item1));</span><br><span class=\"line\">        System.out.println(map4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Stream常用场景</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整合stream各种不同场合的使用</span><br></pre></td></tr></table></figure></p>\n<h4>javaBean</h4>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student implements Comparable&lt;Student&gt;&#123;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Student(Integer age, String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(Integer age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compareTo(Student student) &#123;</span><br><span class=\"line\">        return this.age - student.getAge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>使用场景</h4>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SteamTest extends BaseTest&#123;</span><br><span class=\"line\">    final static List&lt;Integer&gt; dataList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    final static List&lt;Student&gt; studentList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    final static List&lt;String&gt; strList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    private static final List&lt;String&gt; NAME_ORDER = Arrays.asList(&quot;jocy&quot;, &quot;tony&quot;, &quot;cloudy&quot;, &quot;jack&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dataList.add(1);</span><br><span class=\"line\">        dataList.add(1);</span><br><span class=\"line\">        dataList.add(3);</span><br><span class=\"line\">        dataList.add(4);</span><br><span class=\"line\">        dataList.add(2);</span><br><span class=\"line\"></span><br><span class=\"line\">        Student student1 = new Student(18, &quot;jocy&quot;);</span><br><span class=\"line\">        Student student2 = new Student(16, &quot;cloudy&quot;);</span><br><span class=\"line\">        Student student3 = new Student(22, &quot;jack&quot;);</span><br><span class=\"line\">        Student student4 = new Student(53, &quot;tony&quot;);</span><br><span class=\"line\">        studentList.add(student1);</span><br><span class=\"line\">        studentList.add(student2);</span><br><span class=\"line\">        studentList.add(student3);</span><br><span class=\"line\">        studentList.add(student4);</span><br><span class=\"line\"></span><br><span class=\"line\">        strList.add(&quot;a&quot;);</span><br><span class=\"line\">        strList.add(&quot;b&quot;);</span><br><span class=\"line\">        strList.add(&quot;c&quot;);</span><br><span class=\"line\">        strList.add(&quot;d&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //计数</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test1() &#123;</span><br><span class=\"line\">        System.out.println(dataList.stream().count());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //去重</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test2() &#123;</span><br><span class=\"line\">        dataList.stream().distinct().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //过滤</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test3() &#123;</span><br><span class=\"line\">        dataList.stream().filter(integer -&gt; integer &gt; 1).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //过滤</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test4() &#123;</span><br><span class=\"line\">        dataList.removeIf(integer -&gt; integer &lt;= 1);</span><br><span class=\"line\">        dataList.forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //合并</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test5() &#123;</span><br><span class=\"line\">        Stream.concat(dataList.stream(), strList.stream()).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 数据类型转换</span><br><span class=\"line\">     * 新生成一个Stream只包含转换生成的元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test6() &#123;</span><br><span class=\"line\">        strList.stream().map(String::toUpperCase).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 数据类型转换</span><br><span class=\"line\">     * flatMap方法与map方法类似，都是将原Stream中的每一个元素通过转换函数转换，不同的是，该换转函数的对象是一个Stream</span><br><span class=\"line\">     * 不会再创建一个新的Stream，而是将原Stream的元素取代为转换的Stream</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test7() &#123;</span><br><span class=\"line\">        strList.stream().flatMap(item -&gt; Stream.of(item.toUpperCase())).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //过滤掉原Stream中的前N个元素，返回剩下的元素所组成的新Stream</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test8() &#123;</span><br><span class=\"line\">        dataList.stream().skip(2).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 排序（升序）</span><br><span class=\"line\">     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream</span><br><span class=\"line\">     * sorterd有两种变体sorted()，sorted(Comparator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test9() &#123;</span><br><span class=\"line\">        dataList.stream().sorted().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 排序（降序）</span><br><span class=\"line\">     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream</span><br><span class=\"line\">     * sorterd有两种变体sorted()，sorted(Comparator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test10() &#123;</span><br><span class=\"line\">        dataList.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 排序（比较器）</span><br><span class=\"line\">     * sorted方法将对原Stream进行排序，返回一个有序列的新Stream</span><br><span class=\"line\">     * sorterd有两种变体sorted()，sorted(Comparator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test11() &#123;</span><br><span class=\"line\">        studentList.stream().sorted(Comparator.comparing(Student::getAge)).forEach(student -&gt; System.out.println(student.getName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //按字符串排序</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test111() &#123;</span><br><span class=\"line\">        List&lt;Student&gt; students = studentList.stream().sorted(Comparator.comparing(Student::getName, (x, y) -&gt; &#123;</span><br><span class=\"line\">            for (String sort : NAME_ORDER) &#123;</span><br><span class=\"line\">                if (sort.equals(x) || sort.equals(y)) &#123;</span><br><span class=\"line\">                    if (x.equals(y)) &#123;</span><br><span class=\"line\">                        return 0;</span><br><span class=\"line\">                    &#125; else if (sort.equals(x)) &#123;</span><br><span class=\"line\">                        return -1;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        return 1;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;)).collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 最大值</span><br><span class=\"line\">     * Stream根据比较器Comparator，进行排序(升序或者是降序)，所谓的最大值就是从新进行排序的，</span><br><span class=\"line\">     * max就是取重新排序后的最后一个值，而min取排序后的第一个值。</span><br><span class=\"line\">     * 不管是最大值还是最小值起决定作用的是Comparator，它决定了元素比较大小的原则</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test12() &#123;</span><br><span class=\"line\">        Optional&lt;Integer&gt; max = dataList.stream().max((o1, o2) -&gt; o2 - o1);</span><br><span class=\"line\">        System.out.println(max.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 最小值</span><br><span class=\"line\">     * Stream根据比较器Comparator，进行排序(升序或者是降序)，所谓的最大值就是从新进行排序的，</span><br><span class=\"line\">     * max就是取重新排序后的最后一个值，而min取排序后的第一个值。</span><br><span class=\"line\">     * 不管是最大值还是最小值起决定作用的是Comparator，它决定了元素比较大小的原则</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test13() &#123;</span><br><span class=\"line\">        Optional&lt;Integer&gt; min = dataList.stream().min((o1, o2) -&gt; o2 - o1);</span><br><span class=\"line\">        System.out.println(min.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断Stream中的元素是否全部满足指定条件</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test14() &#123;</span><br><span class=\"line\">        boolean match = dataList.stream().allMatch(integer -&gt; integer &gt; 2);</span><br><span class=\"line\">        System.out.println(match);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断Stream中的元素是否有满足指定条件</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test15() &#123;</span><br><span class=\"line\">        boolean match = dataList.stream().anyMatch(integer -&gt; integer &gt; 2);</span><br><span class=\"line\">        System.out.println(match);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 此操作的行动是不确定的，其会自由的选择Stream中的任何元素</span><br><span class=\"line\">     * 在并行操作中，在同一个Stram中多次调用，可能会不同的结果。</span><br><span class=\"line\">     * 在串行调用时，Debug了几次，发现每次都是获取的第一个元素，个人感觉在串行调用时，应该默认的是获取第一个元素。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test16() &#123;</span><br><span class=\"line\">        Optional&lt;Integer&gt; any = dataList.stream().findAny();</span><br><span class=\"line\">        System.out.println(any.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取第一个元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test17() &#123;</span><br><span class=\"line\">        Optional&lt;Integer&gt; any = dataList.stream().findFirst();</span><br><span class=\"line\">        System.out.println(any.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 截取前n位元素</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test18() &#123;</span><br><span class=\"line\">        dataList.stream().limit(5).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 如果所有元素都不满足条件，返回true；否则，返回false.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test19() &#123;</span><br><span class=\"line\">        boolean match = dataList.stream().noneMatch(integer -&gt; integer &gt; 2);</span><br><span class=\"line\">        System.out.println(match);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * collect收集器</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test20() &#123;</span><br><span class=\"line\">        String collect1 = studentList.stream().map(Student::getName).collect(Collectors.joining());</span><br><span class=\"line\">        System.out.println(collect1);</span><br><span class=\"line\">        String collect2 = studentList.stream().map(Student::getName).collect(Collectors.joining(&quot;,&quot;));</span><br><span class=\"line\">        System.out.println(collect2);</span><br><span class=\"line\">        studentList.stream().map(Student::getName).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class=\"line\">        studentList.stream().map(Student::getName).collect(Collectors.toSet()).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求和</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test21() &#123;</span><br><span class=\"line\">        int sum = studentList.stream().mapToInt(Student::getAge).sum();</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * list 转map</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test22() &#123;</span><br><span class=\"line\">        Map&lt;String, List&lt;Student&gt;&gt; map1 = studentList.stream().collect(Collectors.groupingBy(Student::getName));</span><br><span class=\"line\">        Map&lt;Integer, Set&lt;String&gt;&gt; map2 = studentList.stream()</span><br><span class=\"line\">            .collect(Collectors.groupingBy(Student::getAge, Collectors.mapping(Student::getName, Collectors.toSet())));</span><br><span class=\"line\">        Map&lt;Integer, Long&gt; map3 = studentList.stream()</span><br><span class=\"line\">            .collect(</span><br><span class=\"line\">                Collectors.groupingBy(Student::getAge, Collectors.mapping(Student::getName, Collectors.counting())));</span><br><span class=\"line\">        Map&lt;Integer, Student&gt; map4 = studentList.stream()</span><br><span class=\"line\">            .collect(Collectors.toMap(Student::getAge, Function.identity(), (item1, item2) -&gt; item1));</span><br><span class=\"line\">        System.out.println(map4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"easyExcel的使用及合并单元格的处理","catalog":true,"date":"2020-09-24T01:56:10.000Z","subtitle":"excel的处理","header-img":"/blog/img/article_header/article_header.png","_content":"## easyexcel的使用及合并单元格的处理\n#### 一.介绍\n\n```javascript\n[github地址](https://github.com/alibaba/easyexcel)\neasyexcel是阿里巴巴在poi基础上封装的一款专门处理excel文件的工具jar。\njava解析、生成Excel比较有名的框架有Apache poi、jxl。\n但他们都存在一个严重的问题就是非常的耗内存，\npoi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，\n但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，\n内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，\n能够原本一个3M的excel用POI sax依然需要100M左右内存降低到几M，\n并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。\n在上层做了模型转换的封装，让使用者更加简单方便。\n```\n#### 二.easyexcel合并单元格的使用\n\n```javascript\neasyexcel的简单使用这里就不多做介绍了，github项目里的单元测试有很多例子\n[easyexcel项目地址](https://github.com/alibaba/easyexcel)\n这里只介绍高级用法——合并单元格的导入和导出。注意：这里的合并单元格指表内容合并，\n导出时表头的合并可直接在@ExcelProperty里面处理，这里不多做介绍。\n```\n\n##### 1.合并单元格的导入\n\n```javascript\n读取合并单元格时会出现一个问题，合并的单元格读取数据时只有第一个会读到数据，\n其他的数据为null，这种怎么处理呢？上代码：\n```\n\n```javascript\npublic class ExcelTest extends BaseTest {\n    @Test\n    public void test1() {\n    \tString filePath = \"D:/test.xlsx\";\n    \tString headRowNumber = 1;//表头行数\n    \t//StudentListener里就是处理读取合并单元格的逻辑\n\t\tList<StudentDO> dataList = EasyExcel.read(new File(filePath ), StudentDO.class,\n                    new StudentListener()).sheet().headRowNumber(headRowNumber ).doReadSync();\n    }\n}\n```\n\n```javascript\npublic class StudentListener extends AnalysisEventListener<StudentDO> {\n\t//上一行数据\n    private StudentDO last;\n\n    /**\n     * 合并单元格读取处理\n     * 当前数据为null则取上一行的值\n     */\n    @Override\n    public void invoke(StudentDO studentDO , AnalysisContext analysisContext) {\n        String name = studentDO .getName();\n        String addr = studentDO.getAddr();\n        if(StringUtils.isBlank(name)){\n            studentDO .setName(last.getName());\n        }\n        if(StringUtils.isBlank(addr)){\n            studentDO.setAddr(last.getAddr());\n        }\n        last = studentDO;\n    }\n\n    @Override\n    public void doAfterAllAnalysed(AnalysisContext analysisContext) {\n\n\n    }\n```\n##### 2.导出合并单元格\n\n```javascript\nList<StudentDO > studentDOList = studenMapper.queryStudentList();\nString fileName = System.currentTimeMillis() + \".xlsx\";\nHttpServletResponse response = SpringMvcUtils.getHttpResponse();\nresponse.setHeader(\"Content-disposition\", \"attachment; filename=\" + fileName);\nresponse.setCharacterEncoding(\"UTF-8\");\n//需要合并的索引列\nint[] mergeColIndex = {1, 2, 3, 4};\n//需要从第一行开始，列头第一行\nint mergeRowIndex = 1;\n//头样式\nWriteCellStyle headWriteCellStyle = new WriteCellStyle();\nWriteFont headWriteFont = new WriteFont();\n//字体大小\nheadWriteFont.setFontHeightInPoints((short) 9);\n//加粗\nheadWriteFont.setBold(false);\nheadWriteCellStyle.setWriteFont(headWriteFont);\n//单元格上下居中\nheadWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);\n//内容样式\nWriteCellStyle contentWriteCellStyle = new WriteCellStyle();\nWriteFont contentWriteFont = new WriteFont();\ncontentWriteFont.setFontHeightInPoints((short) 9);\n//设置字体样式\ncontentWriteFont.setFontName(\"Arial\");\ncontentWriteCellStyle.setWriteFont(contentWriteFont);\ncontentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);\n//表头和表格内容样式策略\nHorizontalCellStyleStrategy horizontalCellStyleStrategy =\nnew HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\nEasyExcel.write(response.getOutputStream(), McdDataParseDTO.class)\n                .excelType(ExcelTypeEnum.XLSX).autoCloseStream(true)\n                .registerWriteHandler(new CellMergeStrategy(mergeColIndex, mergeRowIndex))\n                .registerWriteHandler(horizontalCellStyleStrategy)\n                .sheet(\"学生表\").doWrite(dataList);        \n```\n\n```javascript\n**\n * excel导出数据内容单元格合并规则\n *\n * @Author shenghao.xiao\n * @Date 2020/9/17\n **/\npublic class CellMergeStrategy implements CellWriteHandler {\n    /**\n     * 合并列的范围索引\n     */\n    private int[] mergeColumnIndex;\n    /**\n     * 合并起始行索引\n     */\n    private int mergeRowIndex;\n\n    public CellMergeStrategy(int[] mergeColumnIndex, int mergeRowIndex) {\n        this.mergeColumnIndex = mergeColumnIndex;\n        this.mergeRowIndex = mergeRowIndex;\n    }\n\n    @Override\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer integer, Integer integer1, Boolean aBoolean) {\n\n    }\n\n    @Override\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer integer, Boolean aBoolean) {\n\n    }\n\n    @Override\n    public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer integer, Boolean aBoolean) {\n\n    }\n\n    @Override\n    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List<CellData> list, Cell cell, Head head, Integer integer, Boolean aBoolean) {\n        //当前行\n        int curRowIndex = cell.getRowIndex();\n        //当前列\n        int curColIndex = cell.getColumnIndex();\n        if (curColIndex >= mergeRowIndex) {\n            for (int columnIndex : mergeColumnIndex) {\n                if (curColIndex == columnIndex) {\n                    mergeWithPrevRow(writeSheetHolder, cell, curRowIndex, curColIndex);\n                    break;\n                }\n            }\n        }\n    }\n\n    private void mergeWithPrevRow(WriteSheetHolder writeSheetHolder, Cell cell, int curRowIndex, int curColIndex) {\n        //第一行数据不用合并\n        if (curRowIndex == 0) {\n            return;\n        }\n        //获取当前行的当前列的数据和上一行的当前列数据，通过上一行数据是否相同进行合并\n        Object curData = cell.getCellTypeEnum() == CellType.STRING ? cell.getStringCellValue() : cell.getNumericCellValue();\n        Cell preCell = cell.getSheet().getRow(curRowIndex - 1).getCell(curColIndex);\n        Object preData = preCell.getCellTypeEnum() == CellType.STRING ? preCell.getStringCellValue() : preCell.getNumericCellValue();\n\n        //比较当前行的第一列的单元格与上一行是否相同，相同合并当前单元格与上一行\n        if (curData.equals(preData)) {\n            Sheet sheet = writeSheetHolder.getSheet();\n            List<CellRangeAddress> mergedRegions = sheet.getMergedRegions();\n            boolean isMerged = false;\n            for (int i = 0; i < mergedRegions.size() && !isMerged; i++) {\n                CellRangeAddress cellAddresses = mergedRegions.get(i);\n                //若上 一个单元格已经被合并，则先移出原有的合并单元，再重新添加合并单元\n                if (cellAddresses.isInRange(curRowIndex - 1, curColIndex)) {\n                    sheet.removeMergedRegion(i);\n                    cellAddresses.setLastRow(curRowIndex);\n                    sheet.addMergedRegion(cellAddresses);\n                    isMerged = true;\n                }\n            }\n            //若上一个单元格未被合并，则新增合并单元\n            if (!isMerged) {\n                CellRangeAddress cellAddresses = new CellRangeAddress(curRowIndex - 1, curRowIndex, curColIndex, curColIndex);\n                sheet.addMergedRegion(cellAddresses);\n            }\n        }\n    }\n}\n```\n\n","source":"_posts/easyExcel的使用及合并单元格的处理.md","raw":"---\ntitle: easyExcel的使用及合并单元格的处理\ncatalog: true\ndate: 2020-09-24 09:56:10\nsubtitle: excel的处理\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n## easyexcel的使用及合并单元格的处理\n#### 一.介绍\n\n```javascript\n[github地址](https://github.com/alibaba/easyexcel)\neasyexcel是阿里巴巴在poi基础上封装的一款专门处理excel文件的工具jar。\njava解析、生成Excel比较有名的框架有Apache poi、jxl。\n但他们都存在一个严重的问题就是非常的耗内存，\npoi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，\n但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，\n内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，\n能够原本一个3M的excel用POI sax依然需要100M左右内存降低到几M，\n并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。\n在上层做了模型转换的封装，让使用者更加简单方便。\n```\n#### 二.easyexcel合并单元格的使用\n\n```javascript\neasyexcel的简单使用这里就不多做介绍了，github项目里的单元测试有很多例子\n[easyexcel项目地址](https://github.com/alibaba/easyexcel)\n这里只介绍高级用法——合并单元格的导入和导出。注意：这里的合并单元格指表内容合并，\n导出时表头的合并可直接在@ExcelProperty里面处理，这里不多做介绍。\n```\n\n##### 1.合并单元格的导入\n\n```javascript\n读取合并单元格时会出现一个问题，合并的单元格读取数据时只有第一个会读到数据，\n其他的数据为null，这种怎么处理呢？上代码：\n```\n\n```javascript\npublic class ExcelTest extends BaseTest {\n    @Test\n    public void test1() {\n    \tString filePath = \"D:/test.xlsx\";\n    \tString headRowNumber = 1;//表头行数\n    \t//StudentListener里就是处理读取合并单元格的逻辑\n\t\tList<StudentDO> dataList = EasyExcel.read(new File(filePath ), StudentDO.class,\n                    new StudentListener()).sheet().headRowNumber(headRowNumber ).doReadSync();\n    }\n}\n```\n\n```javascript\npublic class StudentListener extends AnalysisEventListener<StudentDO> {\n\t//上一行数据\n    private StudentDO last;\n\n    /**\n     * 合并单元格读取处理\n     * 当前数据为null则取上一行的值\n     */\n    @Override\n    public void invoke(StudentDO studentDO , AnalysisContext analysisContext) {\n        String name = studentDO .getName();\n        String addr = studentDO.getAddr();\n        if(StringUtils.isBlank(name)){\n            studentDO .setName(last.getName());\n        }\n        if(StringUtils.isBlank(addr)){\n            studentDO.setAddr(last.getAddr());\n        }\n        last = studentDO;\n    }\n\n    @Override\n    public void doAfterAllAnalysed(AnalysisContext analysisContext) {\n\n\n    }\n```\n##### 2.导出合并单元格\n\n```javascript\nList<StudentDO > studentDOList = studenMapper.queryStudentList();\nString fileName = System.currentTimeMillis() + \".xlsx\";\nHttpServletResponse response = SpringMvcUtils.getHttpResponse();\nresponse.setHeader(\"Content-disposition\", \"attachment; filename=\" + fileName);\nresponse.setCharacterEncoding(\"UTF-8\");\n//需要合并的索引列\nint[] mergeColIndex = {1, 2, 3, 4};\n//需要从第一行开始，列头第一行\nint mergeRowIndex = 1;\n//头样式\nWriteCellStyle headWriteCellStyle = new WriteCellStyle();\nWriteFont headWriteFont = new WriteFont();\n//字体大小\nheadWriteFont.setFontHeightInPoints((short) 9);\n//加粗\nheadWriteFont.setBold(false);\nheadWriteCellStyle.setWriteFont(headWriteFont);\n//单元格上下居中\nheadWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);\n//内容样式\nWriteCellStyle contentWriteCellStyle = new WriteCellStyle();\nWriteFont contentWriteFont = new WriteFont();\ncontentWriteFont.setFontHeightInPoints((short) 9);\n//设置字体样式\ncontentWriteFont.setFontName(\"Arial\");\ncontentWriteCellStyle.setWriteFont(contentWriteFont);\ncontentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);\n//表头和表格内容样式策略\nHorizontalCellStyleStrategy horizontalCellStyleStrategy =\nnew HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\nEasyExcel.write(response.getOutputStream(), McdDataParseDTO.class)\n                .excelType(ExcelTypeEnum.XLSX).autoCloseStream(true)\n                .registerWriteHandler(new CellMergeStrategy(mergeColIndex, mergeRowIndex))\n                .registerWriteHandler(horizontalCellStyleStrategy)\n                .sheet(\"学生表\").doWrite(dataList);        \n```\n\n```javascript\n**\n * excel导出数据内容单元格合并规则\n *\n * @Author shenghao.xiao\n * @Date 2020/9/17\n **/\npublic class CellMergeStrategy implements CellWriteHandler {\n    /**\n     * 合并列的范围索引\n     */\n    private int[] mergeColumnIndex;\n    /**\n     * 合并起始行索引\n     */\n    private int mergeRowIndex;\n\n    public CellMergeStrategy(int[] mergeColumnIndex, int mergeRowIndex) {\n        this.mergeColumnIndex = mergeColumnIndex;\n        this.mergeRowIndex = mergeRowIndex;\n    }\n\n    @Override\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer integer, Integer integer1, Boolean aBoolean) {\n\n    }\n\n    @Override\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer integer, Boolean aBoolean) {\n\n    }\n\n    @Override\n    public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer integer, Boolean aBoolean) {\n\n    }\n\n    @Override\n    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List<CellData> list, Cell cell, Head head, Integer integer, Boolean aBoolean) {\n        //当前行\n        int curRowIndex = cell.getRowIndex();\n        //当前列\n        int curColIndex = cell.getColumnIndex();\n        if (curColIndex >= mergeRowIndex) {\n            for (int columnIndex : mergeColumnIndex) {\n                if (curColIndex == columnIndex) {\n                    mergeWithPrevRow(writeSheetHolder, cell, curRowIndex, curColIndex);\n                    break;\n                }\n            }\n        }\n    }\n\n    private void mergeWithPrevRow(WriteSheetHolder writeSheetHolder, Cell cell, int curRowIndex, int curColIndex) {\n        //第一行数据不用合并\n        if (curRowIndex == 0) {\n            return;\n        }\n        //获取当前行的当前列的数据和上一行的当前列数据，通过上一行数据是否相同进行合并\n        Object curData = cell.getCellTypeEnum() == CellType.STRING ? cell.getStringCellValue() : cell.getNumericCellValue();\n        Cell preCell = cell.getSheet().getRow(curRowIndex - 1).getCell(curColIndex);\n        Object preData = preCell.getCellTypeEnum() == CellType.STRING ? preCell.getStringCellValue() : preCell.getNumericCellValue();\n\n        //比较当前行的第一列的单元格与上一行是否相同，相同合并当前单元格与上一行\n        if (curData.equals(preData)) {\n            Sheet sheet = writeSheetHolder.getSheet();\n            List<CellRangeAddress> mergedRegions = sheet.getMergedRegions();\n            boolean isMerged = false;\n            for (int i = 0; i < mergedRegions.size() && !isMerged; i++) {\n                CellRangeAddress cellAddresses = mergedRegions.get(i);\n                //若上 一个单元格已经被合并，则先移出原有的合并单元，再重新添加合并单元\n                if (cellAddresses.isInRange(curRowIndex - 1, curColIndex)) {\n                    sheet.removeMergedRegion(i);\n                    cellAddresses.setLastRow(curRowIndex);\n                    sheet.addMergedRegion(cellAddresses);\n                    isMerged = true;\n                }\n            }\n            //若上一个单元格未被合并，则新增合并单元\n            if (!isMerged) {\n                CellRangeAddress cellAddresses = new CellRangeAddress(curRowIndex - 1, curRowIndex, curColIndex, curColIndex);\n                sheet.addMergedRegion(cellAddresses);\n            }\n        }\n    }\n}\n```\n\n","slug":"easyExcel的使用及合并单元格的处理","published":1,"updated":"2020-11-05T06:58:09.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xn3001m98v58obyxbs2","content":"<h2 id=\"easyexcel的使用及合并单元格的处理\">easyexcel的使用及合并单元格的处理</h2>\n<h4 id=\"一介绍\">一.介绍</h4>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[github地址](https:<span class=\"comment\">//github.com/alibaba/easyexcel)</span></span><br><span class=\"line\">easyexcel是阿里巴巴在poi基础上封装的一款专门处理excel文件的工具jar。</span><br><span class=\"line\">java解析、生成Excel比较有名的框架有Apache poi、jxl。</span><br><span class=\"line\">但他们都存在一个严重的问题就是非常的耗内存，</span><br><span class=\"line\">poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，</span><br><span class=\"line\">但POI还是有一些缺陷，比如<span class=\"number\">07</span>版Excel解压缩以及解压后存储都是在内存中完成的，</span><br><span class=\"line\">内存消耗依然很大。easyexcel重写了poi对<span class=\"number\">07</span>版Excel的解析，</span><br><span class=\"line\">能够原本一个<span class=\"number\">3</span>M的excel用POI sax依然需要<span class=\"number\">100</span>M左右内存降低到几M，</span><br><span class=\"line\">并且再大的excel不会出现内存溢出，<span class=\"number\">03</span>版依赖POI的sax模式。</span><br><span class=\"line\">在上层做了模型转换的封装，让使用者更加简单方便。</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"二easyexcel合并单元格的使用\">二.easyexcel合并单元格的使用</h4>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easyexcel的简单使用这里就不多做介绍了，github项目里的单元测试有很多例子</span><br><span class=\"line\">[easyexcel项目地址](https:<span class=\"comment\">//github.com/alibaba/easyexcel)</span></span><br><span class=\"line\">这里只介绍高级用法——合并单元格的导入和导出。注意：这里的合并单元格指表内容合并，</span><br><span class=\"line\">导出时表头的合并可直接在@ExcelProperty里面处理，这里不多做介绍。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1合并单元格的导入\">1.合并单元格的导入</h5>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">读取合并单元格时会出现一个问题，合并的单元格读取数据时只有第一个会读到数据，</span><br><span class=\"line\">其他的数据为<span class=\"literal\">null</span>，这种怎么处理呢？上代码：</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExcelTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> test1() &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">String</span> filePath = <span class=\"string\">\"D:/test.xlsx\"</span>;</span><br><span class=\"line\">    \t<span class=\"built_in\">String</span> headRowNumber = <span class=\"number\">1</span>;<span class=\"comment\">//表头行数</span></span><br><span class=\"line\">    \t<span class=\"comment\">//StudentListener里就是处理读取合并单元格的逻辑</span></span><br><span class=\"line\">\t\tList&lt;StudentDO&gt; dataList = EasyExcel.read(<span class=\"keyword\">new</span> File(filePath ), StudentDO.class,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> StudentListener()).sheet().headRowNumber(headRowNumber ).doReadSync();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnalysisEventListener</span>&lt;<span class=\"title\">StudentDO</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//上一行数据</span></span><br><span class=\"line\">    private StudentDO last;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并单元格读取处理</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前数据为null则取上一行的值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> invoke(StudentDO studentDO , AnalysisContext analysisContext) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> name = studentDO .getName();</span><br><span class=\"line\">        <span class=\"built_in\">String</span> addr = studentDO.getAddr();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(name))&#123;</span><br><span class=\"line\">            studentDO .setName(last.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(addr))&#123;</span><br><span class=\"line\">            studentDO.setAddr(last.getAddr());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = studentDO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> doAfterAllAnalysed(AnalysisContext analysisContext) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2导出合并单元格\">2.导出合并单元格</h5>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;StudentDO &gt; studentDOList = studenMapper.queryStudentList();</span><br><span class=\"line\"><span class=\"built_in\">String</span> fileName = System.currentTimeMillis() + <span class=\"string\">\".xlsx\"</span>;</span><br><span class=\"line\">HttpServletResponse response = SpringMvcUtils.getHttpResponse();</span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Content-disposition\"</span>, <span class=\"string\">\"attachment; filename=\"</span> + fileName);</span><br><span class=\"line\">response.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//需要合并的索引列</span></span><br><span class=\"line\">int[] mergeColIndex = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//需要从第一行开始，列头第一行</span></span><br><span class=\"line\">int mergeRowIndex = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//头样式</span></span><br><span class=\"line\">WriteCellStyle headWriteCellStyle = <span class=\"keyword\">new</span> WriteCellStyle();</span><br><span class=\"line\">WriteFont headWriteFont = <span class=\"keyword\">new</span> WriteFont();</span><br><span class=\"line\"><span class=\"comment\">//字体大小</span></span><br><span class=\"line\">headWriteFont.setFontHeightInPoints((short) <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"comment\">//加粗</span></span><br><span class=\"line\">headWriteFont.setBold(<span class=\"literal\">false</span>);</span><br><span class=\"line\">headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class=\"line\"><span class=\"comment\">//单元格上下居中</span></span><br><span class=\"line\">headWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class=\"line\"><span class=\"comment\">//内容样式</span></span><br><span class=\"line\">WriteCellStyle contentWriteCellStyle = <span class=\"keyword\">new</span> WriteCellStyle();</span><br><span class=\"line\">WriteFont contentWriteFont = <span class=\"keyword\">new</span> WriteFont();</span><br><span class=\"line\">contentWriteFont.setFontHeightInPoints((short) <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置字体样式</span></span><br><span class=\"line\">contentWriteFont.setFontName(<span class=\"string\">\"Arial\"</span>);</span><br><span class=\"line\">contentWriteCellStyle.setWriteFont(contentWriteFont);</span><br><span class=\"line\">contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class=\"line\"><span class=\"comment\">//表头和表格内容样式策略</span></span><br><span class=\"line\">HorizontalCellStyleStrategy horizontalCellStyleStrategy =</span><br><span class=\"line\"><span class=\"keyword\">new</span> HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);</span><br><span class=\"line\">EasyExcel.write(response.getOutputStream(), McdDataParseDTO.class)</span><br><span class=\"line\">                .excelType(ExcelTypeEnum.XLSX).autoCloseStream(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                .registerWriteHandler(<span class=\"keyword\">new</span> CellMergeStrategy(mergeColIndex, mergeRowIndex))</span><br><span class=\"line\">                .registerWriteHandler(horizontalCellStyleStrategy)</span><br><span class=\"line\">                .sheet(<span class=\"string\">\"学生表\"</span>).doWrite(dataList);</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * excel导出数据内容单元格合并规则</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @Author shenghao.xiao</span><br><span class=\"line\"> * @<span class=\"built_in\">Date</span> <span class=\"number\">2020</span>/<span class=\"number\">9</span>/<span class=\"number\">17</span></span><br><span class=\"line\"> **<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">public class CellMergeStrategy implements CellWriteHandler &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>**</span><br><span class=\"line\">     * 合并列的范围索引</span><br><span class=\"line\">     *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">    private int[] mergeColumnIndex;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>**</span><br><span class=\"line\">     * 合并起始行索引</span><br><span class=\"line\">     *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">    private int mergeRowIndex;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    public CellMergeStrategy(int[] mergeColumnIndex, int mergeRowIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        this.mergeColumnIndex = mergeColumnIndex;</span></span><br><span class=\"line\"><span class=\"regexp\">        this.mergeRowIndex = mergeRowIndex;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    @Override</span></span><br><span class=\"line\"><span class=\"regexp\">    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer integer, Integer integer1, Boolean aBoolean) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    @Override</span></span><br><span class=\"line\"><span class=\"regexp\">    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer integer, Boolean aBoolean) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    @Override</span></span><br><span class=\"line\"><span class=\"regexp\">    public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer integer, Boolean aBoolean) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    @Override</span></span><br><span class=\"line\"><span class=\"regexp\">    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; list, Cell cell, Head head, Integer integer, Boolean aBoolean) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/当前行</span></span><br><span class=\"line\"><span class=\"regexp\">        int curRowIndex = cell.getRowIndex();</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/当前列</span></span><br><span class=\"line\"><span class=\"regexp\">        int curColIndex = cell.getColumnIndex();</span></span><br><span class=\"line\"><span class=\"regexp\">        if (curColIndex &gt;= mergeRowIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            for (int columnIndex : mergeColumnIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                if (curColIndex == columnIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    mergeWithPrevRow(writeSheetHolder, cell, curRowIndex, curColIndex);</span></span><br><span class=\"line\"><span class=\"regexp\">                    break;</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    private void mergeWithPrevRow(WriteSheetHolder writeSheetHolder, Cell cell, int curRowIndex, int curColIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/第一行数据不用合并</span></span><br><span class=\"line\"><span class=\"regexp\">        if (curRowIndex == 0) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            return;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/获取当前行的当前列的数据和上一行的当前列数据，通过上一行数据是否相同进行合并</span></span><br><span class=\"line\"><span class=\"regexp\">        Object curData = cell.getCellTypeEnum() == CellType.STRING ? cell.getStringCellValue() : cell.getNumericCellValue();</span></span><br><span class=\"line\"><span class=\"regexp\">        Cell preCell = cell.getSheet().getRow(curRowIndex - 1).getCell(curColIndex);</span></span><br><span class=\"line\"><span class=\"regexp\">        Object preData = preCell.getCellTypeEnum() == CellType.STRING ? preCell.getStringCellValue() : preCell.getNumericCellValue();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/比较当前行的第一列的单元格与上一行是否相同，相同合并当前单元格与上一行</span></span><br><span class=\"line\"><span class=\"regexp\">        if (curData.equals(preData)) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            Sheet sheet = writeSheetHolder.getSheet();</span></span><br><span class=\"line\"><span class=\"regexp\">            List&lt;CellRangeAddress&gt; mergedRegions = sheet.getMergedRegions();</span></span><br><span class=\"line\"><span class=\"regexp\">            boolean isMerged = false;</span></span><br><span class=\"line\"><span class=\"regexp\">            for (int i = 0; i &lt; mergedRegions.size() &amp;&amp; !isMerged; i++) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                CellRangeAddress cellAddresses = mergedRegions.get(i);</span></span><br><span class=\"line\"><span class=\"regexp\">                /</span><span class=\"regexp\">/若上 一个单元格已经被合并，则先移出原有的合并单元，再重新添加合并单元</span></span><br><span class=\"line\"><span class=\"regexp\">                if (cellAddresses.isInRange(curRowIndex - 1, curColIndex)) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    sheet.removeMergedRegion(i);</span></span><br><span class=\"line\"><span class=\"regexp\">                    cellAddresses.setLastRow(curRowIndex);</span></span><br><span class=\"line\"><span class=\"regexp\">                    sheet.addMergedRegion(cellAddresses);</span></span><br><span class=\"line\"><span class=\"regexp\">                    isMerged = true;</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            /</span><span class=\"regexp\">/若上一个单元格未被合并，则新增合并单元</span></span><br><span class=\"line\"><span class=\"regexp\">            if (!isMerged) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                CellRangeAddress cellAddresses = new CellRangeAddress(curRowIndex - 1, curRowIndex, curColIndex, curColIndex);</span></span><br><span class=\"line\"><span class=\"regexp\">                sheet.addMergedRegion(cellAddresses);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>easyexcel的使用及合并单元格的处理</h2>\n<h4>一.介绍</h4>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[github地址](https:<span class=\"comment\">//github.com/alibaba/easyexcel)</span></span><br><span class=\"line\">easyexcel是阿里巴巴在poi基础上封装的一款专门处理excel文件的工具jar。</span><br><span class=\"line\">java解析、生成Excel比较有名的框架有Apache poi、jxl。</span><br><span class=\"line\">但他们都存在一个严重的问题就是非常的耗内存，</span><br><span class=\"line\">poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，</span><br><span class=\"line\">但POI还是有一些缺陷，比如<span class=\"number\">07</span>版Excel解压缩以及解压后存储都是在内存中完成的，</span><br><span class=\"line\">内存消耗依然很大。easyexcel重写了poi对<span class=\"number\">07</span>版Excel的解析，</span><br><span class=\"line\">能够原本一个<span class=\"number\">3</span>M的excel用POI sax依然需要<span class=\"number\">100</span>M左右内存降低到几M，</span><br><span class=\"line\">并且再大的excel不会出现内存溢出，<span class=\"number\">03</span>版依赖POI的sax模式。</span><br><span class=\"line\">在上层做了模型转换的封装，让使用者更加简单方便。</span><br></pre></td></tr></table></figure></p>\n<h4>二.easyexcel合并单元格的使用</h4>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easyexcel的简单使用这里就不多做介绍了，github项目里的单元测试有很多例子</span><br><span class=\"line\">[easyexcel项目地址](https:<span class=\"comment\">//github.com/alibaba/easyexcel)</span></span><br><span class=\"line\">这里只介绍高级用法——合并单元格的导入和导出。注意：这里的合并单元格指表内容合并，</span><br><span class=\"line\">导出时表头的合并可直接在@ExcelProperty里面处理，这里不多做介绍。</span><br></pre></td></tr></table></figure></p>\n<h5>1.合并单元格的导入</h5>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">读取合并单元格时会出现一个问题，合并的单元格读取数据时只有第一个会读到数据，</span><br><span class=\"line\">其他的数据为<span class=\"literal\">null</span>，这种怎么处理呢？上代码：</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExcelTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> test1() &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">String</span> filePath = <span class=\"string\">\"D:/test.xlsx\"</span>;</span><br><span class=\"line\">    \t<span class=\"built_in\">String</span> headRowNumber = <span class=\"number\">1</span>;<span class=\"comment\">//表头行数</span></span><br><span class=\"line\">    \t<span class=\"comment\">//StudentListener里就是处理读取合并单元格的逻辑</span></span><br><span class=\"line\">\t\tList&lt;StudentDO&gt; dataList = EasyExcel.read(<span class=\"keyword\">new</span> File(filePath ), StudentDO.class,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> StudentListener()).sheet().headRowNumber(headRowNumber ).doReadSync();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnalysisEventListener</span>&lt;<span class=\"title\">StudentDO</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//上一行数据</span></span><br><span class=\"line\">    private StudentDO last;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并单元格读取处理</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前数据为null则取上一行的值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> invoke(StudentDO studentDO , AnalysisContext analysisContext) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> name = studentDO .getName();</span><br><span class=\"line\">        <span class=\"built_in\">String</span> addr = studentDO.getAddr();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(name))&#123;</span><br><span class=\"line\">            studentDO .setName(last.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(addr))&#123;</span><br><span class=\"line\">            studentDO.setAddr(last.getAddr());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = studentDO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> doAfterAllAnalysed(AnalysisContext analysisContext) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h5>2.导出合并单元格</h5>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;StudentDO &gt; studentDOList = studenMapper.queryStudentList();</span><br><span class=\"line\"><span class=\"built_in\">String</span> fileName = System.currentTimeMillis() + <span class=\"string\">\".xlsx\"</span>;</span><br><span class=\"line\">HttpServletResponse response = SpringMvcUtils.getHttpResponse();</span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Content-disposition\"</span>, <span class=\"string\">\"attachment; filename=\"</span> + fileName);</span><br><span class=\"line\">response.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//需要合并的索引列</span></span><br><span class=\"line\">int[] mergeColIndex = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//需要从第一行开始，列头第一行</span></span><br><span class=\"line\">int mergeRowIndex = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//头样式</span></span><br><span class=\"line\">WriteCellStyle headWriteCellStyle = <span class=\"keyword\">new</span> WriteCellStyle();</span><br><span class=\"line\">WriteFont headWriteFont = <span class=\"keyword\">new</span> WriteFont();</span><br><span class=\"line\"><span class=\"comment\">//字体大小</span></span><br><span class=\"line\">headWriteFont.setFontHeightInPoints((short) <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"comment\">//加粗</span></span><br><span class=\"line\">headWriteFont.setBold(<span class=\"literal\">false</span>);</span><br><span class=\"line\">headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class=\"line\"><span class=\"comment\">//单元格上下居中</span></span><br><span class=\"line\">headWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class=\"line\"><span class=\"comment\">//内容样式</span></span><br><span class=\"line\">WriteCellStyle contentWriteCellStyle = <span class=\"keyword\">new</span> WriteCellStyle();</span><br><span class=\"line\">WriteFont contentWriteFont = <span class=\"keyword\">new</span> WriteFont();</span><br><span class=\"line\">contentWriteFont.setFontHeightInPoints((short) <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置字体样式</span></span><br><span class=\"line\">contentWriteFont.setFontName(<span class=\"string\">\"Arial\"</span>);</span><br><span class=\"line\">contentWriteCellStyle.setWriteFont(contentWriteFont);</span><br><span class=\"line\">contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class=\"line\"><span class=\"comment\">//表头和表格内容样式策略</span></span><br><span class=\"line\">HorizontalCellStyleStrategy horizontalCellStyleStrategy =</span><br><span class=\"line\"><span class=\"keyword\">new</span> HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);</span><br><span class=\"line\">EasyExcel.write(response.getOutputStream(), McdDataParseDTO.class)</span><br><span class=\"line\">                .excelType(ExcelTypeEnum.XLSX).autoCloseStream(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                .registerWriteHandler(<span class=\"keyword\">new</span> CellMergeStrategy(mergeColIndex, mergeRowIndex))</span><br><span class=\"line\">                .registerWriteHandler(horizontalCellStyleStrategy)</span><br><span class=\"line\">                .sheet(<span class=\"string\">\"学生表\"</span>).doWrite(dataList);</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * excel导出数据内容单元格合并规则</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @Author shenghao.xiao</span><br><span class=\"line\"> * @<span class=\"built_in\">Date</span> <span class=\"number\">2020</span>/<span class=\"number\">9</span>/<span class=\"number\">17</span></span><br><span class=\"line\"> **<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">public class CellMergeStrategy implements CellWriteHandler &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>**</span><br><span class=\"line\">     * 合并列的范围索引</span><br><span class=\"line\">     *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">    private int[] mergeColumnIndex;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>**</span><br><span class=\"line\">     * 合并起始行索引</span><br><span class=\"line\">     *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">    private int mergeRowIndex;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    public CellMergeStrategy(int[] mergeColumnIndex, int mergeRowIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        this.mergeColumnIndex = mergeColumnIndex;</span></span><br><span class=\"line\"><span class=\"regexp\">        this.mergeRowIndex = mergeRowIndex;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    @Override</span></span><br><span class=\"line\"><span class=\"regexp\">    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer integer, Integer integer1, Boolean aBoolean) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    @Override</span></span><br><span class=\"line\"><span class=\"regexp\">    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer integer, Boolean aBoolean) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    @Override</span></span><br><span class=\"line\"><span class=\"regexp\">    public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer integer, Boolean aBoolean) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    @Override</span></span><br><span class=\"line\"><span class=\"regexp\">    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; list, Cell cell, Head head, Integer integer, Boolean aBoolean) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/当前行</span></span><br><span class=\"line\"><span class=\"regexp\">        int curRowIndex = cell.getRowIndex();</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/当前列</span></span><br><span class=\"line\"><span class=\"regexp\">        int curColIndex = cell.getColumnIndex();</span></span><br><span class=\"line\"><span class=\"regexp\">        if (curColIndex &gt;= mergeRowIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            for (int columnIndex : mergeColumnIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                if (curColIndex == columnIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    mergeWithPrevRow(writeSheetHolder, cell, curRowIndex, curColIndex);</span></span><br><span class=\"line\"><span class=\"regexp\">                    break;</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    private void mergeWithPrevRow(WriteSheetHolder writeSheetHolder, Cell cell, int curRowIndex, int curColIndex) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/第一行数据不用合并</span></span><br><span class=\"line\"><span class=\"regexp\">        if (curRowIndex == 0) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            return;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/获取当前行的当前列的数据和上一行的当前列数据，通过上一行数据是否相同进行合并</span></span><br><span class=\"line\"><span class=\"regexp\">        Object curData = cell.getCellTypeEnum() == CellType.STRING ? cell.getStringCellValue() : cell.getNumericCellValue();</span></span><br><span class=\"line\"><span class=\"regexp\">        Cell preCell = cell.getSheet().getRow(curRowIndex - 1).getCell(curColIndex);</span></span><br><span class=\"line\"><span class=\"regexp\">        Object preData = preCell.getCellTypeEnum() == CellType.STRING ? preCell.getStringCellValue() : preCell.getNumericCellValue();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/比较当前行的第一列的单元格与上一行是否相同，相同合并当前单元格与上一行</span></span><br><span class=\"line\"><span class=\"regexp\">        if (curData.equals(preData)) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            Sheet sheet = writeSheetHolder.getSheet();</span></span><br><span class=\"line\"><span class=\"regexp\">            List&lt;CellRangeAddress&gt; mergedRegions = sheet.getMergedRegions();</span></span><br><span class=\"line\"><span class=\"regexp\">            boolean isMerged = false;</span></span><br><span class=\"line\"><span class=\"regexp\">            for (int i = 0; i &lt; mergedRegions.size() &amp;&amp; !isMerged; i++) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                CellRangeAddress cellAddresses = mergedRegions.get(i);</span></span><br><span class=\"line\"><span class=\"regexp\">                /</span><span class=\"regexp\">/若上 一个单元格已经被合并，则先移出原有的合并单元，再重新添加合并单元</span></span><br><span class=\"line\"><span class=\"regexp\">                if (cellAddresses.isInRange(curRowIndex - 1, curColIndex)) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    sheet.removeMergedRegion(i);</span></span><br><span class=\"line\"><span class=\"regexp\">                    cellAddresses.setLastRow(curRowIndex);</span></span><br><span class=\"line\"><span class=\"regexp\">                    sheet.addMergedRegion(cellAddresses);</span></span><br><span class=\"line\"><span class=\"regexp\">                    isMerged = true;</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            /</span><span class=\"regexp\">/若上一个单元格未被合并，则新增合并单元</span></span><br><span class=\"line\"><span class=\"regexp\">            if (!isMerged) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                CellRangeAddress cellAddresses = new CellRangeAddress(curRowIndex - 1, curRowIndex, curColIndex, curColIndex);</span></span><br><span class=\"line\"><span class=\"regexp\">                sheet.addMergedRegion(cellAddresses);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"jdk1.8时间工具类整合","catalog":true,"date":"2018-11-20T06:42:52.000Z","subtitle":"jdk1.8时间工具类整理","header-img":"/blog/img/article_header/article_header.png","_content":"## jdk1.8时间工具类整理\n\n```\nJava1.8在java.time包下推出了全新的时间日期API\n```\n\n\n\n```\n\npublic class DateUtil {\n    private static final Logger log = LoggerFactory.getLogger(DateUtil.class);\n    public static final String DATETIME = \"yyyy-MM-dd HH:mm:ss\";\n    public static final String DATE = \"yyyy-MM-dd\";\n\n    /**\n     * 返回hh:MM:ss格式\n     * @duration 毫秒\n     */\n    public static String formatDuration(Integer duration) {\n        if (duration == null) {\n            return \"00:00:00\";\n        }\n        return String.format(\"%02d\", duration / 3600) + \":\" + String.format(\"%02d\", (duration % 3600) / 60) + \":\" + String.format(\"%02d\", (duration % 3600) % 60);\n    }\n\n    /**\n     * 返回hh:MM格式\n     * @duration 毫秒\n     */\n    public static String formatDurationOfFourLength(Integer duration) {\n        if (duration == null) {\n            return \"00:00\";\n        }\n        return String.format(\"%02d\", duration / 3600) + \":\" + String.format(\"%02d\", (duration % 3600) / 60);\n    }\n\n\n    public static Date getNow() {\n        return new Date();\n    }\n\n    public static Integer getYear() {\n        return LocalDate.now().getYear();\n    }\n\n    public static Integer getMonth() {\n        return LocalDate.now().getMonth().getValue();\n    }\n\n    public static Integer getDayOfWeek() {\n        return LocalDate.now().getDayOfWeek().getValue();\n    }\n\n    public static Integer getDayOfMonth() {\n        return LocalDate.now().getDayOfMonth();\n    }\n\n    public static Integer getYear(Date date) {\n        return dateToLocalDate(date).getYear();\n    }\n\n    public static Integer getMonth(Date date) {\n        return dateToLocalDate(date).getMonth().getValue();\n    }\n\n    public static Integer getDayOfWeek(Date date) {\n        return dateToLocalDate(date).getDayOfWeek().getValue();\n    }\n\n    public static Integer getDayOfMonth(Date date) {\n        return dateToLocalDate(date).getDayOfMonth();\n    }\n\n    public static String format(String pattern) {\n        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(pattern));\n    }\n\n    public static String format(Date date, String pattern) {\n        if (date == null) {\n            return StringUtils.EMPTY;\n        }\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTime.format(DateTimeFormatter.ofPattern(pattern));\n    }\n\n    public static Date parseDateTime(String dateTime, String pattern) {\n        LocalDateTime localDateTime = LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(pattern));\n        return localDateTimeToDate(localDateTime);\n    }\n\n    public static Date parseDate(String date, String pattern) {\n        LocalDate dateTime = LocalDate.parse(date, DateTimeFormatter.ofPattern(pattern));\n        return localDateToDate(dateTime);\n    }\n\n    public static Date plusYears(Date date, long years) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusYears(years));\n    }\n\n    public static Date plusMonths(Date date, long months) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusMonths(months));\n    }\n\n    public static Date plusDays(Date date, long days) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusDays(days));\n    }\n\n    public static Date plusHours(Date date, long hours) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusHours(hours));\n    }\n\n    public static Date plusWeeks(Date date, long weeks) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusWeeks(weeks));\n    }\n\n    public static Date plusMinutes(Date date, long minutes) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusMinutes(minutes));\n    }\n\n    public static Date plusSeconds(Date date, long seconds) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusSeconds(seconds));\n    }\n\n    public static Date plusNanos(Date date, long nanos) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusNanos(nanos));\n    }\n\n\n    public static Date minusYears(Date date, long years) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusYears(years));\n    }\n\n    public static Date minusMonths(Date date, long months) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusMonths(months));\n    }\n\n    public static Date minusDays(Date date, long days) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusDays(days));\n    }\n\n    public static Date minusHours(Date date, long hours) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusHours(hours));\n    }\n\n    public static Date minusWeeks(Date date, long weeks) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusWeeks(weeks));\n    }\n\n    public static Date minusMinutes(Date date, long minutes) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusMinutes(minutes));\n    }\n\n    public static Date minusSeconds(Date date, long seconds) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusSeconds(seconds));\n    }\n\n    public static Date minusNanos(Date date, long nanos) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusNanos(nanos));\n    }\n\n\n    public static Integer betweenToYears(Date var1, Date var2) {\n        LocalDate localDate1 = dateToLocalDate(var1);\n        LocalDate localDate2 = dateToLocalDate(var2);\n        Period period = Period.between(localDate1, localDate2);\n        return period.getYears();\n    }\n\n    public static Integer betweenToMonths(Date var1, Date var2) {\n        return betweenToYears(var1, var2) * 12;\n    }\n\n    public static Long betweenToDays(Date var1, Date var2) {\n        LocalDate localDate1 = dateToLocalDate(var1);\n        LocalDate localDate2 = dateToLocalDate(var2);\n        return localDate1.toEpochDay() - localDate2.toEpochDay();\n    }\n\n    public static Long betweenToHours(Date var1, Date var2) {\n        return betweenToDays(var1, var2) * 24;\n    }\n\n    public static Long betweenToMinutes(Date var1, Date var2) {\n        return betweenToHours(var1, var2) * 60;\n    }\n\n    public static Long betweenToSeconds(Date var1, Date var2) {\n        return betweenToMinutes(var1, var2) * 60;\n    }\n\n    public static Long betweenToMillis(Date var1, Date var2) {\n        return betweenToSeconds(var1, var2) * 1000;\n    }\n\n    private static LocalDate dateToLocalDate(Date date) {\n        Instant instant = date.toInstant();\n        ZoneId zoneId = ZoneId.systemDefault();\n        return instant.atZone(zoneId).toLocalDate();\n    }\n\n    private static LocalDateTime dateToLocalDateTime(Date date) {\n        Instant instant = date.toInstant();\n        ZoneId zoneId = ZoneId.systemDefault();\n        return instant.atZone(zoneId).toLocalDateTime();\n    }\n\n    private static Date localDateToDate(LocalDate localDate) {\n        ZoneId zoneId = ZoneId.systemDefault();\n        Instant instant = localDate.atStartOfDay().atZone(zoneId).toInstant();\n        return Date.from(instant);\n    }\n\n    private static Date localDateTimeToDate(LocalDateTime localDateTime) {\n        ZoneId zoneId = ZoneId.systemDefault();\n        Instant instant = localDateTime.atZone(zoneId).toInstant();\n        return Date.from(instant);\n    }\n}\n\n\n```\n","source":"_posts/jdk8时间工具类整合.md","raw":"---\ntitle: jdk1.8时间工具类整合\ncatalog: true\ndate: 2018/11/20 14:42:52\nsubtitle: jdk1.8时间工具类整理\nheader-img: \"/blog/img/article_header/article_header.png\"\ntags:\n- java\n---\n## jdk1.8时间工具类整理\n\n```\nJava1.8在java.time包下推出了全新的时间日期API\n```\n\n\n\n```\n\npublic class DateUtil {\n    private static final Logger log = LoggerFactory.getLogger(DateUtil.class);\n    public static final String DATETIME = \"yyyy-MM-dd HH:mm:ss\";\n    public static final String DATE = \"yyyy-MM-dd\";\n\n    /**\n     * 返回hh:MM:ss格式\n     * @duration 毫秒\n     */\n    public static String formatDuration(Integer duration) {\n        if (duration == null) {\n            return \"00:00:00\";\n        }\n        return String.format(\"%02d\", duration / 3600) + \":\" + String.format(\"%02d\", (duration % 3600) / 60) + \":\" + String.format(\"%02d\", (duration % 3600) % 60);\n    }\n\n    /**\n     * 返回hh:MM格式\n     * @duration 毫秒\n     */\n    public static String formatDurationOfFourLength(Integer duration) {\n        if (duration == null) {\n            return \"00:00\";\n        }\n        return String.format(\"%02d\", duration / 3600) + \":\" + String.format(\"%02d\", (duration % 3600) / 60);\n    }\n\n\n    public static Date getNow() {\n        return new Date();\n    }\n\n    public static Integer getYear() {\n        return LocalDate.now().getYear();\n    }\n\n    public static Integer getMonth() {\n        return LocalDate.now().getMonth().getValue();\n    }\n\n    public static Integer getDayOfWeek() {\n        return LocalDate.now().getDayOfWeek().getValue();\n    }\n\n    public static Integer getDayOfMonth() {\n        return LocalDate.now().getDayOfMonth();\n    }\n\n    public static Integer getYear(Date date) {\n        return dateToLocalDate(date).getYear();\n    }\n\n    public static Integer getMonth(Date date) {\n        return dateToLocalDate(date).getMonth().getValue();\n    }\n\n    public static Integer getDayOfWeek(Date date) {\n        return dateToLocalDate(date).getDayOfWeek().getValue();\n    }\n\n    public static Integer getDayOfMonth(Date date) {\n        return dateToLocalDate(date).getDayOfMonth();\n    }\n\n    public static String format(String pattern) {\n        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(pattern));\n    }\n\n    public static String format(Date date, String pattern) {\n        if (date == null) {\n            return StringUtils.EMPTY;\n        }\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTime.format(DateTimeFormatter.ofPattern(pattern));\n    }\n\n    public static Date parseDateTime(String dateTime, String pattern) {\n        LocalDateTime localDateTime = LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(pattern));\n        return localDateTimeToDate(localDateTime);\n    }\n\n    public static Date parseDate(String date, String pattern) {\n        LocalDate dateTime = LocalDate.parse(date, DateTimeFormatter.ofPattern(pattern));\n        return localDateToDate(dateTime);\n    }\n\n    public static Date plusYears(Date date, long years) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusYears(years));\n    }\n\n    public static Date plusMonths(Date date, long months) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusMonths(months));\n    }\n\n    public static Date plusDays(Date date, long days) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusDays(days));\n    }\n\n    public static Date plusHours(Date date, long hours) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusHours(hours));\n    }\n\n    public static Date plusWeeks(Date date, long weeks) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusWeeks(weeks));\n    }\n\n    public static Date plusMinutes(Date date, long minutes) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusMinutes(minutes));\n    }\n\n    public static Date plusSeconds(Date date, long seconds) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusSeconds(seconds));\n    }\n\n    public static Date plusNanos(Date date, long nanos) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.plusNanos(nanos));\n    }\n\n\n    public static Date minusYears(Date date, long years) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusYears(years));\n    }\n\n    public static Date minusMonths(Date date, long months) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusMonths(months));\n    }\n\n    public static Date minusDays(Date date, long days) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusDays(days));\n    }\n\n    public static Date minusHours(Date date, long hours) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusHours(hours));\n    }\n\n    public static Date minusWeeks(Date date, long weeks) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusWeeks(weeks));\n    }\n\n    public static Date minusMinutes(Date date, long minutes) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusMinutes(minutes));\n    }\n\n    public static Date minusSeconds(Date date, long seconds) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusSeconds(seconds));\n    }\n\n    public static Date minusNanos(Date date, long nanos) {\n        LocalDateTime localDateTime = dateToLocalDateTime(date);\n        return localDateTimeToDate(localDateTime.minusNanos(nanos));\n    }\n\n\n    public static Integer betweenToYears(Date var1, Date var2) {\n        LocalDate localDate1 = dateToLocalDate(var1);\n        LocalDate localDate2 = dateToLocalDate(var2);\n        Period period = Period.between(localDate1, localDate2);\n        return period.getYears();\n    }\n\n    public static Integer betweenToMonths(Date var1, Date var2) {\n        return betweenToYears(var1, var2) * 12;\n    }\n\n    public static Long betweenToDays(Date var1, Date var2) {\n        LocalDate localDate1 = dateToLocalDate(var1);\n        LocalDate localDate2 = dateToLocalDate(var2);\n        return localDate1.toEpochDay() - localDate2.toEpochDay();\n    }\n\n    public static Long betweenToHours(Date var1, Date var2) {\n        return betweenToDays(var1, var2) * 24;\n    }\n\n    public static Long betweenToMinutes(Date var1, Date var2) {\n        return betweenToHours(var1, var2) * 60;\n    }\n\n    public static Long betweenToSeconds(Date var1, Date var2) {\n        return betweenToMinutes(var1, var2) * 60;\n    }\n\n    public static Long betweenToMillis(Date var1, Date var2) {\n        return betweenToSeconds(var1, var2) * 1000;\n    }\n\n    private static LocalDate dateToLocalDate(Date date) {\n        Instant instant = date.toInstant();\n        ZoneId zoneId = ZoneId.systemDefault();\n        return instant.atZone(zoneId).toLocalDate();\n    }\n\n    private static LocalDateTime dateToLocalDateTime(Date date) {\n        Instant instant = date.toInstant();\n        ZoneId zoneId = ZoneId.systemDefault();\n        return instant.atZone(zoneId).toLocalDateTime();\n    }\n\n    private static Date localDateToDate(LocalDate localDate) {\n        ZoneId zoneId = ZoneId.systemDefault();\n        Instant instant = localDate.atStartOfDay().atZone(zoneId).toInstant();\n        return Date.from(instant);\n    }\n\n    private static Date localDateTimeToDate(LocalDateTime localDateTime) {\n        ZoneId zoneId = ZoneId.systemDefault();\n        Instant instant = localDateTime.atZone(zoneId).toInstant();\n        return Date.from(instant);\n    }\n}\n\n\n```\n","slug":"jdk8时间工具类整合","published":1,"updated":"2020-11-05T06:58:09.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xn4001o98v5sd6daofq","content":"<h2 id=\"jdk18时间工具类整理\">jdk1.8时间工具类整理</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java1.8在java.time包下推出了全新的时间日期API</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class DateUtil &#123;</span><br><span class=\"line\">    private static final Logger log = LoggerFactory.getLogger(DateUtil.class);</span><br><span class=\"line\">    public static final String DATETIME = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class=\"line\">    public static final String DATE = &quot;yyyy-MM-dd&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回hh:MM:ss格式</span><br><span class=\"line\">     * @duration 毫秒</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String formatDuration(Integer duration) &#123;</span><br><span class=\"line\">        if (duration == null) &#123;</span><br><span class=\"line\">            return &quot;00:00:00&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return String.format(&quot;%02d&quot;, duration / 3600) + &quot;:&quot; + String.format(&quot;%02d&quot;, (duration % 3600) / 60) + &quot;:&quot; + String.format(&quot;%02d&quot;, (duration % 3600) % 60);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回hh:MM格式</span><br><span class=\"line\">     * @duration 毫秒</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String formatDurationOfFourLength(Integer duration) &#123;</span><br><span class=\"line\">        if (duration == null) &#123;</span><br><span class=\"line\">            return &quot;00:00&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return String.format(&quot;%02d&quot;, duration / 3600) + &quot;:&quot; + String.format(&quot;%02d&quot;, (duration % 3600) / 60);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date getNow() &#123;</span><br><span class=\"line\">        return new Date();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getYear() &#123;</span><br><span class=\"line\">        return LocalDate.now().getYear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getMonth() &#123;</span><br><span class=\"line\">        return LocalDate.now().getMonth().getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getDayOfWeek() &#123;</span><br><span class=\"line\">        return LocalDate.now().getDayOfWeek().getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getDayOfMonth() &#123;</span><br><span class=\"line\">        return LocalDate.now().getDayOfMonth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getYear(Date date) &#123;</span><br><span class=\"line\">        return dateToLocalDate(date).getYear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getMonth(Date date) &#123;</span><br><span class=\"line\">        return dateToLocalDate(date).getMonth().getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getDayOfWeek(Date date) &#123;</span><br><span class=\"line\">        return dateToLocalDate(date).getDayOfWeek().getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getDayOfMonth(Date date) &#123;</span><br><span class=\"line\">        return dateToLocalDate(date).getDayOfMonth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String format(String pattern) &#123;</span><br><span class=\"line\">        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(pattern));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String format(Date date, String pattern) &#123;</span><br><span class=\"line\">        if (date == null) &#123;</span><br><span class=\"line\">            return StringUtils.EMPTY;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTime.format(DateTimeFormatter.ofPattern(pattern));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date parseDateTime(String dateTime, String pattern) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(pattern));</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date parseDate(String date, String pattern) &#123;</span><br><span class=\"line\">        LocalDate dateTime = LocalDate.parse(date, DateTimeFormatter.ofPattern(pattern));</span><br><span class=\"line\">        return localDateToDate(dateTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusYears(Date date, long years) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusYears(years));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusMonths(Date date, long months) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusMonths(months));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusDays(Date date, long days) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusDays(days));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusHours(Date date, long hours) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusHours(hours));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusWeeks(Date date, long weeks) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusWeeks(weeks));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusMinutes(Date date, long minutes) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusMinutes(minutes));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusSeconds(Date date, long seconds) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusSeconds(seconds));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusNanos(Date date, long nanos) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusNanos(nanos));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusYears(Date date, long years) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusYears(years));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusMonths(Date date, long months) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusMonths(months));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusDays(Date date, long days) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusDays(days));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusHours(Date date, long hours) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusHours(hours));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusWeeks(Date date, long weeks) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusWeeks(weeks));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusMinutes(Date date, long minutes) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusMinutes(minutes));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusSeconds(Date date, long seconds) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusSeconds(seconds));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusNanos(Date date, long nanos) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusNanos(nanos));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer betweenToYears(Date var1, Date var2) &#123;</span><br><span class=\"line\">        LocalDate localDate1 = dateToLocalDate(var1);</span><br><span class=\"line\">        LocalDate localDate2 = dateToLocalDate(var2);</span><br><span class=\"line\">        Period period = Period.between(localDate1, localDate2);</span><br><span class=\"line\">        return period.getYears();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer betweenToMonths(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToYears(var1, var2) * 12;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToDays(Date var1, Date var2) &#123;</span><br><span class=\"line\">        LocalDate localDate1 = dateToLocalDate(var1);</span><br><span class=\"line\">        LocalDate localDate2 = dateToLocalDate(var2);</span><br><span class=\"line\">        return localDate1.toEpochDay() - localDate2.toEpochDay();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToHours(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToDays(var1, var2) * 24;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToMinutes(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToHours(var1, var2) * 60;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToSeconds(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToMinutes(var1, var2) * 60;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToMillis(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToSeconds(var1, var2) * 1000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static LocalDate dateToLocalDate(Date date) &#123;</span><br><span class=\"line\">        Instant instant = date.toInstant();</span><br><span class=\"line\">        ZoneId zoneId = ZoneId.systemDefault();</span><br><span class=\"line\">        return instant.atZone(zoneId).toLocalDate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static LocalDateTime dateToLocalDateTime(Date date) &#123;</span><br><span class=\"line\">        Instant instant = date.toInstant();</span><br><span class=\"line\">        ZoneId zoneId = ZoneId.systemDefault();</span><br><span class=\"line\">        return instant.atZone(zoneId).toLocalDateTime();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Date localDateToDate(LocalDate localDate) &#123;</span><br><span class=\"line\">        ZoneId zoneId = ZoneId.systemDefault();</span><br><span class=\"line\">        Instant instant = localDate.atStartOfDay().atZone(zoneId).toInstant();</span><br><span class=\"line\">        return Date.from(instant);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Date localDateTimeToDate(LocalDateTime localDateTime) &#123;</span><br><span class=\"line\">        ZoneId zoneId = ZoneId.systemDefault();</span><br><span class=\"line\">        Instant instant = localDateTime.atZone(zoneId).toInstant();</span><br><span class=\"line\">        return Date.from(instant);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>jdk1.8时间工具类整理</h2>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java1.8在java.time包下推出了全新的时间日期API</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class DateUtil &#123;</span><br><span class=\"line\">    private static final Logger log = LoggerFactory.getLogger(DateUtil.class);</span><br><span class=\"line\">    public static final String DATETIME = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class=\"line\">    public static final String DATE = &quot;yyyy-MM-dd&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回hh:MM:ss格式</span><br><span class=\"line\">     * @duration 毫秒</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String formatDuration(Integer duration) &#123;</span><br><span class=\"line\">        if (duration == null) &#123;</span><br><span class=\"line\">            return &quot;00:00:00&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return String.format(&quot;%02d&quot;, duration / 3600) + &quot;:&quot; + String.format(&quot;%02d&quot;, (duration % 3600) / 60) + &quot;:&quot; + String.format(&quot;%02d&quot;, (duration % 3600) % 60);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回hh:MM格式</span><br><span class=\"line\">     * @duration 毫秒</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String formatDurationOfFourLength(Integer duration) &#123;</span><br><span class=\"line\">        if (duration == null) &#123;</span><br><span class=\"line\">            return &quot;00:00&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return String.format(&quot;%02d&quot;, duration / 3600) + &quot;:&quot; + String.format(&quot;%02d&quot;, (duration % 3600) / 60);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date getNow() &#123;</span><br><span class=\"line\">        return new Date();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getYear() &#123;</span><br><span class=\"line\">        return LocalDate.now().getYear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getMonth() &#123;</span><br><span class=\"line\">        return LocalDate.now().getMonth().getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getDayOfWeek() &#123;</span><br><span class=\"line\">        return LocalDate.now().getDayOfWeek().getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getDayOfMonth() &#123;</span><br><span class=\"line\">        return LocalDate.now().getDayOfMonth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getYear(Date date) &#123;</span><br><span class=\"line\">        return dateToLocalDate(date).getYear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getMonth(Date date) &#123;</span><br><span class=\"line\">        return dateToLocalDate(date).getMonth().getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getDayOfWeek(Date date) &#123;</span><br><span class=\"line\">        return dateToLocalDate(date).getDayOfWeek().getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer getDayOfMonth(Date date) &#123;</span><br><span class=\"line\">        return dateToLocalDate(date).getDayOfMonth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String format(String pattern) &#123;</span><br><span class=\"line\">        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(pattern));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String format(Date date, String pattern) &#123;</span><br><span class=\"line\">        if (date == null) &#123;</span><br><span class=\"line\">            return StringUtils.EMPTY;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTime.format(DateTimeFormatter.ofPattern(pattern));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date parseDateTime(String dateTime, String pattern) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(pattern));</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date parseDate(String date, String pattern) &#123;</span><br><span class=\"line\">        LocalDate dateTime = LocalDate.parse(date, DateTimeFormatter.ofPattern(pattern));</span><br><span class=\"line\">        return localDateToDate(dateTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusYears(Date date, long years) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusYears(years));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusMonths(Date date, long months) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusMonths(months));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusDays(Date date, long days) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusDays(days));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusHours(Date date, long hours) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusHours(hours));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusWeeks(Date date, long weeks) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusWeeks(weeks));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusMinutes(Date date, long minutes) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusMinutes(minutes));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusSeconds(Date date, long seconds) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusSeconds(seconds));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date plusNanos(Date date, long nanos) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.plusNanos(nanos));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusYears(Date date, long years) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusYears(years));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusMonths(Date date, long months) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusMonths(months));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusDays(Date date, long days) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusDays(days));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusHours(Date date, long hours) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusHours(hours));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusWeeks(Date date, long weeks) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusWeeks(weeks));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusMinutes(Date date, long minutes) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusMinutes(minutes));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusSeconds(Date date, long seconds) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusSeconds(seconds));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Date minusNanos(Date date, long nanos) &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = dateToLocalDateTime(date);</span><br><span class=\"line\">        return localDateTimeToDate(localDateTime.minusNanos(nanos));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer betweenToYears(Date var1, Date var2) &#123;</span><br><span class=\"line\">        LocalDate localDate1 = dateToLocalDate(var1);</span><br><span class=\"line\">        LocalDate localDate2 = dateToLocalDate(var2);</span><br><span class=\"line\">        Period period = Period.between(localDate1, localDate2);</span><br><span class=\"line\">        return period.getYears();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Integer betweenToMonths(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToYears(var1, var2) * 12;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToDays(Date var1, Date var2) &#123;</span><br><span class=\"line\">        LocalDate localDate1 = dateToLocalDate(var1);</span><br><span class=\"line\">        LocalDate localDate2 = dateToLocalDate(var2);</span><br><span class=\"line\">        return localDate1.toEpochDay() - localDate2.toEpochDay();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToHours(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToDays(var1, var2) * 24;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToMinutes(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToHours(var1, var2) * 60;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToSeconds(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToMinutes(var1, var2) * 60;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Long betweenToMillis(Date var1, Date var2) &#123;</span><br><span class=\"line\">        return betweenToSeconds(var1, var2) * 1000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static LocalDate dateToLocalDate(Date date) &#123;</span><br><span class=\"line\">        Instant instant = date.toInstant();</span><br><span class=\"line\">        ZoneId zoneId = ZoneId.systemDefault();</span><br><span class=\"line\">        return instant.atZone(zoneId).toLocalDate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static LocalDateTime dateToLocalDateTime(Date date) &#123;</span><br><span class=\"line\">        Instant instant = date.toInstant();</span><br><span class=\"line\">        ZoneId zoneId = ZoneId.systemDefault();</span><br><span class=\"line\">        return instant.atZone(zoneId).toLocalDateTime();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Date localDateToDate(LocalDate localDate) &#123;</span><br><span class=\"line\">        ZoneId zoneId = ZoneId.systemDefault();</span><br><span class=\"line\">        Instant instant = localDate.atStartOfDay().atZone(zoneId).toInstant();</span><br><span class=\"line\">        return Date.from(instant);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Date localDateTimeToDate(LocalDateTime localDateTime) &#123;</span><br><span class=\"line\">        ZoneId zoneId = ZoneId.systemDefault();</span><br><span class=\"line\">        Instant instant = localDateTime.atZone(zoneId).toInstant();</span><br><span class=\"line\">        return Date.from(instant);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"分布式事务seata(二)springboot+seata+dubbo集成（AT模式）","catalog":true,"date":"2020-12-04T02:53:25.000Z","subtitle":"seata","header-img":"/blog/img/header_img/404.png","_content":"## 分布式事务seata(二)springboot+seata+dubbo集成（AT模式）\n### 一.配置\n`1.maven依赖`\n```java\n\t<dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.mybatis.spring.boot</groupId>\n      <artifactId>mybatis-spring-boot-starter</artifactId>\n      <version>${mybatis.version}</version>\n    </dependency>  \n\t<dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.21</version>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid-spring-boot-starter</artifactId>\n      <version>${druid.version}</version>\n    </dependency>\n\t<dependency>\n\t\t<groupId>com.alibaba.spring.boot</groupId>\n\t\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t\t<version>2.0.0</version>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>com.101tec</groupId>\n\t\t<artifactId>zkclient</artifactId>\n\t\t<version>0.10</version>\n\t\t<exclusions>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t\t<artifactId>slf4j-log4j12</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>io.seata</groupId>\n\t\t<artifactId>seata-all</artifactId>\n\t\t<version>1.4.0</version>\n\t</dependency>\n```\n`2.服务端配置（TC）`\n\n    打开https://github.com/seata/seata/releases，下载seata-server,这里使用的1.4.0版本。\n\t进入seata/conf目录，目录下有两个关键配置文件：register.conf,file.conf。\n\t\n\tregister.conf是seata服务端（TC）的注册中心和配置中心的配置文件。\n\tSeata配置中心支持consul，apollo，etcd,zookeeper,redis,file(直连)，\n\tseata注册中心支持eureka，consul，apollo，etcd,zookeeper,redis,sofa，file(使用文件做配置中心)。\n\t\n\tregister.conf中register的type属性是file时，表示不依赖第三方配置注册中心，\n\t直接用seata-server直连。如果需要搭建高可用体系，建议使用注册中心。这里使用zk做示范。\n\t\n\tregister.conf中config的type属性是file时，表示使用file.conf做配置中心。\n\tfile.conf中可以指定事务日志存贮方式，有三种存贮方式：file、db、redis。\n\t指定file时，事务日志会存贮在本地seata/bin/sessionStore/目录下的root.data文件中。\n\t指定db时，事务日志会存贮在数据库中。指定redis时，使用redis存贮事务日志。这里使用file做示范。\n\n**register.conf**\n```java\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = \"zk\"\n  loadBalance = \"RandomLoadBalance\"\n  loadBalanceVirtualNodes = 10\n\n  nacos {\n    application = \"seata-server\"\n    serverAddr = \"127.0.0.1:8848\"\n    group = \"SEATA_GROUP\"\n    namespace = \"\"\n    cluster = \"default\"\n    username = \"\"\n    password = \"\"\n  }\n  eureka {\n    serviceUrl = \"http://localhost:8761/eureka\"\n    application = \"default\"\n    weight = \"1\"\n  }\n  redis {\n    serverAddr = \"localhost:6379\"\n    db = 0\n    password = \"\"\n    cluster = \"default\"\n    timeout = 0\n  }\n  zk {\n    cluster = \"default\"\n    serverAddr = \"127.0.0.1:2181\"\n    sessionTimeout = 6000\n    connectTimeout = 2000\n    username = \"\"\n    password = \"\"\n  }\n  consul {\n    cluster = \"default\"\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  etcd3 {\n    cluster = \"default\"\n    serverAddr = \"http://localhost:2379\"\n  }\n  sofa {\n    serverAddr = \"127.0.0.1:9603\"\n    application = \"default\"\n    region = \"DEFAULT_ZONE\"\n    datacenter = \"DefaultDataCenter\"\n    cluster = \"default\"\n    group = \"SEATA_GROUP\"\n    addressWaitTime = \"3000\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = \"file\"\n\n  nacos {\n    serverAddr = \"127.0.0.1:8848\"\n    namespace = \"\"\n    group = \"SEATA_GROUP\"\n    username = \"\"\n    password = \"\"\n  }\n  consul {\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  apollo {\n    appId = \"seata-server\"\n    apolloMeta = \"http://192.168.1.204:8801\"\n    namespace = \"application\"\n    apolloAccesskeySecret = \"\"\n  }\n  zk {\n    serverAddr = \"127.0.0.1:2181\"\n    sessionTimeout = 6000\n    connectTimeout = 2000\n    username = \"\"\n    password = \"\"\n  }\n  etcd3 {\n    serverAddr = \"http://localhost:2379\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\n```\n**file.conf**\n```java\n## transaction log store, only used in seata-server\nstore {\n  ## store mode: file、db、redis\n  mode = \"file\"\n\n  ## file store property\n  file {\n    ## store location dir\n    dir = \"sessionStore\"\n    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\n    maxBranchSessionSize = 16384\n    # globe session size , if exceeded throws exceptions\n    maxGlobalSessionSize = 512\n    # file buffer size , if exceeded allocate new buffer\n    fileWriteBufferCacheSize = 16384\n    # when recover batch read size\n    sessionReloadReadSize = 100\n    # async, sync\n    flushDiskMode = async\n  }\n\n  ## database store property\n  db {\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.\n    datasource = \"druid\"\n    ## mysql/oracle/postgresql/h2/oceanbase etc.\n    dbType = \"mysql\"\n    driverClassName = \"com.mysql.jdbc.Driver\"\n    url = \"jdbc:mysql://127.0.0.1:3306/seata\"\n    user = \"root\"\n    password = \"111111\"\n    minConn = 5\n    maxConn = 100\n    globalTable = \"global_table\"\n    branchTable = \"branch_table\"\n    lockTable = \"lock_table\"\n    queryLimit = 100\n    maxWait = 5000\n  }\n\n  ## redis store property\n  redis {\n    host = \"127.0.0.1\"\n    port = \"6379\"\n    password = \"\"\n    database = \"0\"\n    minConn = 1\n    maxConn = 10\n    maxTotal = 100\n    queryLimit = 100\n  }\n\n}\n\n```\n\n`2.客户端配置（TM,RM）`\n```\n在项目classpath路径下新建register.conf,file.conf文件，这里的文件和服务端TC的register.conf,file.conf文件同理。\n```\n**register.conf**\n```java\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = \"zk\"\n\n  nacos {\n    application = \"seata-server\"\n    serverAddr = \"localhost\"\n    namespace = \"\"\n    username = \"\"\n    password = \"\"\n  }\n  eureka {\n    serviceUrl = \"http://localhost:8761/eureka\"\n    weight = \"1\"\n  }\n  redis {\n    serverAddr = \"localhost:6379\"\n    db = \"0\"\n    password = \"\"\n    timeout = \"0\"\n  }\n  zk {\n    serverAddr = \"127.0.0.1:2181\"\n    sessionTimeout = 6000\n    connectTimeout = 2000\n    username = \"\"\n    password = \"\"\n  }\n  consul {\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  etcd3 {\n    serverAddr = \"http://localhost:2379\"\n  }\n  sofa {\n    serverAddr = \"127.0.0.1:9603\"\n    region = \"DEFAULT_ZONE\"\n    datacenter = \"DefaultDataCenter\"\n    group = \"SEATA_GROUP\"\n    addressWaitTime = \"3000\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig\n  type = \"file\"\n\n  nacos {\n    serverAddr = \"localhost\"\n    namespace = \"\"\n    group = \"SEATA_GROUP\"\n    username = \"\"\n    password = \"\"\n  }\n  consul {\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  apollo {\n    appId = \"seata-server\"\n    apolloMeta = \"http://192.168.1.204:8801\"\n    namespace = \"application\"\n  }\n  zk {\n    serverAddr = \"localhost:2181\"\n    sessionTimeout = 6000\n    connectTimeout = 2000\n    username = \"\"\n    password = \"\"\n  }\n  etcd3 {\n    serverAddr = \"http://localhost:2379\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\n```\n**file.conf**\n```java\ntransport {\n  # tcp udt unix-domain-socket\n  type = \"TCP\"\n  #NIO NATIVE\n  server = \"NIO\"\n  #enable heartbeat\n  heartbeat = true\n  # the client batch send request enable\n  enableClientBatchSendRequest = true\n  #thread factory for netty\n  threadFactory {\n    bossThreadPrefix = \"NettyBoss\"\n    workerThreadPrefix = \"NettyServerNIOWorker\"\n    serverExecutorThread-prefix = \"NettyServerBizHandler\"\n    shareBossWorker = false\n    clientSelectorThreadPrefix = \"NettyClientSelector\"\n    clientSelectorThreadSize = 1\n    clientWorkerThreadPrefix = \"NettyClientWorkerThread\"\n    # netty boss thread size,will not be used for UDT\n    bossThreadSize = 1\n    #auto default pin or 8\n    workerThreadSize = \"default\"\n  }\n  shutdown {\n    # when destroy server, wait seconds\n    wait = 3\n  }\n  serialization = \"seata\"\n  compressor = \"none\"\n}\nservice {\n  #transaction service group mapping\n  vgroupMapping.my_test_tx_group = \"default\"\n  #only support when registry.type=file, please don't set multiple addresses\n  default.grouplist = \"127.0.0.1:8091\"\n  #degrade, current not support\n  enableDegrade = false\n  #disable seata\n  disableGlobalTransaction = false\n}\n\nclient {\n  rm {\n    asyncCommitBufferLimit = 10000\n    lock {\n      retryInterval = 10\n      retryTimes = 30\n      retryPolicyBranchRollbackOnConflict = true\n    }\n    reportRetryCount = 5\n    tableMetaCheckEnable = false\n    reportSuccessEnable = false\n  }\n  tm {\n    commitRetryCount = 5\n    rollbackRetryCount = 5\n  }\n  undo {\n    dataValidation = true\n    logSerialization = \"jackson\"\n    logTable = \"undo_log\"\n  }\n  log {\n    exceptionRate = 100\n  }\n}\n\n\n```\n`3.数据源及GlobalTransactionScanner配置`\n```java\n@Configuration\npublic class SeataAutoConfig {\n\n  \n    @Autowired\n    private DataSourceProperties dataSourceProperties;\n\n  \n    @Bean\n    public DruidDataSource druidDataSource(){\n        DruidDataSource druidDataSource = new DruidDataSource();\n        druidDataSource.setUrl(dataSourceProperties.getUrl());\n        druidDataSource.setUsername(dataSourceProperties.getUsername());\n        druidDataSource.setPassword(dataSourceProperties.getPassword());\n        druidDataSource.setDriverClassName(dataSourceProperties.getDriverClassName());\n        druidDataSource.setInitialSize(0);\n        druidDataSource.setMaxActive(180);\n        druidDataSource.setMaxWait(60000);\n        druidDataSource.setMinIdle(0);\n        druidDataSource.setValidationQuery(\"Select 1 from DUAL\");\n        druidDataSource.setTestOnBorrow(false);\n        druidDataSource.setTestOnReturn(false);\n        druidDataSource.setTestWhileIdle(true);\n        druidDataSource.setTimeBetweenEvictionRunsMillis(60000);\n        druidDataSource.setMinEvictableIdleTimeMillis(25200000);\n        druidDataSource.setRemoveAbandoned(true);\n        druidDataSource.setRemoveAbandonedTimeout(1800);\n        druidDataSource.setLogAbandoned(true);\n        return druidDataSource;\n    }\n\n \n    @Bean\n    public DataSourceProxy dataSourceProxy(DruidDataSource druidDataSource){\n        return new DataSourceProxy(druidDataSource);\n    }\n\n    @Bean\n    public DataSourceTransactionManager transactionManager(DataSourceProxy dataSourceProxy) {\n        return new DataSourceTransactionManager(dataSourceProxy);\n    }\n\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSourceProxy dataSourceProxy) throws Exception {\n        SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();\n        factoryBean.setDataSource(dataSourceProxy);\n        factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver()\n                .getResources(\"classpath*:/mapper/*.xml\"));\n        factoryBean.setTransactionFactory(new SpringManagedTransactionFactory());\n        return factoryBean.getObject();\n    }\n\n    @Bean\n    public GlobalTransactionScanner globalTransactionScanner(){\n\t//dubbo-seata-service是应用名，my_test_tx_group是事务分组，和客户端file.conf中service.vgroupMapping.my_test_tx_group对应。\n        return new GlobalTransactionScanner(\"dubbo-seata-service\", \"my_test_tx_group\");\n    }\n```\n`4.数据库增加事务回滚日志表`\n\n    CREATE TABLE `undo_log` (\n      `id` bigint(20) NOT NULL AUTO_INCREMENT,\n      `branch_id` bigint(20) NOT NULL,\n      `xid` varchar(100) NOT NULL,\n      `context` varchar(128) NOT NULL,\n      `rollback_info` longblob NOT NULL,\n      `log_status` int(11) NOT NULL,\n      `log_created` datetime NOT NULL,\n      `log_modified` datetime NOT NULL,\n      PRIMARY KEY (`id`),\n      UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n    ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n\tundo_log用于插入回滚日志,把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 UNDO_LOG 表中。回滚完成后数据被删除。\n### 二.启动服务\n`1.启动zk`\n\n`2.启动seata-server`\n\n`3.启动项目(dubbo-seata-service和dubbo-seata)`\n![在这里插入图片描述](/blog/img/seata/seata4.png)\n    如上图seata-server中的日志，可以看到provider和consumer的TM,RM都已注册成功。\n\n### 三.分布式事务的使用\n```java\npublic class TestService {\n    @Reference(retries = -1)\n    private AccountService accountService;\n    @Reference(retries = -1)\n    private BussinessService bussinessService;\n\n    @GlobalTransactional(name = \"dubbo-seata\")\n    public void test(){\n        System.out.println(\"开始全局事务，XID = \" + RootContext.getXID());\n        accountService.updateAccount();\n        bussinessService.updateBussiness();\n        throw new RuntimeException(\"测试抛异常后，分布式事务回滚！\");\n    }\n}\n```\n    如上述代码，只需要在方法上加上@GlobalTransactional即可\n**执行上述代码看seata-server日志**\n![在这里插入图片描述](/blog/img/seata/seata5.png)\n\n    如上图，可以看到整个事务回滚过程，开启全局事务——注册分支事务——回滚分支事务——回滚全局事务。\n\n\n### 四.范例代码\n    https://gitee.com/xshCloudy/sharding.git\n\n### 五.参考项目及资料\n    https://github.com/seata/seata.git\n    https://github.com/seata/seata-samples.git\n    https://seata.io/zh-cn/docs/overview/what-is-seata.html\n\n\n\n\n","source":"_posts/分布式事务seata-二-springboot-seata-dubbo集成（AT模式）.md","raw":"---\ntitle: 分布式事务seata(二)springboot+seata+dubbo集成（AT模式）\ncatalog: true\ndate: 2020-12-04 10:53:25\nsubtitle: seata\nheader-img: \"/blog/img/header_img/404.png\"\ntags:\n- seata\n---\n## 分布式事务seata(二)springboot+seata+dubbo集成（AT模式）\n### 一.配置\n`1.maven依赖`\n```java\n\t<dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.mybatis.spring.boot</groupId>\n      <artifactId>mybatis-spring-boot-starter</artifactId>\n      <version>${mybatis.version}</version>\n    </dependency>  \n\t<dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.21</version>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid-spring-boot-starter</artifactId>\n      <version>${druid.version}</version>\n    </dependency>\n\t<dependency>\n\t\t<groupId>com.alibaba.spring.boot</groupId>\n\t\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t\t<version>2.0.0</version>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>com.101tec</groupId>\n\t\t<artifactId>zkclient</artifactId>\n\t\t<version>0.10</version>\n\t\t<exclusions>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t\t<artifactId>slf4j-log4j12</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>io.seata</groupId>\n\t\t<artifactId>seata-all</artifactId>\n\t\t<version>1.4.0</version>\n\t</dependency>\n```\n`2.服务端配置（TC）`\n\n    打开https://github.com/seata/seata/releases，下载seata-server,这里使用的1.4.0版本。\n\t进入seata/conf目录，目录下有两个关键配置文件：register.conf,file.conf。\n\t\n\tregister.conf是seata服务端（TC）的注册中心和配置中心的配置文件。\n\tSeata配置中心支持consul，apollo，etcd,zookeeper,redis,file(直连)，\n\tseata注册中心支持eureka，consul，apollo，etcd,zookeeper,redis,sofa，file(使用文件做配置中心)。\n\t\n\tregister.conf中register的type属性是file时，表示不依赖第三方配置注册中心，\n\t直接用seata-server直连。如果需要搭建高可用体系，建议使用注册中心。这里使用zk做示范。\n\t\n\tregister.conf中config的type属性是file时，表示使用file.conf做配置中心。\n\tfile.conf中可以指定事务日志存贮方式，有三种存贮方式：file、db、redis。\n\t指定file时，事务日志会存贮在本地seata/bin/sessionStore/目录下的root.data文件中。\n\t指定db时，事务日志会存贮在数据库中。指定redis时，使用redis存贮事务日志。这里使用file做示范。\n\n**register.conf**\n```java\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = \"zk\"\n  loadBalance = \"RandomLoadBalance\"\n  loadBalanceVirtualNodes = 10\n\n  nacos {\n    application = \"seata-server\"\n    serverAddr = \"127.0.0.1:8848\"\n    group = \"SEATA_GROUP\"\n    namespace = \"\"\n    cluster = \"default\"\n    username = \"\"\n    password = \"\"\n  }\n  eureka {\n    serviceUrl = \"http://localhost:8761/eureka\"\n    application = \"default\"\n    weight = \"1\"\n  }\n  redis {\n    serverAddr = \"localhost:6379\"\n    db = 0\n    password = \"\"\n    cluster = \"default\"\n    timeout = 0\n  }\n  zk {\n    cluster = \"default\"\n    serverAddr = \"127.0.0.1:2181\"\n    sessionTimeout = 6000\n    connectTimeout = 2000\n    username = \"\"\n    password = \"\"\n  }\n  consul {\n    cluster = \"default\"\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  etcd3 {\n    cluster = \"default\"\n    serverAddr = \"http://localhost:2379\"\n  }\n  sofa {\n    serverAddr = \"127.0.0.1:9603\"\n    application = \"default\"\n    region = \"DEFAULT_ZONE\"\n    datacenter = \"DefaultDataCenter\"\n    cluster = \"default\"\n    group = \"SEATA_GROUP\"\n    addressWaitTime = \"3000\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = \"file\"\n\n  nacos {\n    serverAddr = \"127.0.0.1:8848\"\n    namespace = \"\"\n    group = \"SEATA_GROUP\"\n    username = \"\"\n    password = \"\"\n  }\n  consul {\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  apollo {\n    appId = \"seata-server\"\n    apolloMeta = \"http://192.168.1.204:8801\"\n    namespace = \"application\"\n    apolloAccesskeySecret = \"\"\n  }\n  zk {\n    serverAddr = \"127.0.0.1:2181\"\n    sessionTimeout = 6000\n    connectTimeout = 2000\n    username = \"\"\n    password = \"\"\n  }\n  etcd3 {\n    serverAddr = \"http://localhost:2379\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\n```\n**file.conf**\n```java\n## transaction log store, only used in seata-server\nstore {\n  ## store mode: file、db、redis\n  mode = \"file\"\n\n  ## file store property\n  file {\n    ## store location dir\n    dir = \"sessionStore\"\n    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\n    maxBranchSessionSize = 16384\n    # globe session size , if exceeded throws exceptions\n    maxGlobalSessionSize = 512\n    # file buffer size , if exceeded allocate new buffer\n    fileWriteBufferCacheSize = 16384\n    # when recover batch read size\n    sessionReloadReadSize = 100\n    # async, sync\n    flushDiskMode = async\n  }\n\n  ## database store property\n  db {\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.\n    datasource = \"druid\"\n    ## mysql/oracle/postgresql/h2/oceanbase etc.\n    dbType = \"mysql\"\n    driverClassName = \"com.mysql.jdbc.Driver\"\n    url = \"jdbc:mysql://127.0.0.1:3306/seata\"\n    user = \"root\"\n    password = \"111111\"\n    minConn = 5\n    maxConn = 100\n    globalTable = \"global_table\"\n    branchTable = \"branch_table\"\n    lockTable = \"lock_table\"\n    queryLimit = 100\n    maxWait = 5000\n  }\n\n  ## redis store property\n  redis {\n    host = \"127.0.0.1\"\n    port = \"6379\"\n    password = \"\"\n    database = \"0\"\n    minConn = 1\n    maxConn = 10\n    maxTotal = 100\n    queryLimit = 100\n  }\n\n}\n\n```\n\n`2.客户端配置（TM,RM）`\n```\n在项目classpath路径下新建register.conf,file.conf文件，这里的文件和服务端TC的register.conf,file.conf文件同理。\n```\n**register.conf**\n```java\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = \"zk\"\n\n  nacos {\n    application = \"seata-server\"\n    serverAddr = \"localhost\"\n    namespace = \"\"\n    username = \"\"\n    password = \"\"\n  }\n  eureka {\n    serviceUrl = \"http://localhost:8761/eureka\"\n    weight = \"1\"\n  }\n  redis {\n    serverAddr = \"localhost:6379\"\n    db = \"0\"\n    password = \"\"\n    timeout = \"0\"\n  }\n  zk {\n    serverAddr = \"127.0.0.1:2181\"\n    sessionTimeout = 6000\n    connectTimeout = 2000\n    username = \"\"\n    password = \"\"\n  }\n  consul {\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  etcd3 {\n    serverAddr = \"http://localhost:2379\"\n  }\n  sofa {\n    serverAddr = \"127.0.0.1:9603\"\n    region = \"DEFAULT_ZONE\"\n    datacenter = \"DefaultDataCenter\"\n    group = \"SEATA_GROUP\"\n    addressWaitTime = \"3000\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig\n  type = \"file\"\n\n  nacos {\n    serverAddr = \"localhost\"\n    namespace = \"\"\n    group = \"SEATA_GROUP\"\n    username = \"\"\n    password = \"\"\n  }\n  consul {\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  apollo {\n    appId = \"seata-server\"\n    apolloMeta = \"http://192.168.1.204:8801\"\n    namespace = \"application\"\n  }\n  zk {\n    serverAddr = \"localhost:2181\"\n    sessionTimeout = 6000\n    connectTimeout = 2000\n    username = \"\"\n    password = \"\"\n  }\n  etcd3 {\n    serverAddr = \"http://localhost:2379\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\n```\n**file.conf**\n```java\ntransport {\n  # tcp udt unix-domain-socket\n  type = \"TCP\"\n  #NIO NATIVE\n  server = \"NIO\"\n  #enable heartbeat\n  heartbeat = true\n  # the client batch send request enable\n  enableClientBatchSendRequest = true\n  #thread factory for netty\n  threadFactory {\n    bossThreadPrefix = \"NettyBoss\"\n    workerThreadPrefix = \"NettyServerNIOWorker\"\n    serverExecutorThread-prefix = \"NettyServerBizHandler\"\n    shareBossWorker = false\n    clientSelectorThreadPrefix = \"NettyClientSelector\"\n    clientSelectorThreadSize = 1\n    clientWorkerThreadPrefix = \"NettyClientWorkerThread\"\n    # netty boss thread size,will not be used for UDT\n    bossThreadSize = 1\n    #auto default pin or 8\n    workerThreadSize = \"default\"\n  }\n  shutdown {\n    # when destroy server, wait seconds\n    wait = 3\n  }\n  serialization = \"seata\"\n  compressor = \"none\"\n}\nservice {\n  #transaction service group mapping\n  vgroupMapping.my_test_tx_group = \"default\"\n  #only support when registry.type=file, please don't set multiple addresses\n  default.grouplist = \"127.0.0.1:8091\"\n  #degrade, current not support\n  enableDegrade = false\n  #disable seata\n  disableGlobalTransaction = false\n}\n\nclient {\n  rm {\n    asyncCommitBufferLimit = 10000\n    lock {\n      retryInterval = 10\n      retryTimes = 30\n      retryPolicyBranchRollbackOnConflict = true\n    }\n    reportRetryCount = 5\n    tableMetaCheckEnable = false\n    reportSuccessEnable = false\n  }\n  tm {\n    commitRetryCount = 5\n    rollbackRetryCount = 5\n  }\n  undo {\n    dataValidation = true\n    logSerialization = \"jackson\"\n    logTable = \"undo_log\"\n  }\n  log {\n    exceptionRate = 100\n  }\n}\n\n\n```\n`3.数据源及GlobalTransactionScanner配置`\n```java\n@Configuration\npublic class SeataAutoConfig {\n\n  \n    @Autowired\n    private DataSourceProperties dataSourceProperties;\n\n  \n    @Bean\n    public DruidDataSource druidDataSource(){\n        DruidDataSource druidDataSource = new DruidDataSource();\n        druidDataSource.setUrl(dataSourceProperties.getUrl());\n        druidDataSource.setUsername(dataSourceProperties.getUsername());\n        druidDataSource.setPassword(dataSourceProperties.getPassword());\n        druidDataSource.setDriverClassName(dataSourceProperties.getDriverClassName());\n        druidDataSource.setInitialSize(0);\n        druidDataSource.setMaxActive(180);\n        druidDataSource.setMaxWait(60000);\n        druidDataSource.setMinIdle(0);\n        druidDataSource.setValidationQuery(\"Select 1 from DUAL\");\n        druidDataSource.setTestOnBorrow(false);\n        druidDataSource.setTestOnReturn(false);\n        druidDataSource.setTestWhileIdle(true);\n        druidDataSource.setTimeBetweenEvictionRunsMillis(60000);\n        druidDataSource.setMinEvictableIdleTimeMillis(25200000);\n        druidDataSource.setRemoveAbandoned(true);\n        druidDataSource.setRemoveAbandonedTimeout(1800);\n        druidDataSource.setLogAbandoned(true);\n        return druidDataSource;\n    }\n\n \n    @Bean\n    public DataSourceProxy dataSourceProxy(DruidDataSource druidDataSource){\n        return new DataSourceProxy(druidDataSource);\n    }\n\n    @Bean\n    public DataSourceTransactionManager transactionManager(DataSourceProxy dataSourceProxy) {\n        return new DataSourceTransactionManager(dataSourceProxy);\n    }\n\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSourceProxy dataSourceProxy) throws Exception {\n        SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();\n        factoryBean.setDataSource(dataSourceProxy);\n        factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver()\n                .getResources(\"classpath*:/mapper/*.xml\"));\n        factoryBean.setTransactionFactory(new SpringManagedTransactionFactory());\n        return factoryBean.getObject();\n    }\n\n    @Bean\n    public GlobalTransactionScanner globalTransactionScanner(){\n\t//dubbo-seata-service是应用名，my_test_tx_group是事务分组，和客户端file.conf中service.vgroupMapping.my_test_tx_group对应。\n        return new GlobalTransactionScanner(\"dubbo-seata-service\", \"my_test_tx_group\");\n    }\n```\n`4.数据库增加事务回滚日志表`\n\n    CREATE TABLE `undo_log` (\n      `id` bigint(20) NOT NULL AUTO_INCREMENT,\n      `branch_id` bigint(20) NOT NULL,\n      `xid` varchar(100) NOT NULL,\n      `context` varchar(128) NOT NULL,\n      `rollback_info` longblob NOT NULL,\n      `log_status` int(11) NOT NULL,\n      `log_created` datetime NOT NULL,\n      `log_modified` datetime NOT NULL,\n      PRIMARY KEY (`id`),\n      UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n    ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n\tundo_log用于插入回滚日志,把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 UNDO_LOG 表中。回滚完成后数据被删除。\n### 二.启动服务\n`1.启动zk`\n\n`2.启动seata-server`\n\n`3.启动项目(dubbo-seata-service和dubbo-seata)`\n![在这里插入图片描述](/blog/img/seata/seata4.png)\n    如上图seata-server中的日志，可以看到provider和consumer的TM,RM都已注册成功。\n\n### 三.分布式事务的使用\n```java\npublic class TestService {\n    @Reference(retries = -1)\n    private AccountService accountService;\n    @Reference(retries = -1)\n    private BussinessService bussinessService;\n\n    @GlobalTransactional(name = \"dubbo-seata\")\n    public void test(){\n        System.out.println(\"开始全局事务，XID = \" + RootContext.getXID());\n        accountService.updateAccount();\n        bussinessService.updateBussiness();\n        throw new RuntimeException(\"测试抛异常后，分布式事务回滚！\");\n    }\n}\n```\n    如上述代码，只需要在方法上加上@GlobalTransactional即可\n**执行上述代码看seata-server日志**\n![在这里插入图片描述](/blog/img/seata/seata5.png)\n\n    如上图，可以看到整个事务回滚过程，开启全局事务——注册分支事务——回滚分支事务——回滚全局事务。\n\n\n### 四.范例代码\n    https://gitee.com/xshCloudy/sharding.git\n\n### 五.参考项目及资料\n    https://github.com/seata/seata.git\n    https://github.com/seata/seata-samples.git\n    https://seata.io/zh-cn/docs/overview/what-is-seata.html\n\n\n\n\n","slug":"分布式事务seata-二-springboot-seata-dubbo集成（AT模式）","published":1,"updated":"2020-12-04T07:01:02.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5p5xn6001q98v56xshhvwh","content":"<h2 id=\"分布式事务seata二springbootseatadubbo集成at模式\">分布式事务seata(二)springboot+seata+dubbo集成（AT模式）</h2>\n<h3 id=\"一配置\">一.配置</h3>\n<p><code>1.maven依赖</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;5.1.21&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.10&lt;/version&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/exclusion&gt;</span><br><span class=\"line\">\t&lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;seata-all&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.服务端配置（TC）</code></p>\n<pre><code>打开https://github.com/seata/seata/releases，下载seata-server,这里使用的1.4.0版本。\n进入seata/conf目录，目录下有两个关键配置文件：register.conf,file.conf。\n\nregister.conf是seata服务端（TC）的注册中心和配置中心的配置文件。\nSeata配置中心支持consul，apollo，etcd,zookeeper,redis,file(直连)，\nseata注册中心支持eureka，consul，apollo，etcd,zookeeper,redis,sofa，file(使用文件做配置中心)。\n\nregister.conf中register的type属性是file时，表示不依赖第三方配置注册中心，\n直接用seata-server直连。如果需要搭建高可用体系，建议使用注册中心。这里使用zk做示范。\n\nregister.conf中config的type属性是file时，表示使用file.conf做配置中心。\nfile.conf中可以指定事务日志存贮方式，有三种存贮方式：file、db、redis。\n指定file时，事务日志会存贮在本地seata/bin/sessionStore/目录下的root.data文件中。\n指定db时，事务日志会存贮在数据库中。指定redis时，使用redis存贮事务日志。这里使用file做示范。\n</code></pre>\n<p><strong>register.conf</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry &#123;</span><br><span class=\"line\">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class=\"line\">  type = <span class=\"string\">\"zk\"</span></span><br><span class=\"line\">  loadBalance = <span class=\"string\">\"RandomLoadBalance\"</span></span><br><span class=\"line\">  loadBalanceVirtualNodes = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    application = <span class=\"string\">\"seata-server\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8848\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eureka &#123;</span><br><span class=\"line\">    serviceUrl = <span class=\"string\">\"http://localhost:8761/eureka\"</span></span><br><span class=\"line\">    application = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    weight = <span class=\"string\">\"1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  redis &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost:6379\"</span></span><br><span class=\"line\">    db = <span class=\"number\">0</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    timeout = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  zk &#123;</span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:2181\"</span></span><br><span class=\"line\">    sessionTimeout = <span class=\"number\">6000</span></span><br><span class=\"line\">    connectTimeout = <span class=\"number\">2000</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  consul &#123;</span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  etcd3 &#123;</span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"http://localhost:2379\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sofa &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:9603\"</span></span><br><span class=\"line\">    application = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    region = <span class=\"string\">\"DEFAULT_ZONE\"</span></span><br><span class=\"line\">    datacenter = <span class=\"string\">\"DefaultDataCenter\"</span></span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    addressWaitTime = <span class=\"string\">\"3000\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = <span class=\"string\">\"file.conf\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">config &#123;</span><br><span class=\"line\">  # file、nacos 、apollo、zk、consul、etcd3</span><br><span class=\"line\">  type = <span class=\"string\">\"file\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8848\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  consul &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apollo &#123;</span><br><span class=\"line\">    appId = <span class=\"string\">\"seata-server\"</span></span><br><span class=\"line\">    apolloMeta = <span class=\"string\">\"http://192.168.1.204:8801\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"application\"</span></span><br><span class=\"line\">    apolloAccesskeySecret = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  zk &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:2181\"</span></span><br><span class=\"line\">    sessionTimeout = <span class=\"number\">6000</span></span><br><span class=\"line\">    connectTimeout = <span class=\"number\">2000</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  etcd3 &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"http://localhost:2379\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = <span class=\"string\">\"file.conf\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>file.conf</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## transaction log store, only used in seata-server</span><br><span class=\"line\">store &#123;</span><br><span class=\"line\">  ## store mode: file、db、redis</span><br><span class=\"line\">  mode = <span class=\"string\">\"file\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ## file store property</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    ## store location dir</span><br><span class=\"line\">    dir = <span class=\"string\">\"sessionStore\"</span></span><br><span class=\"line\">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class=\"line\">    maxBranchSessionSize = <span class=\"number\">16384</span></span><br><span class=\"line\">    # globe session size , if exceeded throws exceptions</span><br><span class=\"line\">    maxGlobalSessionSize = <span class=\"number\">512</span></span><br><span class=\"line\">    # file buffer size , if exceeded allocate new buffer</span><br><span class=\"line\">    fileWriteBufferCacheSize = <span class=\"number\">16384</span></span><br><span class=\"line\">    # when recover batch read size</span><br><span class=\"line\">    sessionReloadReadSize = <span class=\"number\">100</span></span><br><span class=\"line\">    # async, sync</span><br><span class=\"line\">    flushDiskMode = async</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ## database store property</span><br><span class=\"line\">  db &#123;</span><br><span class=\"line\">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span><br><span class=\"line\">    datasource = <span class=\"string\">\"druid\"</span></span><br><span class=\"line\">    ## mysql/oracle/postgresql/h2/oceanbase etc.</span><br><span class=\"line\">    dbType = <span class=\"string\">\"mysql\"</span></span><br><span class=\"line\">    driverClassName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span><br><span class=\"line\">    url = <span class=\"string\">\"jdbc:mysql://127.0.0.1:3306/seata\"</span></span><br><span class=\"line\">    user = <span class=\"string\">\"root\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"111111\"</span></span><br><span class=\"line\">    minConn = <span class=\"number\">5</span></span><br><span class=\"line\">    maxConn = <span class=\"number\">100</span></span><br><span class=\"line\">    globalTable = <span class=\"string\">\"global_table\"</span></span><br><span class=\"line\">    branchTable = <span class=\"string\">\"branch_table\"</span></span><br><span class=\"line\">    lockTable = <span class=\"string\">\"lock_table\"</span></span><br><span class=\"line\">    queryLimit = <span class=\"number\">100</span></span><br><span class=\"line\">    maxWait = <span class=\"number\">5000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ## redis store property</span><br><span class=\"line\">  redis &#123;</span><br><span class=\"line\">    host = <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">    port = <span class=\"string\">\"6379\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    database = <span class=\"string\">\"0\"</span></span><br><span class=\"line\">    minConn = <span class=\"number\">1</span></span><br><span class=\"line\">    maxConn = <span class=\"number\">10</span></span><br><span class=\"line\">    maxTotal = <span class=\"number\">100</span></span><br><span class=\"line\">    queryLimit = <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.客户端配置（TM,RM）</code>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在项目classpath路径下新建register.conf,file.conf文件，这里的文件和服务端TC的register.conf,file.conf文件同理。</span><br></pre></td></tr></table></figure></p>\n<p><strong>register.conf</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry &#123;</span><br><span class=\"line\">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class=\"line\">  type = <span class=\"string\">\"zk\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    application = <span class=\"string\">\"seata-server\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eureka &#123;</span><br><span class=\"line\">    serviceUrl = <span class=\"string\">\"http://localhost:8761/eureka\"</span></span><br><span class=\"line\">    weight = <span class=\"string\">\"1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  redis &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost:6379\"</span></span><br><span class=\"line\">    db = <span class=\"string\">\"0\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    timeout = <span class=\"string\">\"0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  zk &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:2181\"</span></span><br><span class=\"line\">    sessionTimeout = <span class=\"number\">6000</span></span><br><span class=\"line\">    connectTimeout = <span class=\"number\">2000</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  consul &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  etcd3 &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"http://localhost:2379\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sofa &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:9603\"</span></span><br><span class=\"line\">    region = <span class=\"string\">\"DEFAULT_ZONE\"</span></span><br><span class=\"line\">    datacenter = <span class=\"string\">\"DefaultDataCenter\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    addressWaitTime = <span class=\"string\">\"3000\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = <span class=\"string\">\"file.conf\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">config &#123;</span><br><span class=\"line\">  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig</span><br><span class=\"line\">  type = <span class=\"string\">\"file\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  consul &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apollo &#123;</span><br><span class=\"line\">    appId = <span class=\"string\">\"seata-server\"</span></span><br><span class=\"line\">    apolloMeta = <span class=\"string\">\"http://192.168.1.204:8801\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"application\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  zk &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost:2181\"</span></span><br><span class=\"line\">    sessionTimeout = <span class=\"number\">6000</span></span><br><span class=\"line\">    connectTimeout = <span class=\"number\">2000</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  etcd3 &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"http://localhost:2379\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = <span class=\"string\">\"file.conf\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>file.conf</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transport &#123;</span><br><span class=\"line\">  # tcp udt unix-domain-socket</span><br><span class=\"line\">  type = <span class=\"string\">\"TCP\"</span></span><br><span class=\"line\">  #NIO NATIVE</span><br><span class=\"line\">  server = <span class=\"string\">\"NIO\"</span></span><br><span class=\"line\">  #enable heartbeat</span><br><span class=\"line\">  heartbeat = <span class=\"keyword\">true</span></span><br><span class=\"line\">  # the client batch send request enable</span><br><span class=\"line\">  enableClientBatchSendRequest = <span class=\"keyword\">true</span></span><br><span class=\"line\">  #thread factory for netty</span><br><span class=\"line\">  threadFactory &#123;</span><br><span class=\"line\">    bossThreadPrefix = <span class=\"string\">\"NettyBoss\"</span></span><br><span class=\"line\">    workerThreadPrefix = <span class=\"string\">\"NettyServerNIOWorker\"</span></span><br><span class=\"line\">    serverExecutorThread-prefix = <span class=\"string\">\"NettyServerBizHandler\"</span></span><br><span class=\"line\">    shareBossWorker = <span class=\"keyword\">false</span></span><br><span class=\"line\">    clientSelectorThreadPrefix = <span class=\"string\">\"NettyClientSelector\"</span></span><br><span class=\"line\">    clientSelectorThreadSize = <span class=\"number\">1</span></span><br><span class=\"line\">    clientWorkerThreadPrefix = <span class=\"string\">\"NettyClientWorkerThread\"</span></span><br><span class=\"line\">    # netty boss thread size,will not be used for UDT</span><br><span class=\"line\">    bossThreadSize = <span class=\"number\">1</span></span><br><span class=\"line\">    #auto default pin or 8</span><br><span class=\"line\">    workerThreadSize = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  shutdown &#123;</span><br><span class=\"line\">    # when destroy server, wait seconds</span><br><span class=\"line\">    wait = <span class=\"number\">3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  serialization = <span class=\"string\">\"seata\"</span></span><br><span class=\"line\">  compressor = <span class=\"string\">\"none\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">service &#123;</span><br><span class=\"line\">  #transaction service group mapping</span><br><span class=\"line\">  vgroupMapping.my_test_tx_group = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">  #only support when registry.type=file, please don't set multiple addresses</span><br><span class=\"line\">  <span class=\"keyword\">default</span>.grouplist = <span class=\"string\">\"127.0.0.1:8091\"</span></span><br><span class=\"line\">  #degrade, current not support</span><br><span class=\"line\">  enableDegrade = <span class=\"keyword\">false</span></span><br><span class=\"line\">  #disable seata</span><br><span class=\"line\">  disableGlobalTransaction = <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">client &#123;</span><br><span class=\"line\">  rm &#123;</span><br><span class=\"line\">    asyncCommitBufferLimit = <span class=\"number\">10000</span></span><br><span class=\"line\">    lock &#123;</span><br><span class=\"line\">      retryInterval = <span class=\"number\">10</span></span><br><span class=\"line\">      retryTimes = <span class=\"number\">30</span></span><br><span class=\"line\">      retryPolicyBranchRollbackOnConflict = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reportRetryCount = <span class=\"number\">5</span></span><br><span class=\"line\">    tableMetaCheckEnable = <span class=\"keyword\">false</span></span><br><span class=\"line\">    reportSuccessEnable = <span class=\"keyword\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tm &#123;</span><br><span class=\"line\">    commitRetryCount = <span class=\"number\">5</span></span><br><span class=\"line\">    rollbackRetryCount = <span class=\"number\">5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  undo &#123;</span><br><span class=\"line\">    dataValidation = <span class=\"keyword\">true</span></span><br><span class=\"line\">    logSerialization = <span class=\"string\">\"jackson\"</span></span><br><span class=\"line\">    logTable = <span class=\"string\">\"undo_log\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log &#123;</span><br><span class=\"line\">    exceptionRate = <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>3.数据源及GlobalTransactionScanner配置</code>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeataAutoConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSourceProperties dataSourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DruidDataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">        druidDataSource.setUrl(dataSourceProperties.getUrl());</span><br><span class=\"line\">        druidDataSource.setUsername(dataSourceProperties.getUsername());</span><br><span class=\"line\">        druidDataSource.setPassword(dataSourceProperties.getPassword());</span><br><span class=\"line\">        druidDataSource.setDriverClassName(dataSourceProperties.getDriverClassName());</span><br><span class=\"line\">        druidDataSource.setInitialSize(<span class=\"number\">0</span>);</span><br><span class=\"line\">        druidDataSource.setMaxActive(<span class=\"number\">180</span>);</span><br><span class=\"line\">        druidDataSource.setMaxWait(<span class=\"number\">60000</span>);</span><br><span class=\"line\">        druidDataSource.setMinIdle(<span class=\"number\">0</span>);</span><br><span class=\"line\">        druidDataSource.setValidationQuery(<span class=\"string\">\"Select 1 from DUAL\"</span>);</span><br><span class=\"line\">        druidDataSource.setTestOnBorrow(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        druidDataSource.setTestOnReturn(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        druidDataSource.setTestWhileIdle(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        druidDataSource.setTimeBetweenEvictionRunsMillis(<span class=\"number\">60000</span>);</span><br><span class=\"line\">        druidDataSource.setMinEvictableIdleTimeMillis(<span class=\"number\">25200000</span>);</span><br><span class=\"line\">        druidDataSource.setRemoveAbandoned(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        druidDataSource.setRemoveAbandonedTimeout(<span class=\"number\">1800</span>);</span><br><span class=\"line\">        druidDataSource.setLogAbandoned(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">dataSourceProxy</span><span class=\"params\">(DruidDataSource druidDataSource)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(druidDataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">(DataSourceProxy dataSourceProxy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSourceProxy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactory</span><span class=\"params\">(DataSourceProxy dataSourceProxy)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean factoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        factoryBean.setDataSource(dataSourceProxy);</span><br><span class=\"line\">        factoryBean.setMapperLocations(<span class=\"keyword\">new</span> PathMatchingResourcePatternResolver()</span><br><span class=\"line\">                .getResources(<span class=\"string\">\"classpath*:/mapper/*.xml\"</span>));</span><br><span class=\"line\">        factoryBean.setTransactionFactory(<span class=\"keyword\">new</span> SpringManagedTransactionFactory());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factoryBean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> GlobalTransactionScanner <span class=\"title\">globalTransactionScanner</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//dubbo-seata-service是应用名，my_test_tx_group是事务分组，和客户端file.conf中service.vgroupMapping.my_test_tx_group对应。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> GlobalTransactionScanner(<span class=\"string\">\"dubbo-seata-service\"</span>, <span class=\"string\">\"my_test_tx_group\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>4.数据库增加事务回滚日志表</code></p>\n<pre><code>CREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\nundo_log用于插入回滚日志,把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 UNDO_LOG 表中。回滚完成后数据被删除。\n</code></pre>\n<h3 id=\"二启动服务\">二.启动服务</h3>\n<p><code>1.启动zk</code></p>\n<p><code>2.启动seata-server</code></p>\n<p><code>3.启动项目(dubbo-seata-service和dubbo-seata)</code>\n<img src=\"/blog/img/seata/seata4.png\" alt=\"在这里插入图片描述\">\n如上图seata-server中的日志，可以看到provider和consumer的TM,RM都已注册成功。</p>\n<h3 id=\"三分布式事务的使用\">三.分布式事务的使用</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Reference</span>(retries = -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AccountService accountService;</span><br><span class=\"line\">    <span class=\"meta\">@Reference</span>(retries = -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BussinessService bussinessService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GlobalTransactional</span>(name = <span class=\"string\">\"dubbo-seata\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"开始全局事务，XID = \"</span> + RootContext.getXID());</span><br><span class=\"line\">        accountService.updateAccount();</span><br><span class=\"line\">        bussinessService.updateBussiness();</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"测试抛异常后，分布式事务回滚！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<pre><code>如上述代码，只需要在方法上加上@GlobalTransactional即可\n</code></pre>\n<p><strong>执行上述代码看seata-server日志</strong>\n<img src=\"/blog/img/seata/seata5.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>如上图，可以看到整个事务回滚过程，开启全局事务——注册分支事务——回滚分支事务——回滚全局事务。\n</code></pre>\n<h3 id=\"四范例代码\">四.范例代码</h3>\n<pre><code>https://gitee.com/xshCloudy/sharding.git\n</code></pre>\n<h3 id=\"五参考项目及资料\">五.参考项目及资料</h3>\n<pre><code>https://github.com/seata/seata.git\nhttps://github.com/seata/seata-samples.git\nhttps://seata.io/zh-cn/docs/overview/what-is-seata.html\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2>分布式事务seata(二)springboot+seata+dubbo集成（AT模式）</h2>\n<h3>一.配置</h3>\n<p><code>1.maven依赖</code>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;5.1.21&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.10&lt;/version&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/exclusion&gt;</span><br><span class=\"line\">\t&lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;seata-all&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.服务端配置（TC）</code></p>\n<pre><code>打开https://github.com/seata/seata/releases，下载seata-server,这里使用的1.4.0版本。\n进入seata/conf目录，目录下有两个关键配置文件：register.conf,file.conf。\n\nregister.conf是seata服务端（TC）的注册中心和配置中心的配置文件。\nSeata配置中心支持consul，apollo，etcd,zookeeper,redis,file(直连)，\nseata注册中心支持eureka，consul，apollo，etcd,zookeeper,redis,sofa，file(使用文件做配置中心)。\n\nregister.conf中register的type属性是file时，表示不依赖第三方配置注册中心，\n直接用seata-server直连。如果需要搭建高可用体系，建议使用注册中心。这里使用zk做示范。\n\nregister.conf中config的type属性是file时，表示使用file.conf做配置中心。\nfile.conf中可以指定事务日志存贮方式，有三种存贮方式：file、db、redis。\n指定file时，事务日志会存贮在本地seata/bin/sessionStore/目录下的root.data文件中。\n指定db时，事务日志会存贮在数据库中。指定redis时，使用redis存贮事务日志。这里使用file做示范。\n</code></pre>\n<p><strong>register.conf</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry &#123;</span><br><span class=\"line\">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class=\"line\">  type = <span class=\"string\">\"zk\"</span></span><br><span class=\"line\">  loadBalance = <span class=\"string\">\"RandomLoadBalance\"</span></span><br><span class=\"line\">  loadBalanceVirtualNodes = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    application = <span class=\"string\">\"seata-server\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8848\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eureka &#123;</span><br><span class=\"line\">    serviceUrl = <span class=\"string\">\"http://localhost:8761/eureka\"</span></span><br><span class=\"line\">    application = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    weight = <span class=\"string\">\"1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  redis &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost:6379\"</span></span><br><span class=\"line\">    db = <span class=\"number\">0</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    timeout = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  zk &#123;</span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:2181\"</span></span><br><span class=\"line\">    sessionTimeout = <span class=\"number\">6000</span></span><br><span class=\"line\">    connectTimeout = <span class=\"number\">2000</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  consul &#123;</span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  etcd3 &#123;</span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"http://localhost:2379\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sofa &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:9603\"</span></span><br><span class=\"line\">    application = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    region = <span class=\"string\">\"DEFAULT_ZONE\"</span></span><br><span class=\"line\">    datacenter = <span class=\"string\">\"DefaultDataCenter\"</span></span><br><span class=\"line\">    cluster = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    addressWaitTime = <span class=\"string\">\"3000\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = <span class=\"string\">\"file.conf\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">config &#123;</span><br><span class=\"line\">  # file、nacos 、apollo、zk、consul、etcd3</span><br><span class=\"line\">  type = <span class=\"string\">\"file\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8848\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  consul &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apollo &#123;</span><br><span class=\"line\">    appId = <span class=\"string\">\"seata-server\"</span></span><br><span class=\"line\">    apolloMeta = <span class=\"string\">\"http://192.168.1.204:8801\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"application\"</span></span><br><span class=\"line\">    apolloAccesskeySecret = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  zk &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:2181\"</span></span><br><span class=\"line\">    sessionTimeout = <span class=\"number\">6000</span></span><br><span class=\"line\">    connectTimeout = <span class=\"number\">2000</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  etcd3 &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"http://localhost:2379\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = <span class=\"string\">\"file.conf\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>file.conf</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## transaction log store, only used in seata-server</span><br><span class=\"line\">store &#123;</span><br><span class=\"line\">  ## store mode: file、db、redis</span><br><span class=\"line\">  mode = <span class=\"string\">\"file\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ## file store property</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    ## store location dir</span><br><span class=\"line\">    dir = <span class=\"string\">\"sessionStore\"</span></span><br><span class=\"line\">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class=\"line\">    maxBranchSessionSize = <span class=\"number\">16384</span></span><br><span class=\"line\">    # globe session size , if exceeded throws exceptions</span><br><span class=\"line\">    maxGlobalSessionSize = <span class=\"number\">512</span></span><br><span class=\"line\">    # file buffer size , if exceeded allocate new buffer</span><br><span class=\"line\">    fileWriteBufferCacheSize = <span class=\"number\">16384</span></span><br><span class=\"line\">    # when recover batch read size</span><br><span class=\"line\">    sessionReloadReadSize = <span class=\"number\">100</span></span><br><span class=\"line\">    # async, sync</span><br><span class=\"line\">    flushDiskMode = async</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ## database store property</span><br><span class=\"line\">  db &#123;</span><br><span class=\"line\">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span><br><span class=\"line\">    datasource = <span class=\"string\">\"druid\"</span></span><br><span class=\"line\">    ## mysql/oracle/postgresql/h2/oceanbase etc.</span><br><span class=\"line\">    dbType = <span class=\"string\">\"mysql\"</span></span><br><span class=\"line\">    driverClassName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span><br><span class=\"line\">    url = <span class=\"string\">\"jdbc:mysql://127.0.0.1:3306/seata\"</span></span><br><span class=\"line\">    user = <span class=\"string\">\"root\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"111111\"</span></span><br><span class=\"line\">    minConn = <span class=\"number\">5</span></span><br><span class=\"line\">    maxConn = <span class=\"number\">100</span></span><br><span class=\"line\">    globalTable = <span class=\"string\">\"global_table\"</span></span><br><span class=\"line\">    branchTable = <span class=\"string\">\"branch_table\"</span></span><br><span class=\"line\">    lockTable = <span class=\"string\">\"lock_table\"</span></span><br><span class=\"line\">    queryLimit = <span class=\"number\">100</span></span><br><span class=\"line\">    maxWait = <span class=\"number\">5000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ## redis store property</span><br><span class=\"line\">  redis &#123;</span><br><span class=\"line\">    host = <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">    port = <span class=\"string\">\"6379\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    database = <span class=\"string\">\"0\"</span></span><br><span class=\"line\">    minConn = <span class=\"number\">1</span></span><br><span class=\"line\">    maxConn = <span class=\"number\">10</span></span><br><span class=\"line\">    maxTotal = <span class=\"number\">100</span></span><br><span class=\"line\">    queryLimit = <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>2.客户端配置（TM,RM）</code>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在项目classpath路径下新建register.conf,file.conf文件，这里的文件和服务端TC的register.conf,file.conf文件同理。</span><br></pre></td></tr></table></figure></p>\n<p><strong>register.conf</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry &#123;</span><br><span class=\"line\">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class=\"line\">  type = <span class=\"string\">\"zk\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    application = <span class=\"string\">\"seata-server\"</span></span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eureka &#123;</span><br><span class=\"line\">    serviceUrl = <span class=\"string\">\"http://localhost:8761/eureka\"</span></span><br><span class=\"line\">    weight = <span class=\"string\">\"1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  redis &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost:6379\"</span></span><br><span class=\"line\">    db = <span class=\"string\">\"0\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    timeout = <span class=\"string\">\"0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  zk &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:2181\"</span></span><br><span class=\"line\">    sessionTimeout = <span class=\"number\">6000</span></span><br><span class=\"line\">    connectTimeout = <span class=\"number\">2000</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  consul &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  etcd3 &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"http://localhost:2379\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sofa &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:9603\"</span></span><br><span class=\"line\">    region = <span class=\"string\">\"DEFAULT_ZONE\"</span></span><br><span class=\"line\">    datacenter = <span class=\"string\">\"DefaultDataCenter\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    addressWaitTime = <span class=\"string\">\"3000\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = <span class=\"string\">\"file.conf\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">config &#123;</span><br><span class=\"line\">  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig</span><br><span class=\"line\">  type = <span class=\"string\">\"file\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    group = <span class=\"string\">\"SEATA_GROUP\"</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  consul &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"127.0.0.1:8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apollo &#123;</span><br><span class=\"line\">    appId = <span class=\"string\">\"seata-server\"</span></span><br><span class=\"line\">    apolloMeta = <span class=\"string\">\"http://192.168.1.204:8801\"</span></span><br><span class=\"line\">    namespace = <span class=\"string\">\"application\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  zk &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"localhost:2181\"</span></span><br><span class=\"line\">    sessionTimeout = <span class=\"number\">6000</span></span><br><span class=\"line\">    connectTimeout = <span class=\"number\">2000</span></span><br><span class=\"line\">    username = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    password = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  etcd3 &#123;</span><br><span class=\"line\">    serverAddr = <span class=\"string\">\"http://localhost:2379\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = <span class=\"string\">\"file.conf\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>file.conf</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transport &#123;</span><br><span class=\"line\">  # tcp udt unix-domain-socket</span><br><span class=\"line\">  type = <span class=\"string\">\"TCP\"</span></span><br><span class=\"line\">  #NIO NATIVE</span><br><span class=\"line\">  server = <span class=\"string\">\"NIO\"</span></span><br><span class=\"line\">  #enable heartbeat</span><br><span class=\"line\">  heartbeat = <span class=\"keyword\">true</span></span><br><span class=\"line\">  # the client batch send request enable</span><br><span class=\"line\">  enableClientBatchSendRequest = <span class=\"keyword\">true</span></span><br><span class=\"line\">  #thread factory for netty</span><br><span class=\"line\">  threadFactory &#123;</span><br><span class=\"line\">    bossThreadPrefix = <span class=\"string\">\"NettyBoss\"</span></span><br><span class=\"line\">    workerThreadPrefix = <span class=\"string\">\"NettyServerNIOWorker\"</span></span><br><span class=\"line\">    serverExecutorThread-prefix = <span class=\"string\">\"NettyServerBizHandler\"</span></span><br><span class=\"line\">    shareBossWorker = <span class=\"keyword\">false</span></span><br><span class=\"line\">    clientSelectorThreadPrefix = <span class=\"string\">\"NettyClientSelector\"</span></span><br><span class=\"line\">    clientSelectorThreadSize = <span class=\"number\">1</span></span><br><span class=\"line\">    clientWorkerThreadPrefix = <span class=\"string\">\"NettyClientWorkerThread\"</span></span><br><span class=\"line\">    # netty boss thread size,will not be used for UDT</span><br><span class=\"line\">    bossThreadSize = <span class=\"number\">1</span></span><br><span class=\"line\">    #auto default pin or 8</span><br><span class=\"line\">    workerThreadSize = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  shutdown &#123;</span><br><span class=\"line\">    # when destroy server, wait seconds</span><br><span class=\"line\">    wait = <span class=\"number\">3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  serialization = <span class=\"string\">\"seata\"</span></span><br><span class=\"line\">  compressor = <span class=\"string\">\"none\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">service &#123;</span><br><span class=\"line\">  #transaction service group mapping</span><br><span class=\"line\">  vgroupMapping.my_test_tx_group = <span class=\"string\">\"default\"</span></span><br><span class=\"line\">  #only support when registry.type=file, please don't set multiple addresses</span><br><span class=\"line\">  <span class=\"keyword\">default</span>.grouplist = <span class=\"string\">\"127.0.0.1:8091\"</span></span><br><span class=\"line\">  #degrade, current not support</span><br><span class=\"line\">  enableDegrade = <span class=\"keyword\">false</span></span><br><span class=\"line\">  #disable seata</span><br><span class=\"line\">  disableGlobalTransaction = <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">client &#123;</span><br><span class=\"line\">  rm &#123;</span><br><span class=\"line\">    asyncCommitBufferLimit = <span class=\"number\">10000</span></span><br><span class=\"line\">    lock &#123;</span><br><span class=\"line\">      retryInterval = <span class=\"number\">10</span></span><br><span class=\"line\">      retryTimes = <span class=\"number\">30</span></span><br><span class=\"line\">      retryPolicyBranchRollbackOnConflict = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reportRetryCount = <span class=\"number\">5</span></span><br><span class=\"line\">    tableMetaCheckEnable = <span class=\"keyword\">false</span></span><br><span class=\"line\">    reportSuccessEnable = <span class=\"keyword\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tm &#123;</span><br><span class=\"line\">    commitRetryCount = <span class=\"number\">5</span></span><br><span class=\"line\">    rollbackRetryCount = <span class=\"number\">5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  undo &#123;</span><br><span class=\"line\">    dataValidation = <span class=\"keyword\">true</span></span><br><span class=\"line\">    logSerialization = <span class=\"string\">\"jackson\"</span></span><br><span class=\"line\">    logTable = <span class=\"string\">\"undo_log\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log &#123;</span><br><span class=\"line\">    exceptionRate = <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>3.数据源及GlobalTransactionScanner配置</code>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeataAutoConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSourceProperties dataSourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DruidDataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">        druidDataSource.setUrl(dataSourceProperties.getUrl());</span><br><span class=\"line\">        druidDataSource.setUsername(dataSourceProperties.getUsername());</span><br><span class=\"line\">        druidDataSource.setPassword(dataSourceProperties.getPassword());</span><br><span class=\"line\">        druidDataSource.setDriverClassName(dataSourceProperties.getDriverClassName());</span><br><span class=\"line\">        druidDataSource.setInitialSize(<span class=\"number\">0</span>);</span><br><span class=\"line\">        druidDataSource.setMaxActive(<span class=\"number\">180</span>);</span><br><span class=\"line\">        druidDataSource.setMaxWait(<span class=\"number\">60000</span>);</span><br><span class=\"line\">        druidDataSource.setMinIdle(<span class=\"number\">0</span>);</span><br><span class=\"line\">        druidDataSource.setValidationQuery(<span class=\"string\">\"Select 1 from DUAL\"</span>);</span><br><span class=\"line\">        druidDataSource.setTestOnBorrow(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        druidDataSource.setTestOnReturn(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        druidDataSource.setTestWhileIdle(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        druidDataSource.setTimeBetweenEvictionRunsMillis(<span class=\"number\">60000</span>);</span><br><span class=\"line\">        druidDataSource.setMinEvictableIdleTimeMillis(<span class=\"number\">25200000</span>);</span><br><span class=\"line\">        druidDataSource.setRemoveAbandoned(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        druidDataSource.setRemoveAbandonedTimeout(<span class=\"number\">1800</span>);</span><br><span class=\"line\">        druidDataSource.setLogAbandoned(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">dataSourceProxy</span><span class=\"params\">(DruidDataSource druidDataSource)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(druidDataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">(DataSourceProxy dataSourceProxy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSourceProxy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactory</span><span class=\"params\">(DataSourceProxy dataSourceProxy)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean factoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        factoryBean.setDataSource(dataSourceProxy);</span><br><span class=\"line\">        factoryBean.setMapperLocations(<span class=\"keyword\">new</span> PathMatchingResourcePatternResolver()</span><br><span class=\"line\">                .getResources(<span class=\"string\">\"classpath*:/mapper/*.xml\"</span>));</span><br><span class=\"line\">        factoryBean.setTransactionFactory(<span class=\"keyword\">new</span> SpringManagedTransactionFactory());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factoryBean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> GlobalTransactionScanner <span class=\"title\">globalTransactionScanner</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//dubbo-seata-service是应用名，my_test_tx_group是事务分组，和客户端file.conf中service.vgroupMapping.my_test_tx_group对应。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> GlobalTransactionScanner(<span class=\"string\">\"dubbo-seata-service\"</span>, <span class=\"string\">\"my_test_tx_group\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>4.数据库增加事务回滚日志表</code></p>\n<pre><code>CREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\nundo_log用于插入回滚日志,把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 UNDO_LOG 表中。回滚完成后数据被删除。\n</code></pre>\n<h3>二.启动服务</h3>\n<p><code>1.启动zk</code></p>\n<p><code>2.启动seata-server</code></p>\n<p><code>3.启动项目(dubbo-seata-service和dubbo-seata)</code>\n<img src=\"/blog/img/seata/seata4.png\" alt=\"在这里插入图片描述\">\n如上图seata-server中的日志，可以看到provider和consumer的TM,RM都已注册成功。</p>\n<h3>三.分布式事务的使用</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Reference</span>(retries = -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AccountService accountService;</span><br><span class=\"line\">    <span class=\"meta\">@Reference</span>(retries = -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BussinessService bussinessService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GlobalTransactional</span>(name = <span class=\"string\">\"dubbo-seata\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"开始全局事务，XID = \"</span> + RootContext.getXID());</span><br><span class=\"line\">        accountService.updateAccount();</span><br><span class=\"line\">        bussinessService.updateBussiness();</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"测试抛异常后，分布式事务回滚！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<pre><code>如上述代码，只需要在方法上加上@GlobalTransactional即可\n</code></pre>\n<p><strong>执行上述代码看seata-server日志</strong>\n<img src=\"/blog/img/seata/seata5.png\" alt=\"在这里插入图片描述\"></p>\n<pre><code>如上图，可以看到整个事务回滚过程，开启全局事务——注册分支事务——回滚分支事务——回滚全局事务。\n</code></pre>\n<h3>四.范例代码</h3>\n<pre><code>https://gitee.com/xshCloudy/sharding.git\n</code></pre>\n<h3>五.参考项目及资料</h3>\n<pre><code>https://github.com/seata/seata.git\nhttps://github.com/seata/seata-samples.git\nhttps://seata.io/zh-cn/docs/overview/what-is-seata.html\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckx5p5xlf000298v5yupzyxp2","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xm0000b98v5k4nwsxh4"},{"post_id":"ckx5p5xlw000998v50zj7fo7v","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xm2000d98v5a08sl3zl"},{"post_id":"ckx5p5xm0000c98v5dmb4uw3p","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xm5000g98v5fnqj7vsc"},{"post_id":"ckx5p5xlp000498v5f4pv9r7u","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xm6000i98v5y37mmsgo"},{"post_id":"ckx5p5xm3000e98v5qv8bju1d","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xm7000l98v56oghokph"},{"post_id":"ckx5p5xm5000h98v5i8ywmb3e","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xm9000n98v5ojwufa12"},{"post_id":"ckx5p5xls000798v58w8vb7ey","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xma000p98v5d2wqtkma"},{"post_id":"ckx5p5xm6000j98v581gf3b3m","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xmc000s98v5d1fk0mx6"},{"post_id":"ckx5p5xm8000m98v5nrm0hvtr","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xmd000u98v5cydwit87"},{"post_id":"ckx5p5xlv000898v588oyt67h","tag_id":"ckx5p5xm7000k98v5trmnzpu7","_id":"ckx5p5xmf000w98v57oyybtqw"},{"post_id":"ckx5p5xma000q98v5cuo4iwma","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xmg000y98v5saf1627u"},{"post_id":"ckx5p5xmc000t98v5mpyca5ef","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xmi001198v5dfrezs83"},{"post_id":"ckx5p5xmd000v98v54gwlio3n","tag_id":"ckx5p5xm7000k98v5trmnzpu7","_id":"ckx5p5xmj001398v5qcmz5e8k"},{"post_id":"ckx5p5xm9000o98v56jxjzdr1","tag_id":"ckx5p5xmb000r98v5i3j62lo4","_id":"ckx5p5xmk001598v5iktn1201"},{"post_id":"ckx5p5xmg000z98v566m0i208","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xml001798v5m85u7v0d"},{"post_id":"ckx5p5xmi001298v5ls8l86cn","tag_id":"ckx5p5xm7000k98v5trmnzpu7","_id":"ckx5p5xmm001998v5hcy5oh6m"},{"post_id":"ckx5p5xmj001498v550kno04w","tag_id":"ckx5p5xm7000k98v5trmnzpu7","_id":"ckx5p5xmo001c98v5g0lybsmu"},{"post_id":"ckx5p5xmf000x98v53yrwtayk","tag_id":"ckx5p5xmh001098v552604hc9","_id":"ckx5p5xmq001e98v59bc1i8v3"},{"post_id":"ckx5p5xmk001698v5cabj2xo4","tag_id":"ckx5p5xm7000k98v5trmnzpu7","_id":"ckx5p5xmr001g98v5esk5gq09"},{"post_id":"ckx5p5xmn001a98v5x8yredue","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xmr001h98v5p9t6dyrr"},{"post_id":"ckx5p5xmp001d98v5ibl1qztv","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xms001i98v5gyrtgy26"},{"post_id":"ckx5p5xmq001f98v5tyq5wt4i","tag_id":"ckx5p5xm7000k98v5trmnzpu7","_id":"ckx5p5xms001j98v5k98j9rpd"},{"post_id":"ckx5p5xmm001898v5jgxmnbv0","tag_id":"ckx5p5xmo001b98v5b3t87t7r","_id":"ckx5p5xms001k98v58skbxl7j"},{"post_id":"ckx5p5xn2001l98v59kw99yap","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xn4001n98v5jlzjfpsz"},{"post_id":"ckx5p5xn3001m98v58obyxbs2","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xn5001p98v5b0uzutoy"},{"post_id":"ckx5p5xn4001o98v5sd6daofq","tag_id":"ckx5p5xlr000598v5xtyrw0es","_id":"ckx5p5xn6001r98v5by16fscp"},{"post_id":"ckx5p5xn6001q98v56xshhvwh","tag_id":"ckx5p5xmh001098v552604hc9","_id":"ckx5p5xn7001s98v5mla6w0s9"}],"Tag":[{"name":"java","_id":"ckx5p5xlr000598v5xtyrw0es"},{"name":"guitar","_id":"ckx5p5xm7000k98v5trmnzpu7"},{"name":"markdown","_id":"ckx5p5xmb000r98v5i3j62lo4"},{"name":"seata","_id":"ckx5p5xmh001098v552604hc9"},{"name":"sentinel","_id":"ckx5p5xmo001b98v5b3t87t7r"}]}}